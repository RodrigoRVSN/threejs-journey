{"ast":null,"code":"import { Mesh, Color, Vector2, LinearEncoding, TextureLoader, Matrix4, Clock, ShaderMaterial, UniformsUtils, UniformsLib, RepeatWrapping, Vector4 } from 'three';\nimport { Reflector } from './Reflector.js';\nimport { Refractor } from './Refractor.js';\n/**\n * References:\n *\thttp://www.valvesoftware.com/publications/2010/siggraph2010_vlachos_waterflow.pdf\n * \thttp://graphicsrunner.blogspot.de/2010/08/water-using-flow-maps.html\n *\n */\n\nclass Water2 extends Mesh {\n  constructor(geometry) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(geometry);\n    this.type = 'Water';\n    const scope = this;\n    const color = options.color !== undefined ? new Color(options.color) : new Color(0xffffff);\n    const textureWidth = options.textureWidth || 512;\n    const textureHeight = options.textureHeight || 512;\n    const clipBias = options.clipBias || 0;\n    const flowDirection = options.flowDirection || new Vector2(1, 0);\n    const flowSpeed = options.flowSpeed || 0.03;\n    const reflectivity = options.reflectivity || 0.02;\n    const scale = options.scale || 1;\n    const shader = options.shader || Water2.WaterShader;\n    const encoding = options.encoding !== undefined ? options.encoding : LinearEncoding;\n    const textureLoader = new TextureLoader();\n    const flowMap = options.flowMap || undefined;\n    const normalMap0 = options.normalMap0 || textureLoader.load('textures/water/Water_1_M_Normal.jpg');\n    const normalMap1 = options.normalMap1 || textureLoader.load('textures/water/Water_2_M_Normal.jpg');\n    const cycle = 0.15; // a cycle of a flow map phase\n\n    const halfCycle = cycle * 0.5;\n    const textureMatrix = new Matrix4();\n    const clock = new Clock(); // internal components\n\n    if (Reflector === undefined) {\n      console.error('THREE.Water: Required component Reflector not found.');\n      return;\n    }\n\n    if (Refractor === undefined) {\n      console.error('THREE.Water: Required component Refractor not found.');\n      return;\n    }\n\n    const reflector = new Reflector(geometry, {\n      textureWidth: textureWidth,\n      textureHeight: textureHeight,\n      clipBias: clipBias,\n      encoding: encoding\n    });\n    const refractor = new Refractor(geometry, {\n      textureWidth: textureWidth,\n      textureHeight: textureHeight,\n      clipBias: clipBias,\n      encoding: encoding\n    });\n    reflector.matrixAutoUpdate = false;\n    refractor.matrixAutoUpdate = false; // material\n\n    this.material = new ShaderMaterial({\n      uniforms: UniformsUtils.merge([UniformsLib['fog'], shader.uniforms]),\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      transparent: true,\n      fog: true\n    });\n\n    if (flowMap !== undefined) {\n      this.material.defines.USE_FLOWMAP = '';\n      this.material.uniforms['tFlowMap'] = {\n        type: 't',\n        value: flowMap\n      };\n    } else {\n      this.material.uniforms['flowDirection'] = {\n        type: 'v2',\n        value: flowDirection\n      };\n    } // maps\n\n\n    normalMap0.wrapS = normalMap0.wrapT = RepeatWrapping;\n    normalMap1.wrapS = normalMap1.wrapT = RepeatWrapping;\n    this.material.uniforms['tReflectionMap'].value = reflector.getRenderTarget().texture;\n    this.material.uniforms['tRefractionMap'].value = refractor.getRenderTarget().texture;\n    this.material.uniforms['tNormalMap0'].value = normalMap0;\n    this.material.uniforms['tNormalMap1'].value = normalMap1; // water\n\n    this.material.uniforms['color'].value = color;\n    this.material.uniforms['reflectivity'].value = reflectivity;\n    this.material.uniforms['textureMatrix'].value = textureMatrix; // inital values\n\n    this.material.uniforms['config'].value.x = 0; // flowMapOffset0\n\n    this.material.uniforms['config'].value.y = halfCycle; // flowMapOffset1\n\n    this.material.uniforms['config'].value.z = halfCycle; // halfCycle\n\n    this.material.uniforms['config'].value.w = scale; // scale\n    // functions\n\n    function updateTextureMatrix(camera) {\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n      textureMatrix.multiply(camera.projectionMatrix);\n      textureMatrix.multiply(camera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld);\n    }\n\n    function updateFlow() {\n      const delta = clock.getDelta();\n      const config = scope.material.uniforms['config'];\n      config.value.x += flowSpeed * delta; // flowMapOffset0\n\n      config.value.y = config.value.x + halfCycle; // flowMapOffset1\n      // Important: The distance between offsets should be always the value of \"halfCycle\".\n      // Moreover, both offsets should be in the range of [ 0, cycle ].\n      // This approach ensures a smooth water flow and avoids \"reset\" effects.\n\n      if (config.value.x >= cycle) {\n        config.value.x = 0;\n        config.value.y = halfCycle;\n      } else if (config.value.y >= cycle) {\n        config.value.y = config.value.y - cycle;\n      }\n    } //\n\n\n    this.onBeforeRender = function (renderer, scene, camera) {\n      updateTextureMatrix(camera);\n      updateFlow();\n      scope.visible = false;\n      reflector.matrixWorld.copy(scope.matrixWorld);\n      refractor.matrixWorld.copy(scope.matrixWorld);\n      reflector.onBeforeRender(renderer, scene, camera);\n      refractor.onBeforeRender(renderer, scene, camera);\n      scope.visible = true;\n    };\n  }\n\n}\n\nWater2.prototype.isWater = true;\nWater2.WaterShader = {\n  uniforms: {\n    color: {\n      type: 'c',\n      value: null\n    },\n    reflectivity: {\n      type: 'f',\n      value: 0\n    },\n    tReflectionMap: {\n      type: 't',\n      value: null\n    },\n    tRefractionMap: {\n      type: 't',\n      value: null\n    },\n    tNormalMap0: {\n      type: 't',\n      value: null\n    },\n    tNormalMap1: {\n      type: 't',\n      value: null\n    },\n    textureMatrix: {\n      type: 'm4',\n      value: null\n    },\n    config: {\n      type: 'v4',\n      value: new Vector4()\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n\n\t\t#include <common>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\n\t\tuniform mat4 textureMatrix;\n\n\t\tvarying vec4 vCoord;\n\t\tvarying vec2 vUv;\n\t\tvarying vec3 vToEye;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tvCoord = textureMatrix * vec4( position, 1.0 );\n\n\t\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\t\t\tvToEye = cameraPosition - worldPosition.xyz;\n\n\t\t\tvec4 mvPosition =  viewMatrix * worldPosition; // used in fog_vertex\n\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}`,\n  fragmentShader:\n  /* glsl */\n  `\n\n\t\t#include <common>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\n\t\tuniform sampler2D tReflectionMap;\n\t\tuniform sampler2D tRefractionMap;\n\t\tuniform sampler2D tNormalMap0;\n\t\tuniform sampler2D tNormalMap1;\n\n\t\t#ifdef USE_FLOWMAP\n\t\t\tuniform sampler2D tFlowMap;\n\t\t#else\n\t\t\tuniform vec2 flowDirection;\n\t\t#endif\n\n\t\tuniform vec3 color;\n\t\tuniform float reflectivity;\n\t\tuniform vec4 config;\n\n\t\tvarying vec4 vCoord;\n\t\tvarying vec2 vUv;\n\t\tvarying vec3 vToEye;\n\n\t\tvoid main() {\n\n\t\t\t#include <logdepthbuf_fragment>\n\n\t\t\tfloat flowMapOffset0 = config.x;\n\t\t\tfloat flowMapOffset1 = config.y;\n\t\t\tfloat halfCycle = config.z;\n\t\t\tfloat scale = config.w;\n\n\t\t\tvec3 toEye = normalize( vToEye );\n\n\t\t\t// determine flow direction\n\t\t\tvec2 flow;\n\t\t\t#ifdef USE_FLOWMAP\n\t\t\t\tflow = texture2D( tFlowMap, vUv ).rg * 2.0 - 1.0;\n\t\t\t#else\n\t\t\t\tflow = flowDirection;\n\t\t\t#endif\n\t\t\tflow.x *= - 1.0;\n\n\t\t\t// sample normal maps (distort uvs with flowdata)\n\t\t\tvec4 normalColor0 = texture2D( tNormalMap0, ( vUv * scale ) + flow * flowMapOffset0 );\n\t\t\tvec4 normalColor1 = texture2D( tNormalMap1, ( vUv * scale ) + flow * flowMapOffset1 );\n\n\t\t\t// linear interpolate to get the final normal color\n\t\t\tfloat flowLerp = abs( halfCycle - flowMapOffset0 ) / halfCycle;\n\t\t\tvec4 normalColor = mix( normalColor0, normalColor1, flowLerp );\n\n\t\t\t// calculate normal vector\n\t\t\tvec3 normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n\n\t\t\t// calculate the fresnel term to blend reflection and refraction maps\n\t\t\tfloat theta = max( dot( toEye, normal ), 0.0 );\n\t\t\tfloat reflectance = reflectivity + ( 1.0 - reflectivity ) * pow( ( 1.0 - theta ), 5.0 );\n\n\t\t\t// calculate final uv coords\n\t\t\tvec3 coord = vCoord.xyz / vCoord.w;\n\t\t\tvec2 uv = coord.xy + coord.z * normal.xz * 0.05;\n\n\t\t\tvec4 reflectColor = texture2D( tReflectionMap, vec2( 1.0 - uv.x, uv.y ) );\n\t\t\tvec4 refractColor = texture2D( tRefractionMap, uv );\n\n\t\t\t// multiply water color with the mix of both textures\n\t\t\tgl_FragColor = vec4( color, 1.0 ) * mix( refractColor, reflectColor, reflectance );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\t\t\t#include <fog_fragment>\n\n\t\t}`\n};\nexport { Water2 };","map":{"version":3,"names":["Mesh","Color","Vector2","LinearEncoding","TextureLoader","Matrix4","Clock","ShaderMaterial","UniformsUtils","UniformsLib","RepeatWrapping","Vector4","Reflector","Refractor","Water2","constructor","geometry","options","type","scope","color","undefined","textureWidth","textureHeight","clipBias","flowDirection","flowSpeed","reflectivity","scale","shader","WaterShader","encoding","textureLoader","flowMap","normalMap0","load","normalMap1","cycle","halfCycle","textureMatrix","clock","console","error","reflector","refractor","matrixAutoUpdate","material","uniforms","merge","vertexShader","fragmentShader","transparent","fog","defines","USE_FLOWMAP","value","wrapS","wrapT","getRenderTarget","texture","x","y","z","w","updateTextureMatrix","camera","set","multiply","projectionMatrix","matrixWorldInverse","matrixWorld","updateFlow","delta","getDelta","config","onBeforeRender","renderer","scene","visible","copy","prototype","isWater","tReflectionMap","tRefractionMap","tNormalMap0","tNormalMap1"],"sources":["/home/rodrigorvsn/workspace/study/threejs-journey/07-react-three-fiber/08-mouse-events-with-r3f/node_modules/three-stdlib/objects/Water2.js"],"sourcesContent":["import { Mesh, Color, Vector2, LinearEncoding, TextureLoader, Matrix4, Clock, ShaderMaterial, UniformsUtils, UniformsLib, RepeatWrapping, Vector4 } from 'three';\nimport { Reflector } from './Reflector.js';\nimport { Refractor } from './Refractor.js';\n\n/**\n * References:\n *\thttp://www.valvesoftware.com/publications/2010/siggraph2010_vlachos_waterflow.pdf\n * \thttp://graphicsrunner.blogspot.de/2010/08/water-using-flow-maps.html\n *\n */\n\nclass Water2 extends Mesh {\n  constructor(geometry, options = {}) {\n    super(geometry);\n    this.type = 'Water';\n    const scope = this;\n    const color = options.color !== undefined ? new Color(options.color) : new Color(0xffffff);\n    const textureWidth = options.textureWidth || 512;\n    const textureHeight = options.textureHeight || 512;\n    const clipBias = options.clipBias || 0;\n    const flowDirection = options.flowDirection || new Vector2(1, 0);\n    const flowSpeed = options.flowSpeed || 0.03;\n    const reflectivity = options.reflectivity || 0.02;\n    const scale = options.scale || 1;\n    const shader = options.shader || Water2.WaterShader;\n    const encoding = options.encoding !== undefined ? options.encoding : LinearEncoding;\n    const textureLoader = new TextureLoader();\n    const flowMap = options.flowMap || undefined;\n    const normalMap0 = options.normalMap0 || textureLoader.load('textures/water/Water_1_M_Normal.jpg');\n    const normalMap1 = options.normalMap1 || textureLoader.load('textures/water/Water_2_M_Normal.jpg');\n    const cycle = 0.15; // a cycle of a flow map phase\n\n    const halfCycle = cycle * 0.5;\n    const textureMatrix = new Matrix4();\n    const clock = new Clock(); // internal components\n\n    if (Reflector === undefined) {\n      console.error('THREE.Water: Required component Reflector not found.');\n      return;\n    }\n\n    if (Refractor === undefined) {\n      console.error('THREE.Water: Required component Refractor not found.');\n      return;\n    }\n\n    const reflector = new Reflector(geometry, {\n      textureWidth: textureWidth,\n      textureHeight: textureHeight,\n      clipBias: clipBias,\n      encoding: encoding\n    });\n    const refractor = new Refractor(geometry, {\n      textureWidth: textureWidth,\n      textureHeight: textureHeight,\n      clipBias: clipBias,\n      encoding: encoding\n    });\n    reflector.matrixAutoUpdate = false;\n    refractor.matrixAutoUpdate = false; // material\n\n    this.material = new ShaderMaterial({\n      uniforms: UniformsUtils.merge([UniformsLib['fog'], shader.uniforms]),\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      transparent: true,\n      fog: true\n    });\n\n    if (flowMap !== undefined) {\n      this.material.defines.USE_FLOWMAP = '';\n      this.material.uniforms['tFlowMap'] = {\n        type: 't',\n        value: flowMap\n      };\n    } else {\n      this.material.uniforms['flowDirection'] = {\n        type: 'v2',\n        value: flowDirection\n      };\n    } // maps\n\n\n    normalMap0.wrapS = normalMap0.wrapT = RepeatWrapping;\n    normalMap1.wrapS = normalMap1.wrapT = RepeatWrapping;\n    this.material.uniforms['tReflectionMap'].value = reflector.getRenderTarget().texture;\n    this.material.uniforms['tRefractionMap'].value = refractor.getRenderTarget().texture;\n    this.material.uniforms['tNormalMap0'].value = normalMap0;\n    this.material.uniforms['tNormalMap1'].value = normalMap1; // water\n\n    this.material.uniforms['color'].value = color;\n    this.material.uniforms['reflectivity'].value = reflectivity;\n    this.material.uniforms['textureMatrix'].value = textureMatrix; // inital values\n\n    this.material.uniforms['config'].value.x = 0; // flowMapOffset0\n\n    this.material.uniforms['config'].value.y = halfCycle; // flowMapOffset1\n\n    this.material.uniforms['config'].value.z = halfCycle; // halfCycle\n\n    this.material.uniforms['config'].value.w = scale; // scale\n    // functions\n\n    function updateTextureMatrix(camera) {\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n      textureMatrix.multiply(camera.projectionMatrix);\n      textureMatrix.multiply(camera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld);\n    }\n\n    function updateFlow() {\n      const delta = clock.getDelta();\n      const config = scope.material.uniforms['config'];\n      config.value.x += flowSpeed * delta; // flowMapOffset0\n\n      config.value.y = config.value.x + halfCycle; // flowMapOffset1\n      // Important: The distance between offsets should be always the value of \"halfCycle\".\n      // Moreover, both offsets should be in the range of [ 0, cycle ].\n      // This approach ensures a smooth water flow and avoids \"reset\" effects.\n\n      if (config.value.x >= cycle) {\n        config.value.x = 0;\n        config.value.y = halfCycle;\n      } else if (config.value.y >= cycle) {\n        config.value.y = config.value.y - cycle;\n      }\n    } //\n\n\n    this.onBeforeRender = function (renderer, scene, camera) {\n      updateTextureMatrix(camera);\n      updateFlow();\n      scope.visible = false;\n      reflector.matrixWorld.copy(scope.matrixWorld);\n      refractor.matrixWorld.copy(scope.matrixWorld);\n      reflector.onBeforeRender(renderer, scene, camera);\n      refractor.onBeforeRender(renderer, scene, camera);\n      scope.visible = true;\n    };\n  }\n\n}\n\nWater2.prototype.isWater = true;\nWater2.WaterShader = {\n  uniforms: {\n    color: {\n      type: 'c',\n      value: null\n    },\n    reflectivity: {\n      type: 'f',\n      value: 0\n    },\n    tReflectionMap: {\n      type: 't',\n      value: null\n    },\n    tRefractionMap: {\n      type: 't',\n      value: null\n    },\n    tNormalMap0: {\n      type: 't',\n      value: null\n    },\n    tNormalMap1: {\n      type: 't',\n      value: null\n    },\n    textureMatrix: {\n      type: 'm4',\n      value: null\n    },\n    config: {\n      type: 'v4',\n      value: new Vector4()\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n\n\t\t#include <common>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\n\t\tuniform mat4 textureMatrix;\n\n\t\tvarying vec4 vCoord;\n\t\tvarying vec2 vUv;\n\t\tvarying vec3 vToEye;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tvCoord = textureMatrix * vec4( position, 1.0 );\n\n\t\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\t\t\tvToEye = cameraPosition - worldPosition.xyz;\n\n\t\t\tvec4 mvPosition =  viewMatrix * worldPosition; // used in fog_vertex\n\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}`,\n  fragmentShader:\n  /* glsl */\n  `\n\n\t\t#include <common>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\n\t\tuniform sampler2D tReflectionMap;\n\t\tuniform sampler2D tRefractionMap;\n\t\tuniform sampler2D tNormalMap0;\n\t\tuniform sampler2D tNormalMap1;\n\n\t\t#ifdef USE_FLOWMAP\n\t\t\tuniform sampler2D tFlowMap;\n\t\t#else\n\t\t\tuniform vec2 flowDirection;\n\t\t#endif\n\n\t\tuniform vec3 color;\n\t\tuniform float reflectivity;\n\t\tuniform vec4 config;\n\n\t\tvarying vec4 vCoord;\n\t\tvarying vec2 vUv;\n\t\tvarying vec3 vToEye;\n\n\t\tvoid main() {\n\n\t\t\t#include <logdepthbuf_fragment>\n\n\t\t\tfloat flowMapOffset0 = config.x;\n\t\t\tfloat flowMapOffset1 = config.y;\n\t\t\tfloat halfCycle = config.z;\n\t\t\tfloat scale = config.w;\n\n\t\t\tvec3 toEye = normalize( vToEye );\n\n\t\t\t// determine flow direction\n\t\t\tvec2 flow;\n\t\t\t#ifdef USE_FLOWMAP\n\t\t\t\tflow = texture2D( tFlowMap, vUv ).rg * 2.0 - 1.0;\n\t\t\t#else\n\t\t\t\tflow = flowDirection;\n\t\t\t#endif\n\t\t\tflow.x *= - 1.0;\n\n\t\t\t// sample normal maps (distort uvs with flowdata)\n\t\t\tvec4 normalColor0 = texture2D( tNormalMap0, ( vUv * scale ) + flow * flowMapOffset0 );\n\t\t\tvec4 normalColor1 = texture2D( tNormalMap1, ( vUv * scale ) + flow * flowMapOffset1 );\n\n\t\t\t// linear interpolate to get the final normal color\n\t\t\tfloat flowLerp = abs( halfCycle - flowMapOffset0 ) / halfCycle;\n\t\t\tvec4 normalColor = mix( normalColor0, normalColor1, flowLerp );\n\n\t\t\t// calculate normal vector\n\t\t\tvec3 normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n\n\t\t\t// calculate the fresnel term to blend reflection and refraction maps\n\t\t\tfloat theta = max( dot( toEye, normal ), 0.0 );\n\t\t\tfloat reflectance = reflectivity + ( 1.0 - reflectivity ) * pow( ( 1.0 - theta ), 5.0 );\n\n\t\t\t// calculate final uv coords\n\t\t\tvec3 coord = vCoord.xyz / vCoord.w;\n\t\t\tvec2 uv = coord.xy + coord.z * normal.xz * 0.05;\n\n\t\t\tvec4 reflectColor = texture2D( tReflectionMap, vec2( 1.0 - uv.x, uv.y ) );\n\t\t\tvec4 refractColor = texture2D( tRefractionMap, uv );\n\n\t\t\t// multiply water color with the mix of both textures\n\t\t\tgl_FragColor = vec4( color, 1.0 ) * mix( refractColor, reflectColor, reflectance );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\t\t\t#include <fog_fragment>\n\n\t\t}`\n};\n\nexport { Water2 };\n"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,EAAsBC,OAAtB,EAA+BC,cAA/B,EAA+CC,aAA/C,EAA8DC,OAA9D,EAAuEC,KAAvE,EAA8EC,cAA9E,EAA8FC,aAA9F,EAA6GC,WAA7G,EAA0HC,cAA1H,EAA0IC,OAA1I,QAAyJ,OAAzJ;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,MAAN,SAAqBd,IAArB,CAA0B;EACxBe,WAAW,CAACC,QAAD,EAAyB;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAClC,MAAMD,QAAN;IACA,KAAKE,IAAL,GAAY,OAAZ;IACA,MAAMC,KAAK,GAAG,IAAd;IACA,MAAMC,KAAK,GAAGH,OAAO,CAACG,KAAR,KAAkBC,SAAlB,GAA8B,IAAIpB,KAAJ,CAAUgB,OAAO,CAACG,KAAlB,CAA9B,GAAyD,IAAInB,KAAJ,CAAU,QAAV,CAAvE;IACA,MAAMqB,YAAY,GAAGL,OAAO,CAACK,YAAR,IAAwB,GAA7C;IACA,MAAMC,aAAa,GAAGN,OAAO,CAACM,aAAR,IAAyB,GAA/C;IACA,MAAMC,QAAQ,GAAGP,OAAO,CAACO,QAAR,IAAoB,CAArC;IACA,MAAMC,aAAa,GAAGR,OAAO,CAACQ,aAAR,IAAyB,IAAIvB,OAAJ,CAAY,CAAZ,EAAe,CAAf,CAA/C;IACA,MAAMwB,SAAS,GAAGT,OAAO,CAACS,SAAR,IAAqB,IAAvC;IACA,MAAMC,YAAY,GAAGV,OAAO,CAACU,YAAR,IAAwB,IAA7C;IACA,MAAMC,KAAK,GAAGX,OAAO,CAACW,KAAR,IAAiB,CAA/B;IACA,MAAMC,MAAM,GAAGZ,OAAO,CAACY,MAAR,IAAkBf,MAAM,CAACgB,WAAxC;IACA,MAAMC,QAAQ,GAAGd,OAAO,CAACc,QAAR,KAAqBV,SAArB,GAAiCJ,OAAO,CAACc,QAAzC,GAAoD5B,cAArE;IACA,MAAM6B,aAAa,GAAG,IAAI5B,aAAJ,EAAtB;IACA,MAAM6B,OAAO,GAAGhB,OAAO,CAACgB,OAAR,IAAmBZ,SAAnC;IACA,MAAMa,UAAU,GAAGjB,OAAO,CAACiB,UAAR,IAAsBF,aAAa,CAACG,IAAd,CAAmB,qCAAnB,CAAzC;IACA,MAAMC,UAAU,GAAGnB,OAAO,CAACmB,UAAR,IAAsBJ,aAAa,CAACG,IAAd,CAAmB,qCAAnB,CAAzC;IACA,MAAME,KAAK,GAAG,IAAd,CAlBkC,CAkBd;;IAEpB,MAAMC,SAAS,GAAGD,KAAK,GAAG,GAA1B;IACA,MAAME,aAAa,GAAG,IAAIlC,OAAJ,EAAtB;IACA,MAAMmC,KAAK,GAAG,IAAIlC,KAAJ,EAAd,CAtBkC,CAsBP;;IAE3B,IAAIM,SAAS,KAAKS,SAAlB,EAA6B;MAC3BoB,OAAO,CAACC,KAAR,CAAc,sDAAd;MACA;IACD;;IAED,IAAI7B,SAAS,KAAKQ,SAAlB,EAA6B;MAC3BoB,OAAO,CAACC,KAAR,CAAc,sDAAd;MACA;IACD;;IAED,MAAMC,SAAS,GAAG,IAAI/B,SAAJ,CAAcI,QAAd,EAAwB;MACxCM,YAAY,EAAEA,YAD0B;MAExCC,aAAa,EAAEA,aAFyB;MAGxCC,QAAQ,EAAEA,QAH8B;MAIxCO,QAAQ,EAAEA;IAJ8B,CAAxB,CAAlB;IAMA,MAAMa,SAAS,GAAG,IAAI/B,SAAJ,CAAcG,QAAd,EAAwB;MACxCM,YAAY,EAAEA,YAD0B;MAExCC,aAAa,EAAEA,aAFyB;MAGxCC,QAAQ,EAAEA,QAH8B;MAIxCO,QAAQ,EAAEA;IAJ8B,CAAxB,CAAlB;IAMAY,SAAS,CAACE,gBAAV,GAA6B,KAA7B;IACAD,SAAS,CAACC,gBAAV,GAA6B,KAA7B,CA/CkC,CA+CE;;IAEpC,KAAKC,QAAL,GAAgB,IAAIvC,cAAJ,CAAmB;MACjCwC,QAAQ,EAAEvC,aAAa,CAACwC,KAAd,CAAoB,CAACvC,WAAW,CAAC,KAAD,CAAZ,EAAqBoB,MAAM,CAACkB,QAA5B,CAApB,CADuB;MAEjCE,YAAY,EAAEpB,MAAM,CAACoB,YAFY;MAGjCC,cAAc,EAAErB,MAAM,CAACqB,cAHU;MAIjCC,WAAW,EAAE,IAJoB;MAKjCC,GAAG,EAAE;IAL4B,CAAnB,CAAhB;;IAQA,IAAInB,OAAO,KAAKZ,SAAhB,EAA2B;MACzB,KAAKyB,QAAL,CAAcO,OAAd,CAAsBC,WAAtB,GAAoC,EAApC;MACA,KAAKR,QAAL,CAAcC,QAAd,CAAuB,UAAvB,IAAqC;QACnC7B,IAAI,EAAE,GAD6B;QAEnCqC,KAAK,EAAEtB;MAF4B,CAArC;IAID,CAND,MAMO;MACL,KAAKa,QAAL,CAAcC,QAAd,CAAuB,eAAvB,IAA0C;QACxC7B,IAAI,EAAE,IADkC;QAExCqC,KAAK,EAAE9B;MAFiC,CAA1C;IAID,CApEiC,CAoEhC;;;IAGFS,UAAU,CAACsB,KAAX,GAAmBtB,UAAU,CAACuB,KAAX,GAAmB/C,cAAtC;IACA0B,UAAU,CAACoB,KAAX,GAAmBpB,UAAU,CAACqB,KAAX,GAAmB/C,cAAtC;IACA,KAAKoC,QAAL,CAAcC,QAAd,CAAuB,gBAAvB,EAAyCQ,KAAzC,GAAiDZ,SAAS,CAACe,eAAV,GAA4BC,OAA7E;IACA,KAAKb,QAAL,CAAcC,QAAd,CAAuB,gBAAvB,EAAyCQ,KAAzC,GAAiDX,SAAS,CAACc,eAAV,GAA4BC,OAA7E;IACA,KAAKb,QAAL,CAAcC,QAAd,CAAuB,aAAvB,EAAsCQ,KAAtC,GAA8CrB,UAA9C;IACA,KAAKY,QAAL,CAAcC,QAAd,CAAuB,aAAvB,EAAsCQ,KAAtC,GAA8CnB,UAA9C,CA5EkC,CA4EwB;;IAE1D,KAAKU,QAAL,CAAcC,QAAd,CAAuB,OAAvB,EAAgCQ,KAAhC,GAAwCnC,KAAxC;IACA,KAAK0B,QAAL,CAAcC,QAAd,CAAuB,cAAvB,EAAuCQ,KAAvC,GAA+C5B,YAA/C;IACA,KAAKmB,QAAL,CAAcC,QAAd,CAAuB,eAAvB,EAAwCQ,KAAxC,GAAgDhB,aAAhD,CAhFkC,CAgF6B;;IAE/D,KAAKO,QAAL,CAAcC,QAAd,CAAuB,QAAvB,EAAiCQ,KAAjC,CAAuCK,CAAvC,GAA2C,CAA3C,CAlFkC,CAkFY;;IAE9C,KAAKd,QAAL,CAAcC,QAAd,CAAuB,QAAvB,EAAiCQ,KAAjC,CAAuCM,CAAvC,GAA2CvB,SAA3C,CApFkC,CAoFoB;;IAEtD,KAAKQ,QAAL,CAAcC,QAAd,CAAuB,QAAvB,EAAiCQ,KAAjC,CAAuCO,CAAvC,GAA2CxB,SAA3C,CAtFkC,CAsFoB;;IAEtD,KAAKQ,QAAL,CAAcC,QAAd,CAAuB,QAAvB,EAAiCQ,KAAjC,CAAuCQ,CAAvC,GAA2CnC,KAA3C,CAxFkC,CAwFgB;IAClD;;IAEA,SAASoC,mBAAT,CAA6BC,MAA7B,EAAqC;MACnC1B,aAAa,CAAC2B,GAAd,CAAkB,GAAlB,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,GAAjC,EAAsC,GAAtC,EAA2C,GAA3C,EAAgD,GAAhD,EAAqD,GAArD,EAA0D,GAA1D,EAA+D,GAA/D,EAAoE,GAApE,EAAyE,GAAzE,EAA8E,GAA9E,EAAmF,GAAnF,EAAwF,GAAxF,EAA6F,GAA7F;MACA3B,aAAa,CAAC4B,QAAd,CAAuBF,MAAM,CAACG,gBAA9B;MACA7B,aAAa,CAAC4B,QAAd,CAAuBF,MAAM,CAACI,kBAA9B;MACA9B,aAAa,CAAC4B,QAAd,CAAuBhD,KAAK,CAACmD,WAA7B;IACD;;IAED,SAASC,UAAT,GAAsB;MACpB,MAAMC,KAAK,GAAGhC,KAAK,CAACiC,QAAN,EAAd;MACA,MAAMC,MAAM,GAAGvD,KAAK,CAAC2B,QAAN,CAAeC,QAAf,CAAwB,QAAxB,CAAf;MACA2B,MAAM,CAACnB,KAAP,CAAaK,CAAb,IAAkBlC,SAAS,GAAG8C,KAA9B,CAHoB,CAGiB;;MAErCE,MAAM,CAACnB,KAAP,CAAaM,CAAb,GAAiBa,MAAM,CAACnB,KAAP,CAAaK,CAAb,GAAiBtB,SAAlC,CALoB,CAKyB;MAC7C;MACA;MACA;;MAEA,IAAIoC,MAAM,CAACnB,KAAP,CAAaK,CAAb,IAAkBvB,KAAtB,EAA6B;QAC3BqC,MAAM,CAACnB,KAAP,CAAaK,CAAb,GAAiB,CAAjB;QACAc,MAAM,CAACnB,KAAP,CAAaM,CAAb,GAAiBvB,SAAjB;MACD,CAHD,MAGO,IAAIoC,MAAM,CAACnB,KAAP,CAAaM,CAAb,IAAkBxB,KAAtB,EAA6B;QAClCqC,MAAM,CAACnB,KAAP,CAAaM,CAAb,GAAiBa,MAAM,CAACnB,KAAP,CAAaM,CAAb,GAAiBxB,KAAlC;MACD;IACF,CAlHiC,CAkHhC;;;IAGF,KAAKsC,cAAL,GAAsB,UAAUC,QAAV,EAAoBC,KAApB,EAA2BZ,MAA3B,EAAmC;MACvDD,mBAAmB,CAACC,MAAD,CAAnB;MACAM,UAAU;MACVpD,KAAK,CAAC2D,OAAN,GAAgB,KAAhB;MACAnC,SAAS,CAAC2B,WAAV,CAAsBS,IAAtB,CAA2B5D,KAAK,CAACmD,WAAjC;MACA1B,SAAS,CAAC0B,WAAV,CAAsBS,IAAtB,CAA2B5D,KAAK,CAACmD,WAAjC;MACA3B,SAAS,CAACgC,cAAV,CAAyBC,QAAzB,EAAmCC,KAAnC,EAA0CZ,MAA1C;MACArB,SAAS,CAAC+B,cAAV,CAAyBC,QAAzB,EAAmCC,KAAnC,EAA0CZ,MAA1C;MACA9C,KAAK,CAAC2D,OAAN,GAAgB,IAAhB;IACD,CATD;EAUD;;AAhIuB;;AAoI1BhE,MAAM,CAACkE,SAAP,CAAiBC,OAAjB,GAA2B,IAA3B;AACAnE,MAAM,CAACgB,WAAP,GAAqB;EACnBiB,QAAQ,EAAE;IACR3B,KAAK,EAAE;MACLF,IAAI,EAAE,GADD;MAELqC,KAAK,EAAE;IAFF,CADC;IAKR5B,YAAY,EAAE;MACZT,IAAI,EAAE,GADM;MAEZqC,KAAK,EAAE;IAFK,CALN;IASR2B,cAAc,EAAE;MACdhE,IAAI,EAAE,GADQ;MAEdqC,KAAK,EAAE;IAFO,CATR;IAaR4B,cAAc,EAAE;MACdjE,IAAI,EAAE,GADQ;MAEdqC,KAAK,EAAE;IAFO,CAbR;IAiBR6B,WAAW,EAAE;MACXlE,IAAI,EAAE,GADK;MAEXqC,KAAK,EAAE;IAFI,CAjBL;IAqBR8B,WAAW,EAAE;MACXnE,IAAI,EAAE,GADK;MAEXqC,KAAK,EAAE;IAFI,CArBL;IAyBRhB,aAAa,EAAE;MACbrB,IAAI,EAAE,IADO;MAEbqC,KAAK,EAAE;IAFM,CAzBP;IA6BRmB,MAAM,EAAE;MACNxD,IAAI,EAAE,IADA;MAENqC,KAAK,EAAE,IAAI5C,OAAJ;IAFD;EA7BA,CADS;EAmCnBsC,YAAY;EACZ;EACC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IA/DqB;EAgEnBC,cAAc;EACd;EACC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5IqB,CAArB;AA+IA,SAASpC,MAAT"},"metadata":{},"sourceType":"module"}