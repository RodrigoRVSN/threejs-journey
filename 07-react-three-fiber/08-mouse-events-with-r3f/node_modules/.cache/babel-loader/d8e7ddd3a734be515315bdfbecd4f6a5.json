{"ast":null,"code":"import { Vector3, BufferAttribute, Box3, FrontSide, Matrix4 } from 'three';\nimport { CENTER, BYTES_PER_NODE, IS_LEAFNODE_FLAG } from './Constants.js';\nimport { buildPackedTree } from './buildFunctions.js';\nimport { raycast, raycastFirst, shapecast, intersectsGeometry, setBuffer, clearBuffer } from './castFunctions.js';\nimport { OrientedBox } from '../math/OrientedBox.js';\nimport { ExtendedTriangle } from '../math/ExtendedTriangle.js';\nimport { PrimitivePool } from '../utils/PrimitivePool.js';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { iterateOverTriangles, setTriangle } from '../utils/TriangleUtilities.js';\nconst SKIP_GENERATION = Symbol('skip tree generation');\nconst aabb = /* @__PURE__ */new Box3();\nconst aabb2 = /* @__PURE__ */new Box3();\nconst tempMatrix = /* @__PURE__ */new Matrix4();\nconst obb = /* @__PURE__ */new OrientedBox();\nconst obb2 = /* @__PURE__ */new OrientedBox();\nconst temp = /* @__PURE__ */new Vector3();\nconst temp1 = /* @__PURE__ */new Vector3();\nconst temp2 = /* @__PURE__ */new Vector3();\nconst temp3 = /* @__PURE__ */new Vector3();\nconst temp4 = /* @__PURE__ */new Vector3();\nconst tempBox = /* @__PURE__ */new Box3();\nconst trianglePool = /* @__PURE__ */new PrimitivePool(() => new ExtendedTriangle());\nexport class MeshBVH {\n  static serialize(bvh) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (options.isBufferGeometry) {\n      console.warn('MeshBVH.serialize: The arguments for the function have changed. See documentation for new signature.');\n      return MeshBVH.serialize(arguments[0], {\n        cloneBuffers: arguments[2] === undefined ? true : arguments[2]\n      });\n    }\n\n    options = {\n      cloneBuffers: true,\n      ...options\n    };\n    const geometry = bvh.geometry;\n    const rootData = bvh._roots;\n    const indexAttribute = geometry.getIndex();\n    let result;\n\n    if (options.cloneBuffers) {\n      result = {\n        roots: rootData.map(root => root.slice()),\n        index: indexAttribute.array.slice()\n      };\n    } else {\n      result = {\n        roots: rootData,\n        index: indexAttribute.array\n      };\n    }\n\n    return result;\n  }\n\n  static deserialize(data, geometry) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (typeof options === 'boolean') {\n      console.warn('MeshBVH.deserialize: The arguments for the function have changed. See documentation for new signature.');\n      return MeshBVH.deserialize(arguments[0], arguments[1], {\n        setIndex: arguments[2] === undefined ? true : arguments[2]\n      });\n    }\n\n    options = {\n      setIndex: true,\n      ...options\n    };\n    const {\n      index,\n      roots\n    } = data;\n    const bvh = new MeshBVH(geometry, { ...options,\n      [SKIP_GENERATION]: true\n    });\n    bvh._roots = roots;\n\n    if (options.setIndex) {\n      const indexAttribute = geometry.getIndex();\n\n      if (indexAttribute === null) {\n        const newIndex = new BufferAttribute(data.index, 1, false);\n        geometry.setIndex(newIndex);\n      } else if (indexAttribute.array !== index) {\n        indexAttribute.array.set(index);\n        indexAttribute.needsUpdate = true;\n      }\n    }\n\n    return bvh;\n  }\n\n  constructor(geometry) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('MeshBVH: Only BufferGeometries are supported.');\n    } else if (geometry.index && geometry.index.isInterleavedBufferAttribute) {\n      throw new Error('MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.');\n    } // default options\n\n\n    options = Object.assign({\n      strategy: CENTER,\n      maxDepth: 40,\n      maxLeafTris: 10,\n      verbose: true,\n      useSharedArrayBuffer: false,\n      setBoundingBox: true,\n      onProgress: null,\n      // undocumented options\n      // Whether to skip generating the tree. Used for deserialization.\n      [SKIP_GENERATION]: false\n    }, options);\n\n    if (options.useSharedArrayBuffer && typeof SharedArrayBuffer === 'undefined') {\n      throw new Error('MeshBVH: SharedArrayBuffer is not available.');\n    }\n\n    this._roots = null;\n\n    if (!options[SKIP_GENERATION]) {\n      this._roots = buildPackedTree(geometry, options);\n\n      if (!geometry.boundingBox && options.setBoundingBox) {\n        geometry.boundingBox = this.getBoundingBox(new Box3());\n      }\n    } // retain references to the geometry so we can use them it without having to\n    // take a geometry reference in every function.\n\n\n    this.geometry = geometry;\n  }\n\n  refit() {\n    let nodeIndices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    if (nodeIndices && Array.isArray(nodeIndices)) {\n      nodeIndices = new Set(nodeIndices);\n    }\n\n    const geometry = this.geometry;\n    const indexArr = geometry.index.array;\n    const posAttr = geometry.attributes.position;\n    let buffer, uint32Array, uint16Array, float32Array;\n    let byteOffset = 0;\n    const roots = this._roots;\n\n    for (let i = 0, l = roots.length; i < l; i++) {\n      buffer = roots[i];\n      uint32Array = new Uint32Array(buffer);\n      uint16Array = new Uint16Array(buffer);\n      float32Array = new Float32Array(buffer);\n\n      _traverse(0, byteOffset);\n\n      byteOffset += buffer.byteLength;\n    }\n\n    function _traverse(node32Index, byteOffset) {\n      let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      const node16Index = node32Index * 2;\n      const isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;\n\n      if (isLeaf) {\n        const offset = uint32Array[node32Index + 6];\n        const count = uint16Array[node16Index + 14];\n        let minx = Infinity;\n        let miny = Infinity;\n        let minz = Infinity;\n        let maxx = -Infinity;\n        let maxy = -Infinity;\n        let maxz = -Infinity;\n\n        for (let i = 3 * offset, l = 3 * (offset + count); i < l; i++) {\n          const index = indexArr[i];\n          const x = posAttr.getX(index);\n          const y = posAttr.getY(index);\n          const z = posAttr.getZ(index);\n          if (x < minx) minx = x;\n          if (x > maxx) maxx = x;\n          if (y < miny) miny = y;\n          if (y > maxy) maxy = y;\n          if (z < minz) minz = z;\n          if (z > maxz) maxz = z;\n        }\n\n        if (float32Array[node32Index + 0] !== minx || float32Array[node32Index + 1] !== miny || float32Array[node32Index + 2] !== minz || float32Array[node32Index + 3] !== maxx || float32Array[node32Index + 4] !== maxy || float32Array[node32Index + 5] !== maxz) {\n          float32Array[node32Index + 0] = minx;\n          float32Array[node32Index + 1] = miny;\n          float32Array[node32Index + 2] = minz;\n          float32Array[node32Index + 3] = maxx;\n          float32Array[node32Index + 4] = maxy;\n          float32Array[node32Index + 5] = maxz;\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        const left = node32Index + 8;\n        const right = uint32Array[node32Index + 6]; // the identifying node indices provided by the shapecast function include offsets of all\n        // root buffers to guarantee they're unique between roots so offset left and right indices here.\n\n        const offsetLeft = left + byteOffset;\n        const offsetRight = right + byteOffset;\n        let forceChildren = force;\n        let includesLeft = false;\n        let includesRight = false;\n\n        if (nodeIndices) {\n          // if we see that neither the left or right child are included in the set that need to be updated\n          // then we assume that all children need to be updated.\n          if (!forceChildren) {\n            includesLeft = nodeIndices.has(offsetLeft);\n            includesRight = nodeIndices.has(offsetRight);\n            forceChildren = !includesLeft && !includesRight;\n          }\n        } else {\n          includesLeft = true;\n          includesRight = true;\n        }\n\n        const traverseLeft = forceChildren || includesLeft;\n        const traverseRight = forceChildren || includesRight;\n        let leftChange = false;\n\n        if (traverseLeft) {\n          leftChange = _traverse(left, byteOffset, forceChildren);\n        }\n\n        let rightChange = false;\n\n        if (traverseRight) {\n          rightChange = _traverse(right, byteOffset, forceChildren);\n        }\n\n        const didChange = leftChange || rightChange;\n\n        if (didChange) {\n          for (let i = 0; i < 3; i++) {\n            const lefti = left + i;\n            const righti = right + i;\n            const minLeftValue = float32Array[lefti];\n            const maxLeftValue = float32Array[lefti + 3];\n            const minRightValue = float32Array[righti];\n            const maxRightValue = float32Array[righti + 3];\n            float32Array[node32Index + i] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n            float32Array[node32Index + i + 3] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n          }\n        }\n\n        return didChange;\n      }\n    }\n  }\n\n  traverse(callback) {\n    let rootIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const buffer = this._roots[rootIndex];\n    const uint32Array = new Uint32Array(buffer);\n    const uint16Array = new Uint16Array(buffer);\n\n    _traverse(0);\n\n    function _traverse(node32Index) {\n      let depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      const node16Index = node32Index * 2;\n      const isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;\n\n      if (isLeaf) {\n        const offset = uint32Array[node32Index + 6];\n        const count = uint16Array[node16Index + 14];\n        callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), offset, count);\n      } else {\n        // TODO: use node functions here\n        const left = node32Index + BYTES_PER_NODE / 4;\n        const right = uint32Array[node32Index + 6];\n        const splitAxis = uint32Array[node32Index + 7];\n        const stopTraversal = callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), splitAxis);\n\n        if (!stopTraversal) {\n          _traverse(left, depth + 1);\n\n          _traverse(right, depth + 1);\n        }\n      }\n    }\n  }\n  /* Core Cast Functions */\n\n\n  raycast(ray) {\n    let materialOrSide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FrontSide;\n    const roots = this._roots;\n    const geometry = this.geometry;\n    const intersects = [];\n    const isMaterial = materialOrSide.isMaterial;\n    const isArrayMaterial = Array.isArray(materialOrSide);\n    const groups = geometry.groups;\n    const side = isMaterial ? materialOrSide.side : materialOrSide;\n\n    for (let i = 0, l = roots.length; i < l; i++) {\n      const materialSide = isArrayMaterial ? materialOrSide[groups[i].materialIndex].side : side;\n      const startCount = intersects.length;\n      setBuffer(roots[i]);\n      raycast(0, geometry, materialSide, ray, intersects);\n      clearBuffer();\n\n      if (isArrayMaterial) {\n        const materialIndex = groups[i].materialIndex;\n\n        for (let j = startCount, jl = intersects.length; j < jl; j++) {\n          intersects[j].face.materialIndex = materialIndex;\n        }\n      }\n    }\n\n    return intersects;\n  }\n\n  raycastFirst(ray) {\n    let materialOrSide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FrontSide;\n    const roots = this._roots;\n    const geometry = this.geometry;\n    const isMaterial = materialOrSide.isMaterial;\n    const isArrayMaterial = Array.isArray(materialOrSide);\n    let closestResult = null;\n    const groups = geometry.groups;\n    const side = isMaterial ? materialOrSide.side : materialOrSide;\n\n    for (let i = 0, l = roots.length; i < l; i++) {\n      const materialSide = isArrayMaterial ? materialOrSide[groups[i].materialIndex].side : side;\n      setBuffer(roots[i]);\n      const result = raycastFirst(0, geometry, materialSide, ray);\n      clearBuffer();\n\n      if (result != null && (closestResult == null || result.distance < closestResult.distance)) {\n        closestResult = result;\n\n        if (isArrayMaterial) {\n          result.face.materialIndex = groups[i].materialIndex;\n        }\n      }\n    }\n\n    return closestResult;\n  }\n\n  intersectsGeometry(otherGeometry, geomToMesh) {\n    const geometry = this.geometry;\n    let result = false;\n\n    for (const root of this._roots) {\n      setBuffer(root);\n      result = intersectsGeometry(0, geometry, otherGeometry, geomToMesh);\n      clearBuffer();\n\n      if (result) {\n        break;\n      }\n    }\n\n    return result;\n  }\n\n  shapecast(callbacks, _intersectsTriangleFunc, _orderNodesFunc) {\n    const geometry = this.geometry;\n\n    if (callbacks instanceof Function) {\n      if (_intersectsTriangleFunc) {\n        // Support the previous function signature that provided three sequential index buffer\n        // indices here.\n        const originalTriangleFunc = _intersectsTriangleFunc;\n\n        _intersectsTriangleFunc = (tri, index, contained, depth) => {\n          const i3 = index * 3;\n          return originalTriangleFunc(tri, i3, i3 + 1, i3 + 2, contained, depth);\n        };\n      }\n\n      callbacks = {\n        boundsTraverseOrder: _orderNodesFunc,\n        intersectsBounds: callbacks,\n        intersectsTriangle: _intersectsTriangleFunc,\n        intersectsRange: null\n      };\n      console.warn('MeshBVH: Shapecast function signature has changed and now takes an object of callbacks as a second argument. See docs for new signature.');\n    }\n\n    const triangle = trianglePool.getPrimitive();\n    let {\n      boundsTraverseOrder,\n      intersectsBounds,\n      intersectsRange,\n      intersectsTriangle\n    } = callbacks;\n\n    if (intersectsRange && intersectsTriangle) {\n      const originalIntersectsRange = intersectsRange;\n\n      intersectsRange = (offset, count, contained, depth, nodeIndex) => {\n        if (!originalIntersectsRange(offset, count, contained, depth, nodeIndex)) {\n          return iterateOverTriangles(offset, count, geometry, intersectsTriangle, contained, depth, triangle);\n        }\n\n        return true;\n      };\n    } else if (!intersectsRange) {\n      if (intersectsTriangle) {\n        intersectsRange = (offset, count, contained, depth) => {\n          return iterateOverTriangles(offset, count, geometry, intersectsTriangle, contained, depth, triangle);\n        };\n      } else {\n        intersectsRange = (offset, count, contained) => {\n          return contained;\n        };\n      }\n    }\n\n    let result = false;\n    let byteOffset = 0;\n\n    for (const root of this._roots) {\n      setBuffer(root);\n      result = shapecast(0, geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset);\n      clearBuffer();\n\n      if (result) {\n        break;\n      }\n\n      byteOffset += root.byteLength;\n    }\n\n    trianglePool.releasePrimitive(triangle);\n    return result;\n  }\n\n  bvhcast(otherBvh, matrixToLocal, callbacks) {\n    // BVHCast function for intersecting two BVHs against each other. Ultimately just uses two recursive shapecast calls rather\n    // than an approach that walks down the tree (see bvhcast.js file for more info).\n    let {\n      intersectsRanges,\n      intersectsTriangles\n    } = callbacks;\n    const indexAttr = this.geometry.index;\n    const positionAttr = this.geometry.attributes.position;\n    const otherIndexAttr = otherBvh.geometry.index;\n    const otherPositionAttr = otherBvh.geometry.attributes.position;\n    tempMatrix.copy(matrixToLocal).invert();\n    const triangle = trianglePool.getPrimitive();\n    const triangle2 = trianglePool.getPrimitive();\n\n    if (intersectsTriangles) {\n      function iterateOverDoubleTriangles(offset1, count1, offset2, count2, depth1, index1, depth2, index2) {\n        for (let i2 = offset2, l2 = offset2 + count2; i2 < l2; i2++) {\n          setTriangle(triangle2, i2 * 3, otherIndexAttr, otherPositionAttr);\n          triangle2.a.applyMatrix4(matrixToLocal);\n          triangle2.b.applyMatrix4(matrixToLocal);\n          triangle2.c.applyMatrix4(matrixToLocal);\n          triangle2.needsUpdate = true;\n\n          for (let i1 = offset1, l1 = offset1 + count1; i1 < l1; i1++) {\n            setTriangle(triangle, i1 * 3, indexAttr, positionAttr);\n            triangle.needsUpdate = true;\n\n            if (intersectsTriangles(triangle, triangle2, i1, i2, depth1, index1, depth2, index2)) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n\n      if (intersectsRanges) {\n        const originalIntersectsRanges = intersectsRanges;\n\n        intersectsRanges = function (offset1, count1, offset2, count2, depth1, index1, depth2, index2) {\n          if (!originalIntersectsRanges(offset1, count1, offset2, count2, depth1, index1, depth2, index2)) {\n            return iterateOverDoubleTriangles(offset1, count1, offset2, count2, depth1, index1, depth2, index2);\n          }\n\n          return true;\n        };\n      } else {\n        intersectsRanges = iterateOverDoubleTriangles;\n      }\n    }\n\n    otherBvh.getBoundingBox(aabb2);\n    aabb2.applyMatrix4(matrixToLocal);\n    const result = this.shapecast({\n      intersectsBounds: box => aabb2.intersectsBox(box),\n      intersectsRange: (offset1, count1, contained, depth1, nodeIndex1, box) => {\n        aabb.copy(box);\n        aabb.applyMatrix4(tempMatrix);\n        return otherBvh.shapecast({\n          intersectsBounds: box => aabb.intersectsBox(box),\n          intersectsRange: (offset2, count2, contained, depth2, nodeIndex2) => {\n            return intersectsRanges(offset1, count1, offset2, count2, depth1, nodeIndex1, depth2, nodeIndex2);\n          }\n        });\n      }\n    });\n    trianglePool.releasePrimitive(triangle);\n    trianglePool.releasePrimitive(triangle2);\n    return result;\n  }\n  /* Derived Cast Functions */\n\n\n  intersectsBox(box, boxToMesh) {\n    obb.set(box.min, box.max, boxToMesh);\n    obb.needsUpdate = true;\n    return this.shapecast({\n      intersectsBounds: box => obb.intersectsBox(box),\n      intersectsTriangle: tri => obb.intersectsTriangle(tri)\n    });\n  }\n\n  intersectsSphere(sphere) {\n    return this.shapecast({\n      intersectsBounds: box => sphere.intersectsBox(box),\n      intersectsTriangle: tri => tri.intersectsSphere(sphere)\n    });\n  }\n\n  closestPointToGeometry(otherGeometry, geometryToBvh) {\n    let target1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let target2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let minThreshold = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let maxThreshold = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Infinity;\n\n    if (!otherGeometry.boundingBox) {\n      otherGeometry.computeBoundingBox();\n    }\n\n    obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n    obb.needsUpdate = true;\n    const geometry = this.geometry;\n    const pos = geometry.attributes.position;\n    const index = geometry.index;\n    const otherPos = otherGeometry.attributes.position;\n    const otherIndex = otherGeometry.index;\n    const triangle = trianglePool.getPrimitive();\n    const triangle2 = trianglePool.getPrimitive();\n    let tempTarget1 = temp1;\n    let tempTargetDest1 = temp2;\n    let tempTarget2 = null;\n    let tempTargetDest2 = null;\n\n    if (target2) {\n      tempTarget2 = temp3;\n      tempTargetDest2 = temp4;\n    }\n\n    let closestDistance = Infinity;\n    let closestDistanceTriIndex = null;\n    let closestDistanceOtherTriIndex = null;\n    tempMatrix.copy(geometryToBvh).invert();\n    obb2.matrix.copy(tempMatrix);\n    this.shapecast({\n      boundsTraverseOrder: box => {\n        return obb.distanceToBox(box);\n      },\n      intersectsBounds: (box, isLeaf, score) => {\n        if (score < closestDistance && score < maxThreshold) {\n          // if we know the triangles of this bounds will be intersected next then\n          // save the bounds to use during triangle checks.\n          if (isLeaf) {\n            obb2.min.copy(box.min);\n            obb2.max.copy(box.max);\n            obb2.needsUpdate = true;\n          }\n\n          return true;\n        }\n\n        return false;\n      },\n      intersectsRange: (offset, count) => {\n        if (otherGeometry.boundsTree) {\n          // if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n          // the closest bounds in the other geometry to check.\n          return otherGeometry.boundsTree.shapecast({\n            boundsTraverseOrder: box => {\n              return obb2.distanceToBox(box);\n            },\n            intersectsBounds: (box, isLeaf, score) => {\n              return score < closestDistance && score < maxThreshold;\n            },\n            intersectsRange: (otherOffset, otherCount) => {\n              for (let i2 = otherOffset * 3, l2 = (otherOffset + otherCount) * 3; i2 < l2; i2 += 3) {\n                setTriangle(triangle2, i2, otherIndex, otherPos);\n                triangle2.a.applyMatrix4(geometryToBvh);\n                triangle2.b.applyMatrix4(geometryToBvh);\n                triangle2.c.applyMatrix4(geometryToBvh);\n                triangle2.needsUpdate = true;\n\n                for (let i = offset * 3, l = (offset + count) * 3; i < l; i += 3) {\n                  setTriangle(triangle, i, index, pos);\n                  triangle.needsUpdate = true;\n                  const dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);\n\n                  if (dist < closestDistance) {\n                    tempTargetDest1.copy(tempTarget1);\n\n                    if (tempTargetDest2) {\n                      tempTargetDest2.copy(tempTarget2);\n                    }\n\n                    closestDistance = dist;\n                    closestDistanceTriIndex = i / 3;\n                    closestDistanceOtherTriIndex = i2 / 3;\n                  } // stop traversal if we find a point that's under the given threshold\n\n\n                  if (dist < minThreshold) {\n                    return true;\n                  }\n                }\n              }\n            }\n          });\n        } else {\n          // If no bounds tree then we'll just check every triangle.\n          const triCount = otherIndex ? otherIndex.count : otherPos.count;\n\n          for (let i2 = 0, l2 = triCount; i2 < l2; i2 += 3) {\n            setTriangle(triangle2, i2, otherIndex, otherPos);\n            triangle2.a.applyMatrix4(geometryToBvh);\n            triangle2.b.applyMatrix4(geometryToBvh);\n            triangle2.c.applyMatrix4(geometryToBvh);\n            triangle2.needsUpdate = true;\n\n            for (let i = offset * 3, l = (offset + count) * 3; i < l; i += 3) {\n              setTriangle(triangle, i, index, pos);\n              triangle.needsUpdate = true;\n              const dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);\n\n              if (dist < closestDistance) {\n                tempTargetDest1.copy(tempTarget1);\n\n                if (tempTargetDest2) {\n                  tempTargetDest2.copy(tempTarget2);\n                }\n\n                closestDistance = dist;\n                closestDistanceTriIndex = i / 3;\n                closestDistanceOtherTriIndex = i2 / 3;\n              } // stop traversal if we find a point that's under the given threshold\n\n\n              if (dist < minThreshold) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n    });\n    trianglePool.releasePrimitive(triangle);\n    trianglePool.releasePrimitive(triangle2);\n    if (closestDistance === Infinity) return null;\n    if (!target1.point) target1.point = tempTargetDest1.clone();else target1.point.copy(tempTargetDest1);\n    target1.distance = closestDistance, target1.faceIndex = closestDistanceTriIndex;\n\n    if (target2) {\n      if (!target2.point) target2.point = tempTargetDest2.clone();else target2.point.copy(tempTargetDest2);\n      target2.point.applyMatrix4(tempMatrix);\n      tempTargetDest1.applyMatrix4(tempMatrix);\n      target2.distance = tempTargetDest1.sub(target2.point).length();\n      target2.faceIndex = closestDistanceOtherTriIndex;\n    }\n\n    return target1;\n  }\n\n  closestPointToPoint(point) {\n    let target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let minThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let maxThreshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n    // early out if under minThreshold\n    // skip checking if over maxThreshold\n    // set minThreshold = maxThreshold to quickly check if a point is within a threshold\n    // returns Infinity if no value found\n    const minThresholdSq = minThreshold * minThreshold;\n    const maxThresholdSq = maxThreshold * maxThreshold;\n    let closestDistanceSq = Infinity;\n    let closestDistanceTriIndex = null;\n    this.shapecast({\n      boundsTraverseOrder: box => {\n        temp.copy(point).clamp(box.min, box.max);\n        return temp.distanceToSquared(point);\n      },\n      intersectsBounds: (box, isLeaf, score) => {\n        return score < closestDistanceSq && score < maxThresholdSq;\n      },\n      intersectsTriangle: (tri, triIndex) => {\n        tri.closestPointToPoint(point, temp);\n        const distSq = point.distanceToSquared(temp);\n\n        if (distSq < closestDistanceSq) {\n          temp1.copy(temp);\n          closestDistanceSq = distSq;\n          closestDistanceTriIndex = triIndex;\n        }\n\n        if (distSq < minThresholdSq) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    });\n    if (closestDistanceSq === Infinity) return null;\n    const closestDistance = Math.sqrt(closestDistanceSq);\n    if (!target.point) target.point = temp1.clone();else target.point.copy(temp1);\n    target.distance = closestDistance, target.faceIndex = closestDistanceTriIndex;\n    return target;\n  }\n\n  getBoundingBox(target) {\n    target.makeEmpty();\n    const roots = this._roots;\n    roots.forEach(buffer => {\n      arrayToBox(0, new Float32Array(buffer), tempBox);\n      target.union(tempBox);\n    });\n    return target;\n  }\n\n}","map":{"version":3,"names":["Vector3","BufferAttribute","Box3","FrontSide","Matrix4","CENTER","BYTES_PER_NODE","IS_LEAFNODE_FLAG","buildPackedTree","raycast","raycastFirst","shapecast","intersectsGeometry","setBuffer","clearBuffer","OrientedBox","ExtendedTriangle","PrimitivePool","arrayToBox","iterateOverTriangles","setTriangle","SKIP_GENERATION","Symbol","aabb","aabb2","tempMatrix","obb","obb2","temp","temp1","temp2","temp3","temp4","tempBox","trianglePool","MeshBVH","serialize","bvh","options","isBufferGeometry","console","warn","arguments","cloneBuffers","undefined","geometry","rootData","_roots","indexAttribute","getIndex","result","roots","map","root","slice","index","array","deserialize","data","setIndex","newIndex","set","needsUpdate","constructor","Error","isInterleavedBufferAttribute","Object","assign","strategy","maxDepth","maxLeafTris","verbose","useSharedArrayBuffer","setBoundingBox","onProgress","SharedArrayBuffer","boundingBox","getBoundingBox","refit","nodeIndices","Array","isArray","Set","indexArr","posAttr","attributes","position","buffer","uint32Array","uint16Array","float32Array","byteOffset","i","l","length","Uint32Array","Uint16Array","Float32Array","_traverse","byteLength","node32Index","force","node16Index","isLeaf","offset","count","minx","Infinity","miny","minz","maxx","maxy","maxz","x","getX","y","getY","z","getZ","left","right","offsetLeft","offsetRight","forceChildren","includesLeft","includesRight","has","traverseLeft","traverseRight","leftChange","rightChange","didChange","lefti","righti","minLeftValue","maxLeftValue","minRightValue","maxRightValue","traverse","callback","rootIndex","depth","splitAxis","stopTraversal","ray","materialOrSide","intersects","isMaterial","isArrayMaterial","groups","side","materialSide","materialIndex","startCount","j","jl","face","closestResult","distance","otherGeometry","geomToMesh","callbacks","_intersectsTriangleFunc","_orderNodesFunc","Function","originalTriangleFunc","tri","contained","i3","boundsTraverseOrder","intersectsBounds","intersectsTriangle","intersectsRange","triangle","getPrimitive","originalIntersectsRange","nodeIndex","releasePrimitive","bvhcast","otherBvh","matrixToLocal","intersectsRanges","intersectsTriangles","indexAttr","positionAttr","otherIndexAttr","otherPositionAttr","copy","invert","triangle2","iterateOverDoubleTriangles","offset1","count1","offset2","count2","depth1","index1","depth2","index2","i2","l2","a","applyMatrix4","b","c","i1","l1","originalIntersectsRanges","box","intersectsBox","nodeIndex1","nodeIndex2","boxToMesh","min","max","intersectsSphere","sphere","closestPointToGeometry","geometryToBvh","target1","target2","minThreshold","maxThreshold","computeBoundingBox","pos","otherPos","otherIndex","tempTarget1","tempTargetDest1","tempTarget2","tempTargetDest2","closestDistance","closestDistanceTriIndex","closestDistanceOtherTriIndex","matrix","distanceToBox","score","boundsTree","otherOffset","otherCount","dist","distanceToTriangle","triCount","point","clone","faceIndex","sub","closestPointToPoint","target","minThresholdSq","maxThresholdSq","closestDistanceSq","clamp","distanceToSquared","triIndex","distSq","Math","sqrt","makeEmpty","forEach","union"],"sources":["/home/rodrigorvsn/workspace/study/threejs-journey/07-react-three-fiber/08-mouse-events-with-r3f/node_modules/three-mesh-bvh/src/core/MeshBVH.js"],"sourcesContent":["import { Vector3, BufferAttribute, Box3, FrontSide, Matrix4 } from 'three';\nimport { CENTER, BYTES_PER_NODE, IS_LEAFNODE_FLAG } from './Constants.js';\nimport { buildPackedTree } from './buildFunctions.js';\nimport {\n\traycast,\n\traycastFirst,\n\tshapecast,\n\tintersectsGeometry,\n\tsetBuffer,\n\tclearBuffer,\n} from './castFunctions.js';\nimport { OrientedBox } from '../math/OrientedBox.js';\nimport { ExtendedTriangle } from '../math/ExtendedTriangle.js';\nimport { PrimitivePool } from '../utils/PrimitivePool.js';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { iterateOverTriangles, setTriangle } from '../utils/TriangleUtilities.js';\n\nconst SKIP_GENERATION = Symbol( 'skip tree generation' );\n\nconst aabb = /* @__PURE__ */ new Box3();\nconst aabb2 = /* @__PURE__ */ new Box3();\nconst tempMatrix = /* @__PURE__ */ new Matrix4();\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst obb2 = /* @__PURE__ */ new OrientedBox();\nconst temp = /* @__PURE__ */ new Vector3();\nconst temp1 = /* @__PURE__ */ new Vector3();\nconst temp2 = /* @__PURE__ */ new Vector3();\nconst temp3 = /* @__PURE__ */ new Vector3();\nconst temp4 = /* @__PURE__ */ new Vector3();\nconst tempBox = /* @__PURE__ */ new Box3();\nconst trianglePool = /* @__PURE__ */ new PrimitivePool( () => new ExtendedTriangle() );\n\nexport class MeshBVH {\n\n\tstatic serialize( bvh, options = {} ) {\n\n\t\tif ( options.isBufferGeometry ) {\n\n\t\t\tconsole.warn( 'MeshBVH.serialize: The arguments for the function have changed. See documentation for new signature.' );\n\n\t\t\treturn MeshBVH.serialize(\n\t\t\t\targuments[ 0 ],\n\t\t\t\t{\n\t\t\t\t\tcloneBuffers: arguments[ 2 ] === undefined ? true : arguments[ 2 ],\n\t\t\t\t}\n\t\t\t);\n\n\t\t}\n\n\t\toptions = {\n\t\t\tcloneBuffers: true,\n\t\t\t...options,\n\t\t};\n\n\t\tconst geometry = bvh.geometry;\n\t\tconst rootData = bvh._roots;\n\t\tconst indexAttribute = geometry.getIndex();\n\t\tlet result;\n\t\tif ( options.cloneBuffers ) {\n\n\t\t\tresult = {\n\t\t\t\troots: rootData.map( root => root.slice() ),\n\t\t\t\tindex: indexAttribute.array.slice(),\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tresult = {\n\t\t\t\troots: rootData,\n\t\t\t\tindex: indexAttribute.array,\n\t\t\t};\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tstatic deserialize( data, geometry, options = {} ) {\n\n\t\tif ( typeof options === 'boolean' ) {\n\n\t\t\tconsole.warn( 'MeshBVH.deserialize: The arguments for the function have changed. See documentation for new signature.' );\n\n\t\t\treturn MeshBVH.deserialize(\n\t\t\t\targuments[ 0 ],\n\t\t\t\targuments[ 1 ],\n\t\t\t\t{\n\t\t\t\t\tsetIndex: arguments[ 2 ] === undefined ? true : arguments[ 2 ],\n\t\t\t\t}\n\t\t\t);\n\n\t\t}\n\n\t\toptions = {\n\t\t\tsetIndex: true,\n\t\t\t...options,\n\t\t};\n\n\t\tconst { index, roots } = data;\n\t\tconst bvh = new MeshBVH( geometry, { ...options, [ SKIP_GENERATION ]: true } );\n\t\tbvh._roots = roots;\n\n\t\tif ( options.setIndex ) {\n\n\t\t\tconst indexAttribute = geometry.getIndex();\n\t\t\tif ( indexAttribute === null ) {\n\n\t\t\t\tconst newIndex = new BufferAttribute( data.index, 1, false );\n\t\t\t\tgeometry.setIndex( newIndex );\n\n\t\t\t} else if ( indexAttribute.array !== index ) {\n\n\t\t\t\tindexAttribute.array.set( index );\n\t\t\t\tindexAttribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bvh;\n\n\t}\n\n\tconstructor( geometry, options = {} ) {\n\n\t\tif ( ! geometry.isBufferGeometry ) {\n\n\t\t\tthrow new Error( 'MeshBVH: Only BufferGeometries are supported.' );\n\n\t\t} else if ( geometry.index && geometry.index.isInterleavedBufferAttribute ) {\n\n\t\t\tthrow new Error( 'MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.' );\n\n\t\t}\n\n\t\t// default options\n\t\toptions = Object.assign( {\n\n\t\t\tstrategy: CENTER,\n\t\t\tmaxDepth: 40,\n\t\t\tmaxLeafTris: 10,\n\t\t\tverbose: true,\n\t\t\tuseSharedArrayBuffer: false,\n\t\t\tsetBoundingBox: true,\n\t\t\tonProgress: null,\n\n\t\t\t// undocumented options\n\n\t\t\t// Whether to skip generating the tree. Used for deserialization.\n\t\t\t[ SKIP_GENERATION ]: false,\n\n\t\t}, options );\n\n\t\tif ( options.useSharedArrayBuffer && typeof SharedArrayBuffer === 'undefined' ) {\n\n\t\t\tthrow new Error( 'MeshBVH: SharedArrayBuffer is not available.' );\n\n\t\t}\n\n\t\tthis._roots = null;\n\t\tif ( ! options[ SKIP_GENERATION ] ) {\n\n\t\t\tthis._roots = buildPackedTree( geometry, options );\n\n\t\t\tif ( ! geometry.boundingBox && options.setBoundingBox ) {\n\n\t\t\t\tgeometry.boundingBox = this.getBoundingBox( new Box3() );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// retain references to the geometry so we can use them it without having to\n\t\t// take a geometry reference in every function.\n\t\tthis.geometry = geometry;\n\n\t}\n\n\trefit( nodeIndices = null ) {\n\n\t\tif ( nodeIndices && Array.isArray( nodeIndices ) ) {\n\n\t\t\tnodeIndices = new Set( nodeIndices );\n\n\t\t}\n\n\t\tconst geometry = this.geometry;\n\t\tconst indexArr = geometry.index.array;\n\t\tconst posAttr = geometry.attributes.position;\n\n\t\tlet buffer, uint32Array, uint16Array, float32Array;\n\t\tlet byteOffset = 0;\n\t\tconst roots = this._roots;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tbuffer = roots[ i ];\n\t\t\tuint32Array = new Uint32Array( buffer );\n\t\t\tuint16Array = new Uint16Array( buffer );\n\t\t\tfloat32Array = new Float32Array( buffer );\n\n\t\t\t_traverse( 0, byteOffset );\n\t\t\tbyteOffset += buffer.byteLength;\n\n\t\t}\n\n\t\tfunction _traverse( node32Index, byteOffset, force = false ) {\n\n\t\t\tconst node16Index = node32Index * 2;\n\t\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\t\tif ( isLeaf ) {\n\n\t\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\n\t\t\t\tlet minx = Infinity;\n\t\t\t\tlet miny = Infinity;\n\t\t\t\tlet minz = Infinity;\n\t\t\t\tlet maxx = - Infinity;\n\t\t\t\tlet maxy = - Infinity;\n\t\t\t\tlet maxz = - Infinity;\n\n\t\t\t\tfor ( let i = 3 * offset, l = 3 * ( offset + count ); i < l; i ++ ) {\n\n\t\t\t\t\tconst index = indexArr[ i ];\n\t\t\t\t\tconst x = posAttr.getX( index );\n\t\t\t\t\tconst y = posAttr.getY( index );\n\t\t\t\t\tconst z = posAttr.getZ( index );\n\n\t\t\t\t\tif ( x < minx ) minx = x;\n\t\t\t\t\tif ( x > maxx ) maxx = x;\n\n\t\t\t\t\tif ( y < miny ) miny = y;\n\t\t\t\t\tif ( y > maxy ) maxy = y;\n\n\t\t\t\t\tif ( z < minz ) minz = z;\n\t\t\t\t\tif ( z > maxz ) maxz = z;\n\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tfloat32Array[ node32Index + 0 ] !== minx ||\n\t\t\t\t\tfloat32Array[ node32Index + 1 ] !== miny ||\n\t\t\t\t\tfloat32Array[ node32Index + 2 ] !== minz ||\n\n\t\t\t\t\tfloat32Array[ node32Index + 3 ] !== maxx ||\n\t\t\t\t\tfloat32Array[ node32Index + 4 ] !== maxy ||\n\t\t\t\t\tfloat32Array[ node32Index + 5 ] !== maxz\n\t\t\t\t) {\n\n\t\t\t\t\tfloat32Array[ node32Index + 0 ] = minx;\n\t\t\t\t\tfloat32Array[ node32Index + 1 ] = miny;\n\t\t\t\t\tfloat32Array[ node32Index + 2 ] = minz;\n\n\t\t\t\t\tfloat32Array[ node32Index + 3 ] = maxx;\n\t\t\t\t\tfloat32Array[ node32Index + 4 ] = maxy;\n\t\t\t\t\tfloat32Array[ node32Index + 5 ] = maxz;\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst left = node32Index + 8;\n\t\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\n\t\t\t\t// the identifying node indices provided by the shapecast function include offsets of all\n\t\t\t\t// root buffers to guarantee they're unique between roots so offset left and right indices here.\n\t\t\t\tconst offsetLeft = left + byteOffset;\n\t\t\t\tconst offsetRight = right + byteOffset;\n\t\t\t\tlet forceChildren = force;\n\t\t\t\tlet includesLeft = false;\n\t\t\t\tlet includesRight = false;\n\n\t\t\t\tif ( nodeIndices ) {\n\n\t\t\t\t\t// if we see that neither the left or right child are included in the set that need to be updated\n\t\t\t\t\t// then we assume that all children need to be updated.\n\t\t\t\t\tif ( ! forceChildren ) {\n\n\t\t\t\t\t\tincludesLeft = nodeIndices.has( offsetLeft );\n\t\t\t\t\t\tincludesRight = nodeIndices.has( offsetRight );\n\t\t\t\t\t\tforceChildren = ! includesLeft && ! includesRight;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tincludesLeft = true;\n\t\t\t\t\tincludesRight = true;\n\n\t\t\t\t}\n\n\t\t\t\tconst traverseLeft = forceChildren || includesLeft;\n\t\t\t\tconst traverseRight = forceChildren || includesRight;\n\n\t\t\t\tlet leftChange = false;\n\t\t\t\tif ( traverseLeft ) {\n\n\t\t\t\t\tleftChange = _traverse( left, byteOffset, forceChildren );\n\n\t\t\t\t}\n\n\t\t\t\tlet rightChange = false;\n\t\t\t\tif ( traverseRight ) {\n\n\t\t\t\t\trightChange = _traverse( right, byteOffset, forceChildren );\n\n\t\t\t\t}\n\n\t\t\t\tconst didChange = leftChange || rightChange;\n\t\t\t\tif ( didChange ) {\n\n\t\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\tconst lefti = left + i;\n\t\t\t\t\t\tconst righti = right + i;\n\t\t\t\t\t\tconst minLeftValue = float32Array[ lefti ];\n\t\t\t\t\t\tconst maxLeftValue = float32Array[ lefti + 3 ];\n\t\t\t\t\t\tconst minRightValue = float32Array[ righti ];\n\t\t\t\t\t\tconst maxRightValue = float32Array[ righti + 3 ];\n\n\t\t\t\t\t\tfloat32Array[ node32Index + i ] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n\t\t\t\t\t\tfloat32Array[ node32Index + i + 3 ] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn didChange;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttraverse( callback, rootIndex = 0 ) {\n\n\t\tconst buffer = this._roots[ rootIndex ];\n\t\tconst uint32Array = new Uint32Array( buffer );\n\t\tconst uint16Array = new Uint16Array( buffer );\n\t\t_traverse( 0 );\n\n\t\tfunction _traverse( node32Index, depth = 0 ) {\n\n\t\t\tconst node16Index = node32Index * 2;\n\t\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\t\tif ( isLeaf ) {\n\n\t\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\t\t\t\tcallback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), offset, count );\n\n\t\t\t} else {\n\n\t\t\t\t// TODO: use node functions here\n\t\t\t\tconst left = node32Index + BYTES_PER_NODE / 4;\n\t\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst splitAxis = uint32Array[ node32Index + 7 ];\n\t\t\t\tconst stopTraversal = callback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), splitAxis );\n\n\t\t\t\tif ( ! stopTraversal ) {\n\n\t\t\t\t\t_traverse( left, depth + 1 );\n\t\t\t\t\t_traverse( right, depth + 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/* Core Cast Functions */\n\traycast( ray, materialOrSide = FrontSide ) {\n\n\t\tconst roots = this._roots;\n\t\tconst geometry = this.geometry;\n\t\tconst intersects = [];\n\t\tconst isMaterial = materialOrSide.isMaterial;\n\t\tconst isArrayMaterial = Array.isArray( materialOrSide );\n\n\t\tconst groups = geometry.groups;\n\t\tconst side = isMaterial ? materialOrSide.side : materialOrSide;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tconst materialSide = isArrayMaterial ? materialOrSide[ groups[ i ].materialIndex ].side : side;\n\t\t\tconst startCount = intersects.length;\n\n\t\t\tsetBuffer( roots[ i ] );\n\t\t\traycast( 0, geometry, materialSide, ray, intersects );\n\t\t\tclearBuffer();\n\n\t\t\tif ( isArrayMaterial ) {\n\n\t\t\t\tconst materialIndex = groups[ i ].materialIndex;\n\t\t\t\tfor ( let j = startCount, jl = intersects.length; j < jl; j ++ ) {\n\n\t\t\t\t\tintersects[ j ].face.materialIndex = materialIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn intersects;\n\n\t}\n\n\traycastFirst( ray, materialOrSide = FrontSide ) {\n\n\t\tconst roots = this._roots;\n\t\tconst geometry = this.geometry;\n\t\tconst isMaterial = materialOrSide.isMaterial;\n\t\tconst isArrayMaterial = Array.isArray( materialOrSide );\n\n\t\tlet closestResult = null;\n\n\t\tconst groups = geometry.groups;\n\t\tconst side = isMaterial ? materialOrSide.side : materialOrSide;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tconst materialSide = isArrayMaterial ? materialOrSide[ groups[ i ].materialIndex ].side : side;\n\n\t\t\tsetBuffer( roots[ i ] );\n\t\t\tconst result = raycastFirst( 0, geometry, materialSide, ray );\n\t\t\tclearBuffer();\n\n\t\t\tif ( result != null && ( closestResult == null || result.distance < closestResult.distance ) ) {\n\n\t\t\t\tclosestResult = result;\n\t\t\t\tif ( isArrayMaterial ) {\n\n\t\t\t\t\tresult.face.materialIndex = groups[ i ].materialIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn closestResult;\n\n\t}\n\n\tintersectsGeometry( otherGeometry, geomToMesh ) {\n\n\t\tconst geometry = this.geometry;\n\t\tlet result = false;\n\t\tfor ( const root of this._roots ) {\n\n\t\t\tsetBuffer( root );\n\t\t\tresult = intersectsGeometry( 0, geometry, otherGeometry, geomToMesh );\n\t\t\tclearBuffer();\n\n\t\t\tif ( result ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tshapecast( callbacks, _intersectsTriangleFunc, _orderNodesFunc ) {\n\n\t\tconst geometry = this.geometry;\n\t\tif ( callbacks instanceof Function ) {\n\n\t\t\tif ( _intersectsTriangleFunc ) {\n\n\t\t\t\t// Support the previous function signature that provided three sequential index buffer\n\t\t\t\t// indices here.\n\t\t\t\tconst originalTriangleFunc = _intersectsTriangleFunc;\n\t\t\t\t_intersectsTriangleFunc = ( tri, index, contained, depth ) => {\n\n\t\t\t\t\tconst i3 = index * 3;\n\t\t\t\t\treturn originalTriangleFunc( tri, i3, i3 + 1, i3 + 2, contained, depth );\n\n\t\t\t\t};\n\n\n\t\t\t}\n\n\t\t\tcallbacks = {\n\n\t\t\t\tboundsTraverseOrder: _orderNodesFunc,\n\t\t\t\tintersectsBounds: callbacks,\n\t\t\t\tintersectsTriangle: _intersectsTriangleFunc,\n\t\t\t\tintersectsRange: null,\n\n\t\t\t};\n\n\t\t\tconsole.warn( 'MeshBVH: Shapecast function signature has changed and now takes an object of callbacks as a second argument. See docs for new signature.' );\n\n\t\t}\n\n\t\tconst triangle = trianglePool.getPrimitive();\n\t\tlet {\n\t\t\tboundsTraverseOrder,\n\t\t\tintersectsBounds,\n\t\t\tintersectsRange,\n\t\t\tintersectsTriangle,\n\t\t} = callbacks;\n\n\t\tif ( intersectsRange && intersectsTriangle ) {\n\n\t\t\tconst originalIntersectsRange = intersectsRange;\n\t\t\tintersectsRange = ( offset, count, contained, depth, nodeIndex ) => {\n\n\t\t\t\tif ( ! originalIntersectsRange( offset, count, contained, depth, nodeIndex ) ) {\n\n\t\t\t\t\treturn iterateOverTriangles( offset, count, geometry, intersectsTriangle, contained, depth, triangle );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t};\n\n\t\t} else if ( ! intersectsRange ) {\n\n\t\t\tif ( intersectsTriangle ) {\n\n\t\t\t\tintersectsRange = ( offset, count, contained, depth ) => {\n\n\t\t\t\t\treturn iterateOverTriangles( offset, count, geometry, intersectsTriangle, contained, depth, triangle );\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tintersectsRange = ( offset, count, contained ) => {\n\n\t\t\t\t\treturn contained;\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet result = false;\n\t\tlet byteOffset = 0;\n\t\tfor ( const root of this._roots ) {\n\n\t\t\tsetBuffer( root );\n\t\t\tresult = shapecast( 0, geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset );\n\t\t\tclearBuffer();\n\n\t\t\tif ( result ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tbyteOffset += root.byteLength;\n\n\t\t}\n\n\t\ttrianglePool.releasePrimitive( triangle );\n\n\t\treturn result;\n\n\t}\n\n\tbvhcast( otherBvh, matrixToLocal, callbacks ) {\n\n\t\t// BVHCast function for intersecting two BVHs against each other. Ultimately just uses two recursive shapecast calls rather\n\t\t// than an approach that walks down the tree (see bvhcast.js file for more info).\n\n\t\tlet {\n\t\t\tintersectsRanges,\n\t\t\tintersectsTriangles,\n\t\t} = callbacks;\n\n\t\tconst indexAttr = this.geometry.index;\n\t\tconst positionAttr = this.geometry.attributes.position;\n\n\t\tconst otherIndexAttr = otherBvh.geometry.index;\n\t\tconst otherPositionAttr = otherBvh.geometry.attributes.position;\n\n\t\ttempMatrix.copy( matrixToLocal ).invert();\n\n\t\tconst triangle = trianglePool.getPrimitive();\n\t\tconst triangle2 = trianglePool.getPrimitive();\n\n\t\tif ( intersectsTriangles ) {\n\n\t\t\tfunction iterateOverDoubleTriangles( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) {\n\n\t\t\t\tfor ( let i2 = offset2, l2 = offset2 + count2; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\tsetTriangle( triangle2, i2 * 3, otherIndexAttr, otherPositionAttr );\n\t\t\t\t\ttriangle2.a.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.b.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.c.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\tfor ( let i1 = offset1, l1 = offset1 + count1; i1 < l1; i1 ++ ) {\n\n\t\t\t\t\t\tsetTriangle( triangle, i1 * 3, indexAttr, positionAttr );\n\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\tif ( intersectsTriangles( triangle, triangle2, i1, i2, depth1, index1, depth2, index2 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\tif ( intersectsRanges ) {\n\n\t\t\t\tconst originalIntersectsRanges = intersectsRanges;\n\t\t\t\tintersectsRanges = function ( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) {\n\n\t\t\t\t\tif ( ! originalIntersectsRanges( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) ) {\n\n\t\t\t\t\t\treturn iterateOverDoubleTriangles( offset1, count1, offset2, count2, depth1, index1, depth2, index2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tintersectsRanges = iterateOverDoubleTriangles;\n\n\t\t\t}\n\n\t\t}\n\n\t\totherBvh.getBoundingBox( aabb2 );\n\t\taabb2.applyMatrix4( matrixToLocal );\n\t\tconst result = this.shapecast( {\n\n\t\t\tintersectsBounds: box => aabb2.intersectsBox( box ),\n\n\t\t\tintersectsRange: ( offset1, count1, contained, depth1, nodeIndex1, box ) => {\n\n\t\t\t\taabb.copy( box );\n\t\t\t\taabb.applyMatrix4( tempMatrix );\n\t\t\t\treturn otherBvh.shapecast( {\n\n\t\t\t\t\tintersectsBounds: box => aabb.intersectsBox( box ),\n\n\t\t\t\t\tintersectsRange: ( offset2, count2, contained, depth2, nodeIndex2 ) => {\n\n\t\t\t\t\t\treturn intersectsRanges( offset1, count1, offset2, count2, depth1, nodeIndex1, depth2, nodeIndex2 );\n\n\t\t\t\t\t},\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} );\n\n\t\ttrianglePool.releasePrimitive( triangle );\n\t\ttrianglePool.releasePrimitive( triangle2 );\n\t\treturn result;\n\n\t}\n\n\t/* Derived Cast Functions */\n\tintersectsBox( box, boxToMesh ) {\n\n\t\tobb.set( box.min, box.max, boxToMesh );\n\t\tobb.needsUpdate = true;\n\n\t\treturn this.shapecast(\n\t\t\t{\n\t\t\t\tintersectsBounds: box => obb.intersectsBox( box ),\n\t\t\t\tintersectsTriangle: tri => obb.intersectsTriangle( tri )\n\t\t\t}\n\t\t);\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.shapecast(\n\t\t\t{\n\t\t\t\tintersectsBounds: box => sphere.intersectsBox( box ),\n\t\t\t\tintersectsTriangle: tri => tri.intersectsSphere( sphere )\n\t\t\t}\n\t\t);\n\n\t}\n\n\tclosestPointToGeometry( otherGeometry, geometryToBvh, target1 = { }, target2 = { }, minThreshold = 0, maxThreshold = Infinity ) {\n\n\t\tif ( ! otherGeometry.boundingBox ) {\n\n\t\t\totherGeometry.computeBoundingBox();\n\n\t\t}\n\n\t\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\t\tobb.needsUpdate = true;\n\n\t\tconst geometry = this.geometry;\n\t\tconst pos = geometry.attributes.position;\n\t\tconst index = geometry.index;\n\t\tconst otherPos = otherGeometry.attributes.position;\n\t\tconst otherIndex = otherGeometry.index;\n\t\tconst triangle = trianglePool.getPrimitive();\n\t\tconst triangle2 = trianglePool.getPrimitive();\n\n\t\tlet tempTarget1 = temp1;\n\t\tlet tempTargetDest1 = temp2;\n\t\tlet tempTarget2 = null;\n\t\tlet tempTargetDest2 = null;\n\n\t\tif ( target2 ) {\n\n\t\t\ttempTarget2 = temp3;\n\t\t\ttempTargetDest2 = temp4;\n\n\t\t}\n\n\t\tlet closestDistance = Infinity;\n\t\tlet closestDistanceTriIndex = null;\n\t\tlet closestDistanceOtherTriIndex = null;\n\t\ttempMatrix.copy( geometryToBvh ).invert();\n\t\tobb2.matrix.copy( tempMatrix );\n\t\tthis.shapecast(\n\t\t\t{\n\n\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\treturn obb.distanceToBox( box );\n\n\t\t\t\t},\n\n\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\tif ( score < closestDistance && score < maxThreshold ) {\n\n\t\t\t\t\t\t// if we know the triangles of this bounds will be intersected next then\n\t\t\t\t\t\t// save the bounds to use during triangle checks.\n\t\t\t\t\t\tif ( isLeaf ) {\n\n\t\t\t\t\t\t\tobb2.min.copy( box.min );\n\t\t\t\t\t\t\tobb2.max.copy( box.max );\n\t\t\t\t\t\t\tobb2.needsUpdate = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t},\n\n\t\t\t\tintersectsRange: ( offset, count ) => {\n\n\t\t\t\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t\t\t\t// if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n\t\t\t\t\t\t// the closest bounds in the other geometry to check.\n\t\t\t\t\t\treturn otherGeometry.boundsTree.shapecast( {\n\t\t\t\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\t\t\t\treturn obb2.distanceToBox( box );\n\n\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\t\t\t\treturn score < closestDistance && score < maxThreshold;\n\n\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\tintersectsRange: ( otherOffset, otherCount ) => {\n\n\t\t\t\t\t\t\t\tfor ( let i2 = otherOffset * 3, l2 = ( otherOffset + otherCount ) * 3; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\t\t\t\t\tsetTriangle( triangle2, i2, otherIndex, otherPos );\n\t\t\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\t\t\t\tfor ( let i = offset * 3, l = ( offset + count ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\t\tsetTriangle( triangle, i, index, pos );\n\t\t\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i / 3;\n\t\t\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2 / 3;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// If no bounds tree then we'll just check every triangle.\n\t\t\t\t\t\tconst triCount = otherIndex ? otherIndex.count : otherPos.count;\n\t\t\t\t\t\tfor ( let i2 = 0, l2 = triCount; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\t\t\tsetTriangle( triangle2, i2, otherIndex, otherPos );\n\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\t\tfor ( let i = offset * 3, l = ( offset + count ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\tsetTriangle( triangle, i, index, pos );\n\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i / 3;\n\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2 / 3;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t}\n\n\t\t);\n\n\t\ttrianglePool.releasePrimitive( triangle );\n\t\ttrianglePool.releasePrimitive( triangle2 );\n\n\t\tif ( closestDistance === Infinity ) return null;\n\n\t\tif ( ! target1.point ) target1.point = tempTargetDest1.clone();\n\t\telse target1.point.copy( tempTargetDest1 );\n\t\ttarget1.distance = closestDistance,\n\t\ttarget1.faceIndex = closestDistanceTriIndex;\n\n\t\tif ( target2 ) {\n\n\t\t\tif ( ! target2.point ) target2.point = tempTargetDest2.clone();\n\t\t\telse target2.point.copy( tempTargetDest2 );\n\t\t\ttarget2.point.applyMatrix4( tempMatrix );\n\t\t\ttempTargetDest1.applyMatrix4( tempMatrix );\n\t\t\ttarget2.distance = tempTargetDest1.sub( target2.point ).length();\n\t\t\ttarget2.faceIndex = closestDistanceOtherTriIndex;\n\n\t\t}\n\n\t\treturn target1;\n\n\t}\n\n\tclosestPointToPoint( point, target = { }, minThreshold = 0, maxThreshold = Infinity ) {\n\n\t\t// early out if under minThreshold\n\t\t// skip checking if over maxThreshold\n\t\t// set minThreshold = maxThreshold to quickly check if a point is within a threshold\n\t\t// returns Infinity if no value found\n\t\tconst minThresholdSq = minThreshold * minThreshold;\n\t\tconst maxThresholdSq = maxThreshold * maxThreshold;\n\t\tlet closestDistanceSq = Infinity;\n\t\tlet closestDistanceTriIndex = null;\n\t\tthis.shapecast(\n\n\t\t\t{\n\n\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\ttemp.copy( point ).clamp( box.min, box.max );\n\t\t\t\t\treturn temp.distanceToSquared( point );\n\n\t\t\t\t},\n\n\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\treturn score < closestDistanceSq && score < maxThresholdSq;\n\n\t\t\t\t},\n\n\t\t\t\tintersectsTriangle: ( tri, triIndex ) => {\n\n\t\t\t\t\ttri.closestPointToPoint( point, temp );\n\t\t\t\t\tconst distSq = point.distanceToSquared( temp );\n\t\t\t\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\t\t\t\ttemp1.copy( temp );\n\t\t\t\t\t\tclosestDistanceSq = distSq;\n\t\t\t\t\t\tclosestDistanceTriIndex = triIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( distSq < minThresholdSq ) {\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t}\n\n\t\t);\n\n\t\tif ( closestDistanceSq === Infinity ) return null;\n\n\t\tconst closestDistance = Math.sqrt( closestDistanceSq );\n\n\t\tif ( ! target.point ) target.point = temp1.clone();\n\t\telse target.point.copy( temp1 );\n\t\ttarget.distance = closestDistance,\n\t\ttarget.faceIndex = closestDistanceTriIndex;\n\n\t\treturn target;\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\ttarget.makeEmpty();\n\n\t\tconst roots = this._roots;\n\t\troots.forEach( buffer => {\n\n\t\t\tarrayToBox( 0, new Float32Array( buffer ), tempBox );\n\t\t\ttarget.union( tempBox );\n\n\t\t} );\n\n\t\treturn target;\n\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}