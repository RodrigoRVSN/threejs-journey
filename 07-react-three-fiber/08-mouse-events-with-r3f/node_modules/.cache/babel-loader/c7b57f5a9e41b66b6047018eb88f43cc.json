{"ast":null,"code":"import { DataTexture, FloatType, IntType, UnsignedIntType, ByteType, UnsignedByteType, ShortType, UnsignedShortType, RedFormat, RGFormat, RGBAFormat, RedIntegerFormat, RGIntegerFormat, RGBAIntegerFormat, NearestFilter } from 'three';\n\nfunction countToStringFormat(count) {\n  switch (count) {\n    case 1:\n      return 'R';\n\n    case 2:\n      return 'RG';\n\n    case 3:\n      return 'RGBA';\n\n    case 4:\n      return 'RGBA';\n  }\n\n  throw new Error();\n}\n\nfunction countToFormat(count) {\n  switch (count) {\n    case 1:\n      return RedFormat;\n\n    case 2:\n      return RGFormat;\n\n    case 3:\n      return RGBAFormat;\n\n    case 4:\n      return RGBAFormat;\n  }\n}\n\nfunction countToIntFormat(count) {\n  switch (count) {\n    case 1:\n      return RedIntegerFormat;\n\n    case 2:\n      return RGIntegerFormat;\n\n    case 3:\n      return RGBAIntegerFormat;\n\n    case 4:\n      return RGBAIntegerFormat;\n  }\n}\n\nexport class VertexAttributeTexture extends DataTexture {\n  constructor() {\n    super();\n    this.minFilter = NearestFilter;\n    this.magFilter = NearestFilter;\n    this.generateMipmaps = false;\n    this.overrideItemSize = null;\n    this._forcedType = null;\n  }\n\n  updateFrom(attr) {\n    const overrideItemSize = this.overrideItemSize;\n    const originalItemSize = attr.itemSize;\n    const originalCount = attr.count;\n\n    if (overrideItemSize !== null) {\n      if (originalItemSize * originalCount % overrideItemSize !== 0.0) {\n        throw new Error('VertexAttributeTexture: overrideItemSize must divide evenly into buffer length.');\n      }\n\n      attr.itemSize = overrideItemSize;\n      attr.count = originalCount * originalItemSize / overrideItemSize;\n    }\n\n    const itemSize = attr.itemSize;\n    const count = attr.count;\n    const normalized = attr.normalized;\n    const originalBufferCons = attr.array.constructor;\n    const byteCount = originalBufferCons.BYTES_PER_ELEMENT;\n    let targetType = this._forcedType;\n    let finalStride = itemSize; // derive the type of texture this should be in the shader\n\n    if (targetType === null) {\n      switch (originalBufferCons) {\n        case Float32Array:\n          targetType = FloatType;\n          break;\n\n        case Uint8Array:\n        case Uint16Array:\n        case Uint32Array:\n          targetType = UnsignedIntType;\n          break;\n\n        case Int8Array:\n        case Int16Array:\n        case Int32Array:\n          targetType = IntType;\n          break;\n      }\n    } // get the target format to store the texture as\n\n\n    let type, format, normalizeValue, targetBufferCons;\n    let internalFormat = countToStringFormat(itemSize);\n\n    switch (targetType) {\n      case FloatType:\n        normalizeValue = 1.0;\n        format = countToFormat(itemSize);\n\n        if (normalized && byteCount === 1) {\n          targetBufferCons = originalBufferCons;\n          internalFormat += '8';\n\n          if (originalBufferCons === Uint8Array) {\n            type = UnsignedByteType;\n          } else {\n            type = ByteType;\n            internalFormat += '_SNORM';\n          }\n        } else {\n          targetBufferCons = Float32Array;\n          internalFormat += '32F';\n          type = FloatType;\n        }\n\n        break;\n\n      case IntType:\n        internalFormat += byteCount * 8 + 'I';\n        normalizeValue = normalized ? Math.pow(2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1) : 1.0;\n        format = countToIntFormat(itemSize);\n\n        if (byteCount === 1) {\n          targetBufferCons = Int8Array;\n          type = ByteType;\n        } else if (byteCount === 2) {\n          targetBufferCons = Int16Array;\n          type = ShortType;\n        } else {\n          targetBufferCons = Int32Array;\n          type = IntType;\n        }\n\n        break;\n\n      case UnsignedIntType:\n        internalFormat += byteCount * 8 + 'UI';\n        normalizeValue = normalized ? Math.pow(2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1) : 1.0;\n        format = countToIntFormat(itemSize);\n\n        if (byteCount === 1) {\n          targetBufferCons = Uint8Array;\n          type = UnsignedByteType;\n        } else if (byteCount === 2) {\n          targetBufferCons = Uint16Array;\n          type = UnsignedShortType;\n        } else {\n          targetBufferCons = Uint32Array;\n          type = UnsignedIntType;\n        }\n\n        break;\n    } // there will be a mismatch between format length and final length because\n    // RGBFormat and RGBIntegerFormat was removed\n\n\n    if (finalStride === 3 && (format === RGBAFormat || format === RGBAIntegerFormat)) {\n      finalStride = 4;\n    } // copy the data over to the new texture array\n\n\n    const dimension = Math.ceil(Math.sqrt(count));\n    const length = finalStride * dimension * dimension;\n    const dataArray = new targetBufferCons(length); // temporarily set the normalized state to false since we have custom normalization logic\n\n    const originalNormalized = attr.normalized;\n    attr.normalized = false;\n\n    for (let i = 0; i < count; i++) {\n      const ii = finalStride * i;\n      dataArray[ii] = attr.getX(i) / normalizeValue;\n\n      if (itemSize >= 2) {\n        dataArray[ii + 1] = attr.getY(i) / normalizeValue;\n      }\n\n      if (itemSize >= 3) {\n        dataArray[ii + 2] = attr.getZ(i) / normalizeValue;\n\n        if (finalStride === 4) {\n          dataArray[ii + 3] = 1.0;\n        }\n      }\n\n      if (itemSize >= 4) {\n        dataArray[ii + 3] = attr.getW(i) / normalizeValue;\n      }\n    }\n\n    attr.normalized = originalNormalized;\n    this.internalFormat = internalFormat;\n    this.format = format;\n    this.type = type;\n    this.image.width = dimension;\n    this.image.height = dimension;\n    this.image.data = dataArray;\n    this.needsUpdate = true;\n    this.dispose();\n    attr.itemSize = originalItemSize;\n    attr.count = originalCount;\n  }\n\n}\nexport class UIntVertexAttributeTexture extends VertexAttributeTexture {\n  constructor() {\n    super();\n    this._forcedType = UnsignedIntType;\n  }\n\n}\nexport class IntVertexAttributeTexture extends VertexAttributeTexture {\n  constructor() {\n    super();\n    this._forcedType = IntType;\n  }\n\n}\nexport class FloatVertexAttributeTexture extends VertexAttributeTexture {\n  constructor() {\n    super();\n    this._forcedType = FloatType;\n  }\n\n}","map":{"version":3,"names":["DataTexture","FloatType","IntType","UnsignedIntType","ByteType","UnsignedByteType","ShortType","UnsignedShortType","RedFormat","RGFormat","RGBAFormat","RedIntegerFormat","RGIntegerFormat","RGBAIntegerFormat","NearestFilter","countToStringFormat","count","Error","countToFormat","countToIntFormat","VertexAttributeTexture","constructor","minFilter","magFilter","generateMipmaps","overrideItemSize","_forcedType","updateFrom","attr","originalItemSize","itemSize","originalCount","normalized","originalBufferCons","array","byteCount","BYTES_PER_ELEMENT","targetType","finalStride","Float32Array","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","type","format","normalizeValue","targetBufferCons","internalFormat","Math","pow","dimension","ceil","sqrt","length","dataArray","originalNormalized","i","ii","getX","getY","getZ","getW","image","width","height","data","needsUpdate","dispose","UIntVertexAttributeTexture","IntVertexAttributeTexture","FloatVertexAttributeTexture"],"sources":["/home/rodrigorvsn/workspace/study/threejs-journey/07-react-three-fiber/08-mouse-events-with-r3f/node_modules/three-mesh-bvh/src/gpu/VertexAttributeTexture.js"],"sourcesContent":["import {\n\tDataTexture,\n\tFloatType,\n\tIntType,\n\tUnsignedIntType,\n\tByteType,\n\tUnsignedByteType,\n\tShortType,\n\tUnsignedShortType,\n\n\tRedFormat,\n\tRGFormat,\n\tRGBAFormat,\n\n\tRedIntegerFormat,\n\tRGIntegerFormat,\n\tRGBAIntegerFormat,\n\n\tNearestFilter,\n} from 'three';\n\nfunction countToStringFormat( count ) {\n\n\tswitch ( count ) {\n\n\t\tcase 1: return 'R';\n\t\tcase 2: return 'RG';\n\t\tcase 3: return 'RGBA';\n\t\tcase 4: return 'RGBA';\n\n\t}\n\n\tthrow new Error();\n\n}\n\nfunction countToFormat( count ) {\n\n\tswitch ( count ) {\n\n\t\tcase 1: return RedFormat;\n\t\tcase 2: return RGFormat;\n\t\tcase 3: return RGBAFormat;\n\t\tcase 4: return RGBAFormat;\n\n\t}\n\n}\n\nfunction countToIntFormat( count ) {\n\n\tswitch ( count ) {\n\n\t\tcase 1: return RedIntegerFormat;\n\t\tcase 2: return RGIntegerFormat;\n\t\tcase 3: return RGBAIntegerFormat;\n\t\tcase 4: return RGBAIntegerFormat;\n\n\t}\n\n}\n\nexport class VertexAttributeTexture extends DataTexture {\n\n\tconstructor() {\n\n\t\tsuper();\n\t\tthis.minFilter = NearestFilter;\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.generateMipmaps = false;\n\t\tthis.overrideItemSize = null;\n\t\tthis._forcedType = null;\n\n\t}\n\n\tupdateFrom( attr ) {\n\n\t\tconst overrideItemSize = this.overrideItemSize;\n\t\tconst originalItemSize = attr.itemSize;\n\t\tconst originalCount = attr.count;\n\t\tif ( overrideItemSize !== null ) {\n\n\t\t\tif ( ( originalItemSize * originalCount ) % overrideItemSize !== 0.0 ) {\n\n\t\t\t\tthrow new Error( 'VertexAttributeTexture: overrideItemSize must divide evenly into buffer length.' );\n\n\t\t\t}\n\n\t\t\tattr.itemSize = overrideItemSize;\n\t\t\tattr.count = originalCount * originalItemSize / overrideItemSize;\n\n\t\t}\n\n\t\tconst itemSize = attr.itemSize;\n\t\tconst count = attr.count;\n\t\tconst normalized = attr.normalized;\n\t\tconst originalBufferCons = attr.array.constructor;\n\t\tconst byteCount = originalBufferCons.BYTES_PER_ELEMENT;\n\t\tlet targetType = this._forcedType;\n\t\tlet finalStride = itemSize;\n\n\t\t// derive the type of texture this should be in the shader\n\t\tif ( targetType === null ) {\n\n\t\t\tswitch ( originalBufferCons ) {\n\n\t\t\t\tcase Float32Array:\n\t\t\t\t\ttargetType = FloatType;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Uint8Array:\n\t\t\t\tcase Uint16Array:\n\t\t\t\tcase Uint32Array:\n\t\t\t\t\ttargetType = UnsignedIntType;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Int8Array:\n\t\t\t\tcase Int16Array:\n\t\t\t\tcase Int32Array:\n\t\t\t\t\ttargetType = IntType;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// get the target format to store the texture as\n\t\tlet type, format, normalizeValue, targetBufferCons;\n\t\tlet internalFormat = countToStringFormat( itemSize );\n\t\tswitch ( targetType ) {\n\n\t\t\tcase FloatType:\n\t\t\t\tnormalizeValue = 1.0;\n\t\t\t\tformat = countToFormat( itemSize );\n\n\t\t\t\tif ( normalized && byteCount === 1 ) {\n\n\t\t\t\t\ttargetBufferCons = originalBufferCons;\n\t\t\t\t\tinternalFormat += '8';\n\n\t\t\t\t\tif ( originalBufferCons === Uint8Array ) {\n\n\t\t\t\t\t\ttype = UnsignedByteType;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttype = ByteType;\n\t\t\t\t\t\tinternalFormat += '_SNORM';\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttargetBufferCons = Float32Array;\n\t\t\t\t\tinternalFormat += '32F';\n\t\t\t\t\ttype = FloatType;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase IntType:\n\t\t\t\tinternalFormat += byteCount * 8 + 'I';\n\t\t\t\tnormalizeValue = normalized ? Math.pow( 2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1 ) : 1.0;\n\t\t\t\tformat = countToIntFormat( itemSize );\n\n\t\t\t\tif ( byteCount === 1 ) {\n\n\t\t\t\t\ttargetBufferCons = Int8Array;\n\t\t\t\t\ttype = ByteType;\n\n\t\t\t\t} else if ( byteCount === 2 ) {\n\n\t\t\t\t\ttargetBufferCons = Int16Array;\n\t\t\t\t\ttype = ShortType;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttargetBufferCons = Int32Array;\n\t\t\t\t\ttype = IntType;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase UnsignedIntType:\n\t\t\t\tinternalFormat += byteCount * 8 + 'UI';\n\t\t\t\tnormalizeValue = normalized ? Math.pow( 2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1 ) : 1.0;\n\t\t\t\tformat = countToIntFormat( itemSize );\n\n\t\t\t\tif ( byteCount === 1 ) {\n\n\t\t\t\t\ttargetBufferCons = Uint8Array;\n\t\t\t\t\ttype = UnsignedByteType;\n\n\t\t\t\t} else if ( byteCount === 2 ) {\n\n\t\t\t\t\ttargetBufferCons = Uint16Array;\n\t\t\t\t\ttype = UnsignedShortType;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttargetBufferCons = Uint32Array;\n\t\t\t\t\ttype = UnsignedIntType;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\t// there will be a mismatch between format length and final length because\n\t\t// RGBFormat and RGBIntegerFormat was removed\n\t\tif ( finalStride === 3 && ( format === RGBAFormat || format === RGBAIntegerFormat ) ) {\n\n\t\t\tfinalStride = 4;\n\n\t\t}\n\n\t\t// copy the data over to the new texture array\n\t\tconst dimension = Math.ceil( Math.sqrt( count ) );\n\t\tconst length = finalStride * dimension * dimension;\n\t\tconst dataArray = new targetBufferCons( length );\n\n\t\t// temporarily set the normalized state to false since we have custom normalization logic\n\t\tconst originalNormalized = attr.normalized;\n\t\tattr.normalized = false;\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tconst ii = finalStride * i;\n\t\t\tdataArray[ ii ] = attr.getX( i ) / normalizeValue;\n\n\t\t\tif ( itemSize >= 2 ) {\n\n\t\t\t\tdataArray[ ii + 1 ] = attr.getY( i ) / normalizeValue;\n\n\t\t\t}\n\n\t\t\tif ( itemSize >= 3 ) {\n\n\t\t\t\tdataArray[ ii + 2 ] = attr.getZ( i ) / normalizeValue;\n\n\t\t\t\tif ( finalStride === 4 ) {\n\n\t\t\t\t\tdataArray[ ii + 3 ] = 1.0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( itemSize >= 4 ) {\n\n\t\t\t\tdataArray[ ii + 3 ] = attr.getW( i ) / normalizeValue;\n\n\t\t\t}\n\n\t\t}\n\n\t\tattr.normalized = originalNormalized;\n\n\t\tthis.internalFormat = internalFormat;\n\t\tthis.format = format;\n\t\tthis.type = type;\n\t\tthis.image.width = dimension;\n\t\tthis.image.height = dimension;\n\t\tthis.image.data = dataArray;\n\t\tthis.needsUpdate = true;\n\t\tthis.dispose();\n\n\t\tattr.itemSize = originalItemSize;\n\t\tattr.count = originalCount;\n\n\t}\n\n}\n\nexport class UIntVertexAttributeTexture extends VertexAttributeTexture {\n\n\tconstructor() {\n\n\t\tsuper();\n\t\tthis._forcedType = UnsignedIntType;\n\n\t}\n\n}\n\nexport class IntVertexAttributeTexture extends VertexAttributeTexture {\n\n\tconstructor() {\n\n\t\tsuper();\n\t\tthis._forcedType = IntType;\n\n\t}\n\n\n}\n\nexport class FloatVertexAttributeTexture extends VertexAttributeTexture {\n\n\tconstructor() {\n\n\t\tsuper();\n\t\tthis._forcedType = FloatType;\n\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}