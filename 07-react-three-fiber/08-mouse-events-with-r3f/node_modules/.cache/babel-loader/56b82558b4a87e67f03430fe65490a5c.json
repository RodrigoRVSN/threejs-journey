{"ast":null,"code":"import * as React from 'react';\nimport { useThree, useFrame, createPortal } from '@react-three/fiber';\nimport { Object3D, Matrix4, Quaternion, Vector3, Scene } from 'three';\nimport { OrthographicCamera } from './OrthographicCamera.js';\nimport { useCamera } from './useCamera.js';\nconst Context = /*#__PURE__*/React.createContext({});\n\nconst useGizmoContext = () => {\n  return React.useContext(Context);\n};\n\nconst turnRate = 2 * Math.PI; // turn rate in angles per second\n\nconst dummy = new Object3D();\nconst matrix = new Matrix4();\nconst [q1, q2] = [new Quaternion(), new Quaternion()];\nconst target = new Vector3();\nconst targetPosition = new Vector3();\n\nconst isOrbitControls = controls => {\n  return 'minPolarAngle' in controls;\n};\n\nconst GizmoHelper = _ref => {\n  let {\n    alignment = 'bottom-right',\n    margin = [80, 80],\n    renderPriority = 0,\n    autoClear = true,\n    onUpdate,\n    onTarget,\n    children: GizmoHelperComponent\n  } = _ref;\n  const size = useThree(_ref2 => {\n    let {\n      size\n    } = _ref2;\n    return size;\n  });\n  const mainCamera = useThree(_ref3 => {\n    let {\n      camera\n    } = _ref3;\n    return camera;\n  }); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const defaultControls = useThree(_ref4 => {\n    let {\n      controls\n    } = _ref4;\n    return controls;\n  });\n  const gl = useThree(_ref5 => {\n    let {\n      gl\n    } = _ref5;\n    return gl;\n  });\n  const scene = useThree(_ref6 => {\n    let {\n      scene\n    } = _ref6;\n    return scene;\n  });\n  const invalidate = useThree(_ref7 => {\n    let {\n      invalidate\n    } = _ref7;\n    return invalidate;\n  });\n  const backgroundRef = React.useRef();\n  const gizmoRef = React.useRef();\n  const virtualCam = React.useRef(null);\n  const [virtualScene] = React.useState(() => new Scene());\n  const animating = React.useRef(false);\n  const radius = React.useRef(0);\n  const focusPoint = React.useRef(new Vector3(0, 0, 0));\n  const defaultUp = React.useRef(new Vector3(0, 0, 0));\n  React.useEffect(() => {\n    defaultUp.current.copy(mainCamera.up);\n  }, [mainCamera]);\n  const tweenCamera = React.useCallback(direction => {\n    animating.current = true;\n    if (defaultControls || onTarget) focusPoint.current = (defaultControls == null ? void 0 : defaultControls.target) || (onTarget == null ? void 0 : onTarget());\n    radius.current = mainCamera.position.distanceTo(target); // Rotate from current camera orientation\n\n    q1.copy(mainCamera.quaternion); // To new current camera orientation\n\n    targetPosition.copy(direction).multiplyScalar(radius.current).add(target);\n    dummy.lookAt(targetPosition);\n    q2.copy(dummy.quaternion);\n    invalidate();\n  }, [defaultControls, mainCamera, onTarget, invalidate]);\n  React.useEffect(() => {\n    if (scene.background) {\n      //Interchange the actual scene background with the virtual scene\n      backgroundRef.current = scene.background;\n      scene.background = null;\n      virtualScene.background = backgroundRef.current;\n    }\n\n    return () => {\n      // reset on unmount\n      if (backgroundRef.current) scene.background = backgroundRef.current;\n    };\n  }, []);\n  useFrame((_, delta) => {\n    if (virtualCam.current && gizmoRef.current) {\n      var _gizmoRef$current; // Animate step\n\n\n      if (animating.current) {\n        if (q1.angleTo(q2) < 0.01) {\n          animating.current = false; // Orbit controls uses UP vector as the orbit axes,\n          // so we need to reset it after the animation is done\n          // moving it around for the controls to work correctly\n\n          if (isOrbitControls(defaultControls)) {\n            mainCamera.up.copy(defaultUp.current);\n          }\n        } else {\n          const step = delta * turnRate; // animate position by doing a slerp and then scaling the position on the unit sphere\n\n          q1.rotateTowards(q2, step); // animate orientation\n\n          mainCamera.position.set(0, 0, 1).applyQuaternion(q1).multiplyScalar(radius.current).add(focusPoint.current);\n          mainCamera.up.set(0, 1, 0).applyQuaternion(q1).normalize();\n          mainCamera.quaternion.copy(q1);\n          if (onUpdate) onUpdate();else if (defaultControls) defaultControls.update();\n          invalidate();\n        }\n      } // Sync Gizmo with main camera orientation\n\n\n      matrix.copy(mainCamera.matrix).invert();\n      (_gizmoRef$current = gizmoRef.current) == null ? void 0 : _gizmoRef$current.quaternion.setFromRotationMatrix(matrix); // Render virtual camera\n\n      if (autoClear) gl.autoClear = false;\n      gl.clearDepth();\n      gl.render(virtualScene, virtualCam.current);\n    }\n  }, renderPriority);\n  const raycast = useCamera(virtualCam);\n  const gizmoHelperContext = React.useMemo(() => ({\n    tweenCamera,\n    raycast\n  }), [tweenCamera]); // Position gizmo component within scene\n\n  const [marginX, marginY] = margin;\n  const x = alignment.endsWith('-center') ? 0 : alignment.endsWith('-left') ? -size.width / 2 + marginX : size.width / 2 - marginX;\n  const y = alignment.startsWith('center-') ? 0 : alignment.startsWith('top-') ? size.height / 2 - marginY : -size.height / 2 + marginY;\n  return createPortal( /*#__PURE__*/React.createElement(Context.Provider, {\n    value: gizmoHelperContext\n  }, /*#__PURE__*/React.createElement(OrthographicCamera, {\n    ref: virtualCam,\n    position: [0, 0, 200]\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    ref: gizmoRef,\n    position: [x, y, 0]\n  }, GizmoHelperComponent)), virtualScene);\n};\n\nexport { GizmoHelper, useGizmoContext };","map":{"version":3,"names":["React","useThree","useFrame","createPortal","Object3D","Matrix4","Quaternion","Vector3","Scene","OrthographicCamera","useCamera","Context","createContext","useGizmoContext","useContext","turnRate","Math","PI","dummy","matrix","q1","q2","target","targetPosition","isOrbitControls","controls","GizmoHelper","alignment","margin","renderPriority","autoClear","onUpdate","onTarget","children","GizmoHelperComponent","size","mainCamera","camera","defaultControls","gl","scene","invalidate","backgroundRef","useRef","gizmoRef","virtualCam","virtualScene","useState","animating","radius","focusPoint","defaultUp","useEffect","current","copy","up","tweenCamera","useCallback","direction","position","distanceTo","quaternion","multiplyScalar","add","lookAt","background","_","delta","_gizmoRef$current","angleTo","step","rotateTowards","set","applyQuaternion","normalize","update","invert","setFromRotationMatrix","clearDepth","render","raycast","gizmoHelperContext","useMemo","marginX","marginY","x","endsWith","width","y","startsWith","height","createElement","Provider","value","ref"],"sources":["/home/rodrigorvsn/workspace/study/threejs-journey/07-react-three-fiber/08-mouse-events-with-r3f/node_modules/@react-three/drei/core/GizmoHelper.js"],"sourcesContent":["import * as React from 'react';\nimport { useThree, useFrame, createPortal } from '@react-three/fiber';\nimport { Object3D, Matrix4, Quaternion, Vector3, Scene } from 'three';\nimport { OrthographicCamera } from './OrthographicCamera.js';\nimport { useCamera } from './useCamera.js';\n\nconst Context = /*#__PURE__*/React.createContext({});\nconst useGizmoContext = () => {\n  return React.useContext(Context);\n};\nconst turnRate = 2 * Math.PI; // turn rate in angles per second\n\nconst dummy = new Object3D();\nconst matrix = new Matrix4();\nconst [q1, q2] = [new Quaternion(), new Quaternion()];\nconst target = new Vector3();\nconst targetPosition = new Vector3();\n\nconst isOrbitControls = controls => {\n  return 'minPolarAngle' in controls;\n};\n\nconst GizmoHelper = ({\n  alignment = 'bottom-right',\n  margin = [80, 80],\n  renderPriority = 0,\n  autoClear = true,\n  onUpdate,\n  onTarget,\n  children: GizmoHelperComponent\n}) => {\n  const size = useThree(({\n    size\n  }) => size);\n  const mainCamera = useThree(({\n    camera\n  }) => camera); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const defaultControls = useThree(({\n    controls\n  }) => controls);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const invalidate = useThree(({\n    invalidate\n  }) => invalidate);\n  const backgroundRef = React.useRef();\n  const gizmoRef = React.useRef();\n  const virtualCam = React.useRef(null);\n  const [virtualScene] = React.useState(() => new Scene());\n  const animating = React.useRef(false);\n  const radius = React.useRef(0);\n  const focusPoint = React.useRef(new Vector3(0, 0, 0));\n  const defaultUp = React.useRef(new Vector3(0, 0, 0));\n  React.useEffect(() => {\n    defaultUp.current.copy(mainCamera.up);\n  }, [mainCamera]);\n  const tweenCamera = React.useCallback(direction => {\n    animating.current = true;\n    if (defaultControls || onTarget) focusPoint.current = (defaultControls == null ? void 0 : defaultControls.target) || (onTarget == null ? void 0 : onTarget());\n    radius.current = mainCamera.position.distanceTo(target); // Rotate from current camera orientation\n\n    q1.copy(mainCamera.quaternion); // To new current camera orientation\n\n    targetPosition.copy(direction).multiplyScalar(radius.current).add(target);\n    dummy.lookAt(targetPosition);\n    q2.copy(dummy.quaternion);\n    invalidate();\n  }, [defaultControls, mainCamera, onTarget, invalidate]);\n  React.useEffect(() => {\n    if (scene.background) {\n      //Interchange the actual scene background with the virtual scene\n      backgroundRef.current = scene.background;\n      scene.background = null;\n      virtualScene.background = backgroundRef.current;\n    }\n\n    return () => {\n      // reset on unmount\n      if (backgroundRef.current) scene.background = backgroundRef.current;\n    };\n  }, []);\n  useFrame((_, delta) => {\n    if (virtualCam.current && gizmoRef.current) {\n      var _gizmoRef$current;\n\n      // Animate step\n      if (animating.current) {\n        if (q1.angleTo(q2) < 0.01) {\n          animating.current = false; // Orbit controls uses UP vector as the orbit axes,\n          // so we need to reset it after the animation is done\n          // moving it around for the controls to work correctly\n\n          if (isOrbitControls(defaultControls)) {\n            mainCamera.up.copy(defaultUp.current);\n          }\n        } else {\n          const step = delta * turnRate; // animate position by doing a slerp and then scaling the position on the unit sphere\n\n          q1.rotateTowards(q2, step); // animate orientation\n\n          mainCamera.position.set(0, 0, 1).applyQuaternion(q1).multiplyScalar(radius.current).add(focusPoint.current);\n          mainCamera.up.set(0, 1, 0).applyQuaternion(q1).normalize();\n          mainCamera.quaternion.copy(q1);\n          if (onUpdate) onUpdate();else if (defaultControls) defaultControls.update();\n          invalidate();\n        }\n      } // Sync Gizmo with main camera orientation\n\n\n      matrix.copy(mainCamera.matrix).invert();\n      (_gizmoRef$current = gizmoRef.current) == null ? void 0 : _gizmoRef$current.quaternion.setFromRotationMatrix(matrix); // Render virtual camera\n\n      if (autoClear) gl.autoClear = false;\n      gl.clearDepth();\n      gl.render(virtualScene, virtualCam.current);\n    }\n  }, renderPriority);\n  const raycast = useCamera(virtualCam);\n  const gizmoHelperContext = React.useMemo(() => ({\n    tweenCamera,\n    raycast\n  }), [tweenCamera]); // Position gizmo component within scene\n\n  const [marginX, marginY] = margin;\n  const x = alignment.endsWith('-center') ? 0 : alignment.endsWith('-left') ? -size.width / 2 + marginX : size.width / 2 - marginX;\n  const y = alignment.startsWith('center-') ? 0 : alignment.startsWith('top-') ? size.height / 2 - marginY : -size.height / 2 + marginY;\n  return createPortal( /*#__PURE__*/React.createElement(Context.Provider, {\n    value: gizmoHelperContext\n  }, /*#__PURE__*/React.createElement(OrthographicCamera, {\n    ref: virtualCam,\n    position: [0, 0, 200]\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    ref: gizmoRef,\n    position: [x, y, 0]\n  }, GizmoHelperComponent)), virtualScene);\n};\n\nexport { GizmoHelper, useGizmoContext };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}