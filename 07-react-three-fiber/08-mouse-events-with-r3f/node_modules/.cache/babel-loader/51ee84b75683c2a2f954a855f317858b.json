{"ast":null,"code":"import * as THREE from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  const material = class material extends THREE.ShaderMaterial {\n    constructor() {\n      let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const entries = Object.entries(uniforms); // Create unforms and shaders\n\n      super({\n        uniforms: entries.reduce((acc, _ref) => {\n          let [name, value] = _ref;\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return { ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader,\n        ...parameters\n      }); // Create getter/setters\n\n      this.key = '';\n      entries.forEach(_ref2 => {\n        let [name] = _ref2;\n        return Object.defineProperty(this, name, {\n          get: () => this.uniforms[name].value,\n          set: v => this.uniforms[name].value = v\n        });\n      });\n      if (onInit) onInit(this);\n    }\n\n  };\n  material.key = THREE.MathUtils.generateUUID();\n  return material;\n}\n\nexport { shaderMaterial };","map":{"version":3,"names":["THREE","shaderMaterial","uniforms","vertexShader","fragmentShader","onInit","material","ShaderMaterial","constructor","parameters","entries","Object","reduce","acc","name","value","uniform","UniformsUtils","clone","key","forEach","defineProperty","get","set","v","MathUtils","generateUUID"],"sources":["/home/rodrigorvsn/workspace/study/threejs-journey/07-react-three-fiber/08-mouse-events-with-r3f/node_modules/@react-three/drei/core/shaderMaterial.js"],"sourcesContent":["import * as THREE from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  const material = class material extends THREE.ShaderMaterial {\n    constructor(parameters = {}) {\n      const entries = Object.entries(uniforms); // Create unforms and shaders\n\n      super({\n        uniforms: entries.reduce((acc, [name, value]) => {\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return { ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader,\n        ...parameters\n      }); // Create getter/setters\n\n      this.key = '';\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\n        get: () => this.uniforms[name].value,\n        set: v => this.uniforms[name].value = v\n      }));\n      if (onInit) onInit(this);\n    }\n\n  };\n  material.key = THREE.MathUtils.generateUUID();\n  return material;\n}\n\nexport { shaderMaterial };\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,YAAlC,EAAgDC,cAAhD,EAAgEC,MAAhE,EAAwE;EACtE,MAAMC,QAAQ,GAAG,MAAMA,QAAN,SAAuBN,KAAK,CAACO,cAA7B,CAA4C;IAC3DC,WAAW,GAAkB;MAAA,IAAjBC,UAAiB,uEAAJ,EAAI;MAC3B,MAAMC,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeR,QAAf,CAAhB,CAD2B,CACe;;MAE1C,MAAM;QACJA,QAAQ,EAAEQ,OAAO,CAACE,MAAR,CAAe,CAACC,GAAD,WAAwB;UAAA,IAAlB,CAACC,IAAD,EAAOC,KAAP,CAAkB;UAC/C,MAAMC,OAAO,GAAGhB,KAAK,CAACiB,aAAN,CAAoBC,KAApB,CAA0B;YACxC,CAACJ,IAAD,GAAQ;cACNC;YADM;UADgC,CAA1B,CAAhB;UAKA,OAAO,EAAE,GAAGF,GAAL;YACL,GAAGG;UADE,CAAP;QAGD,CATS,EASP,EATO,CADN;QAWJb,YAXI;QAYJC,cAZI;QAaJ,GAAGK;MAbC,CAAN,EAH2B,CAiBvB;;MAEJ,KAAKU,GAAL,GAAW,EAAX;MACAT,OAAO,CAACU,OAAR,CAAgB;QAAA,IAAC,CAACN,IAAD,CAAD;QAAA,OAAYH,MAAM,CAACU,cAAP,CAAsB,IAAtB,EAA4BP,IAA5B,EAAkC;UAC5DQ,GAAG,EAAE,MAAM,KAAKpB,QAAL,CAAcY,IAAd,EAAoBC,KAD6B;UAE5DQ,GAAG,EAAEC,CAAC,IAAI,KAAKtB,QAAL,CAAcY,IAAd,EAAoBC,KAApB,GAA4BS;QAFsB,CAAlC,CAAZ;MAAA,CAAhB;MAIA,IAAInB,MAAJ,EAAYA,MAAM,CAAC,IAAD,CAAN;IACb;;EA1B0D,CAA7D;EA6BAC,QAAQ,CAACa,GAAT,GAAenB,KAAK,CAACyB,SAAN,CAAgBC,YAAhB,EAAf;EACA,OAAOpB,QAAP;AACD;;AAED,SAASL,cAAT"},"metadata":{},"sourceType":"module"}