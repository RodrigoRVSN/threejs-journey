{"ast":null,"code":"import { BufferAttribute } from 'three';\nimport { MeshBVHNode } from './MeshBVHNode.js';\nimport { getLongestEdgeIndex, computeSurfaceArea, copyBounds, unionBounds, expandByTriangleBounds } from '../utils/ArrayBoxUtilities.js';\nimport { CENTER, AVERAGE, SAH, TRIANGLE_INTERSECT_COST, TRAVERSAL_COST, BYTES_PER_NODE, FLOAT32_EPSILON, IS_LEAFNODE_FLAG } from './Constants.js';\n\nfunction ensureIndex(geo, options) {\n  if (!geo.index) {\n    const vertexCount = geo.attributes.position.count;\n    const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n    let index;\n\n    if (vertexCount > 65535) {\n      index = new Uint32Array(new BufferConstructor(4 * vertexCount));\n    } else {\n      index = new Uint16Array(new BufferConstructor(2 * vertexCount));\n    }\n\n    geo.setIndex(new BufferAttribute(index, 1));\n\n    for (let i = 0; i < vertexCount; i++) {\n      index[i] = i;\n    }\n  }\n} // Computes the set of { offset, count } ranges which need independent BVH roots. Each\n// region in the geometry index that belongs to a different set of material groups requires\n// a separate BVH root, so that triangles indices belonging to one group never get swapped\n// with triangle indices belongs to another group. For example, if the groups were like this:\n//\n// [-------------------------------------------------------------]\n// |__________________|\n//   g0 = [0, 20]  |______________________||_____________________|\n//                      g1 = [16, 40]           g2 = [41, 60]\n//\n// we would need four BVH roots: [0, 15], [16, 20], [21, 40], [41, 60].\n\n\nfunction getRootIndexRanges(geo) {\n  if (!geo.groups || !geo.groups.length) {\n    return [{\n      offset: 0,\n      count: geo.index.count / 3\n    }];\n  }\n\n  const ranges = [];\n  const rangeBoundaries = new Set();\n\n  for (const group of geo.groups) {\n    rangeBoundaries.add(group.start);\n    rangeBoundaries.add(group.start + group.count);\n  } // note that if you don't pass in a comparator, it sorts them lexicographically as strings :-(\n\n\n  const sortedBoundaries = Array.from(rangeBoundaries.values()).sort((a, b) => a - b);\n\n  for (let i = 0; i < sortedBoundaries.length - 1; i++) {\n    const start = sortedBoundaries[i],\n          end = sortedBoundaries[i + 1];\n    ranges.push({\n      offset: start / 3,\n      count: (end - start) / 3\n    });\n  }\n\n  return ranges;\n} // computes the union of the bounds of all of the given triangles and puts the resulting box in target. If\n// centroidTarget is provided then a bounding box is computed for the centroids of the triangles, as well.\n// These are computed together to avoid redundant accesses to bounds array.\n\n\nfunction getBounds(triangleBounds, offset, count, target) {\n  let centroidTarget = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  let minx = Infinity;\n  let miny = Infinity;\n  let minz = Infinity;\n  let maxx = -Infinity;\n  let maxy = -Infinity;\n  let maxz = -Infinity;\n  let cminx = Infinity;\n  let cminy = Infinity;\n  let cminz = Infinity;\n  let cmaxx = -Infinity;\n  let cmaxy = -Infinity;\n  let cmaxz = -Infinity;\n  const includeCentroid = centroidTarget !== null;\n\n  for (let i = offset * 6, end = (offset + count) * 6; i < end; i += 6) {\n    const cx = triangleBounds[i + 0];\n    const hx = triangleBounds[i + 1];\n    const lx = cx - hx;\n    const rx = cx + hx;\n    if (lx < minx) minx = lx;\n    if (rx > maxx) maxx = rx;\n    if (includeCentroid && cx < cminx) cminx = cx;\n    if (includeCentroid && cx > cmaxx) cmaxx = cx;\n    const cy = triangleBounds[i + 2];\n    const hy = triangleBounds[i + 3];\n    const ly = cy - hy;\n    const ry = cy + hy;\n    if (ly < miny) miny = ly;\n    if (ry > maxy) maxy = ry;\n    if (includeCentroid && cy < cminy) cminy = cy;\n    if (includeCentroid && cy > cmaxy) cmaxy = cy;\n    const cz = triangleBounds[i + 4];\n    const hz = triangleBounds[i + 5];\n    const lz = cz - hz;\n    const rz = cz + hz;\n    if (lz < minz) minz = lz;\n    if (rz > maxz) maxz = rz;\n    if (includeCentroid && cz < cminz) cminz = cz;\n    if (includeCentroid && cz > cmaxz) cmaxz = cz;\n  }\n\n  target[0] = minx;\n  target[1] = miny;\n  target[2] = minz;\n  target[3] = maxx;\n  target[4] = maxy;\n  target[5] = maxz;\n\n  if (includeCentroid) {\n    centroidTarget[0] = cminx;\n    centroidTarget[1] = cminy;\n    centroidTarget[2] = cminz;\n    centroidTarget[3] = cmaxx;\n    centroidTarget[4] = cmaxy;\n    centroidTarget[5] = cmaxz;\n  }\n} // A stand alone function for retrieving the centroid bounds.\n\n\nfunction getCentroidBounds(triangleBounds, offset, count, centroidTarget) {\n  let cminx = Infinity;\n  let cminy = Infinity;\n  let cminz = Infinity;\n  let cmaxx = -Infinity;\n  let cmaxy = -Infinity;\n  let cmaxz = -Infinity;\n\n  for (let i = offset * 6, end = (offset + count) * 6; i < end; i += 6) {\n    const cx = triangleBounds[i + 0];\n    if (cx < cminx) cminx = cx;\n    if (cx > cmaxx) cmaxx = cx;\n    const cy = triangleBounds[i + 2];\n    if (cy < cminy) cminy = cy;\n    if (cy > cmaxy) cmaxy = cy;\n    const cz = triangleBounds[i + 4];\n    if (cz < cminz) cminz = cz;\n    if (cz > cmaxz) cmaxz = cz;\n  }\n\n  centroidTarget[0] = cminx;\n  centroidTarget[1] = cminy;\n  centroidTarget[2] = cminz;\n  centroidTarget[3] = cmaxx;\n  centroidTarget[4] = cmaxy;\n  centroidTarget[5] = cmaxz;\n} // reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n// will be on the left and elements on the right side of the split will be on the right. returns the index\n// of the first element on the right side, or offset + count if there are no elements on the right side.\n\n\nfunction partition(index, triangleBounds, offset, count, split) {\n  let left = offset;\n  let right = offset + count - 1;\n  const pos = split.pos;\n  const axisOffset = split.axis * 2; // hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n\n  while (true) {\n    while (left <= right && triangleBounds[left * 6 + axisOffset] < pos) {\n      left++;\n    } // if a triangle center lies on the partition plane it is considered to be on the right side\n\n\n    while (left <= right && triangleBounds[right * 6 + axisOffset] >= pos) {\n      right--;\n    }\n\n    if (left < right) {\n      // we need to swap all of the information associated with the triangles at index\n      // left and right; that's the verts in the geometry index, the bounds,\n      // and perhaps the SAH planes\n      for (let i = 0; i < 3; i++) {\n        let t0 = index[left * 3 + i];\n        index[left * 3 + i] = index[right * 3 + i];\n        index[right * 3 + i] = t0;\n        let t1 = triangleBounds[left * 6 + i * 2 + 0];\n        triangleBounds[left * 6 + i * 2 + 0] = triangleBounds[right * 6 + i * 2 + 0];\n        triangleBounds[right * 6 + i * 2 + 0] = t1;\n        let t2 = triangleBounds[left * 6 + i * 2 + 1];\n        triangleBounds[left * 6 + i * 2 + 1] = triangleBounds[right * 6 + i * 2 + 1];\n        triangleBounds[right * 6 + i * 2 + 1] = t2;\n      }\n\n      left++;\n      right--;\n    } else {\n      return left;\n    }\n  }\n}\n\nconst BIN_COUNT = 32;\n\nconst binsSort = (a, b) => a.candidate - b.candidate;\n\nconst sahBins = new Array(BIN_COUNT).fill().map(() => {\n  return {\n    count: 0,\n    bounds: new Float32Array(6),\n    rightCacheBounds: new Float32Array(6),\n    leftCacheBounds: new Float32Array(6),\n    candidate: 0\n  };\n});\nconst leftBounds = new Float32Array(6);\n\nfunction getOptimalSplit(nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy) {\n  let axis = -1;\n  let pos = 0; // Center\n\n  if (strategy === CENTER) {\n    axis = getLongestEdgeIndex(centroidBoundingData);\n\n    if (axis !== -1) {\n      pos = (centroidBoundingData[axis] + centroidBoundingData[axis + 3]) / 2;\n    }\n  } else if (strategy === AVERAGE) {\n    axis = getLongestEdgeIndex(nodeBoundingData);\n\n    if (axis !== -1) {\n      pos = getAverage(triangleBounds, offset, count, axis);\n    }\n  } else if (strategy === SAH) {\n    const rootSurfaceArea = computeSurfaceArea(nodeBoundingData);\n    let bestCost = TRIANGLE_INTERSECT_COST * count; // iterate over all axes\n\n    const cStart = offset * 6;\n    const cEnd = (offset + count) * 6;\n\n    for (let a = 0; a < 3; a++) {\n      const axisLeft = centroidBoundingData[a];\n      const axisRight = centroidBoundingData[a + 3];\n      const axisLength = axisRight - axisLeft;\n      const binWidth = axisLength / BIN_COUNT; // If we have fewer triangles than we're planning to split then just check all\n      // the triangle positions because it will be faster.\n\n      if (count < BIN_COUNT / 4) {\n        // initialize the bin candidates\n        const truncatedBins = [...sahBins];\n        truncatedBins.length = count; // set the candidates\n\n        let b = 0;\n\n        for (let c = cStart; c < cEnd; c += 6, b++) {\n          const bin = truncatedBins[b];\n          bin.candidate = triangleBounds[c + 2 * a];\n          bin.count = 0;\n          const {\n            bounds,\n            leftCacheBounds,\n            rightCacheBounds\n          } = bin;\n\n          for (let d = 0; d < 3; d++) {\n            rightCacheBounds[d] = Infinity;\n            rightCacheBounds[d + 3] = -Infinity;\n            leftCacheBounds[d] = Infinity;\n            leftCacheBounds[d + 3] = -Infinity;\n            bounds[d] = Infinity;\n            bounds[d + 3] = -Infinity;\n          }\n\n          expandByTriangleBounds(c, triangleBounds, bounds);\n        }\n\n        truncatedBins.sort(binsSort); // remove redundant splits\n\n        let splitCount = count;\n\n        for (let bi = 0; bi < splitCount; bi++) {\n          const bin = truncatedBins[bi];\n\n          while (bi + 1 < splitCount && truncatedBins[bi + 1].candidate === bin.candidate) {\n            truncatedBins.splice(bi + 1, 1);\n            splitCount--;\n          }\n        } // find the appropriate bin for each triangle and expand the bounds.\n\n\n        for (let c = cStart; c < cEnd; c += 6) {\n          const center = triangleBounds[c + 2 * a];\n\n          for (let bi = 0; bi < splitCount; bi++) {\n            const bin = truncatedBins[bi];\n\n            if (center >= bin.candidate) {\n              expandByTriangleBounds(c, triangleBounds, bin.rightCacheBounds);\n            } else {\n              expandByTriangleBounds(c, triangleBounds, bin.leftCacheBounds);\n              bin.count++;\n            }\n          }\n        } // expand all the bounds\n\n\n        for (let bi = 0; bi < splitCount; bi++) {\n          const bin = truncatedBins[bi];\n          const leftCount = bin.count;\n          const rightCount = count - bin.count; // check the cost of this split\n\n          const leftBounds = bin.leftCacheBounds;\n          const rightBounds = bin.rightCacheBounds;\n          let leftProb = 0;\n\n          if (leftCount !== 0) {\n            leftProb = computeSurfaceArea(leftBounds) / rootSurfaceArea;\n          }\n\n          let rightProb = 0;\n\n          if (rightCount !== 0) {\n            rightProb = computeSurfaceArea(rightBounds) / rootSurfaceArea;\n          }\n\n          const cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (leftProb * leftCount + rightProb * rightCount);\n\n          if (cost < bestCost) {\n            axis = a;\n            bestCost = cost;\n            pos = bin.candidate;\n          }\n        }\n      } else {\n        // reset the bins\n        for (let i = 0; i < BIN_COUNT; i++) {\n          const bin = sahBins[i];\n          bin.count = 0;\n          bin.candidate = axisLeft + binWidth + i * binWidth;\n          const bounds = bin.bounds;\n\n          for (let d = 0; d < 3; d++) {\n            bounds[d] = Infinity;\n            bounds[d + 3] = -Infinity;\n          }\n        } // iterate over all center positions\n\n\n        for (let c = cStart; c < cEnd; c += 6) {\n          const triCenter = triangleBounds[c + 2 * a];\n          const relativeCenter = triCenter - axisLeft; // in the partition function if the centroid lies on the split plane then it is\n          // considered to be on the right side of the split\n\n          let binIndex = ~~(relativeCenter / binWidth);\n          if (binIndex >= BIN_COUNT) binIndex = BIN_COUNT - 1;\n          const bin = sahBins[binIndex];\n          bin.count++;\n          expandByTriangleBounds(c, triangleBounds, bin.bounds);\n        } // cache the unioned bounds from right to left so we don't have to regenerate them each time\n\n\n        const lastBin = sahBins[BIN_COUNT - 1];\n        copyBounds(lastBin.bounds, lastBin.rightCacheBounds);\n\n        for (let i = BIN_COUNT - 2; i >= 0; i--) {\n          const bin = sahBins[i];\n          const nextBin = sahBins[i + 1];\n          unionBounds(bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds);\n        }\n\n        let leftCount = 0;\n\n        for (let i = 0; i < BIN_COUNT - 1; i++) {\n          const bin = sahBins[i];\n          const binCount = bin.count;\n          const bounds = bin.bounds;\n          const nextBin = sahBins[i + 1];\n          const rightBounds = nextBin.rightCacheBounds; // dont do anything with the bounds if the new bounds have no triangles\n\n          if (binCount !== 0) {\n            if (leftCount === 0) {\n              copyBounds(bounds, leftBounds);\n            } else {\n              unionBounds(bounds, leftBounds, leftBounds);\n            }\n          }\n\n          leftCount += binCount; // check the cost of this split\n\n          let leftProb = 0;\n          let rightProb = 0;\n\n          if (leftCount !== 0) {\n            leftProb = computeSurfaceArea(leftBounds) / rootSurfaceArea;\n          }\n\n          const rightCount = count - leftCount;\n\n          if (rightCount !== 0) {\n            rightProb = computeSurfaceArea(rightBounds) / rootSurfaceArea;\n          }\n\n          const cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (leftProb * leftCount + rightProb * rightCount);\n\n          if (cost < bestCost) {\n            axis = a;\n            bestCost = cost;\n            pos = bin.candidate;\n          }\n        }\n      }\n    }\n  } else {\n    console.warn(`MeshBVH: Invalid build strategy value ${strategy} used.`);\n  }\n\n  return {\n    axis,\n    pos\n  };\n} // returns the average coordinate on the specified axis of the all the provided triangles\n\n\nfunction getAverage(triangleBounds, offset, count, axis) {\n  let avg = 0;\n\n  for (let i = offset, end = offset + count; i < end; i++) {\n    avg += triangleBounds[i * 6 + axis * 2];\n  }\n\n  return avg / count;\n} // precomputes the bounding box for each triangle; required for quickly calculating tree splits.\n// result is an array of size tris.length * 6 where triangle i maps to a\n// [x_center, x_delta, y_center, y_delta, z_center, z_delta] tuple starting at index i * 6,\n// representing the center and half-extent in each dimension of triangle i\n\n\nfunction computeTriangleBounds(geo, fullBounds) {\n  const posAttr = geo.attributes.position;\n  const index = geo.index.array;\n  const triCount = index.length / 3;\n  const triangleBounds = new Float32Array(triCount * 6);\n  const normalized = posAttr.normalized; // used for non-normalized positions\n\n  const posArr = posAttr.array; // support for an interleaved position buffer\n\n  const bufferOffset = posAttr.offset || 0;\n  let stride = 3;\n\n  if (posAttr.isInterleavedBufferAttribute) {\n    stride = posAttr.data.stride;\n  } // used for normalized positions\n\n\n  const getters = ['getX', 'getY', 'getZ'];\n\n  for (let tri = 0; tri < triCount; tri++) {\n    const tri3 = tri * 3;\n    const tri6 = tri * 6;\n    let ai, bi, ci;\n\n    if (normalized) {\n      ai = index[tri3 + 0];\n      bi = index[tri3 + 1];\n      ci = index[tri3 + 2];\n    } else {\n      ai = index[tri3 + 0] * stride + bufferOffset;\n      bi = index[tri3 + 1] * stride + bufferOffset;\n      ci = index[tri3 + 2] * stride + bufferOffset;\n    }\n\n    for (let el = 0; el < 3; el++) {\n      let a, b, c;\n\n      if (normalized) {\n        a = posAttr[getters[el]](ai);\n        b = posAttr[getters[el]](bi);\n        c = posAttr[getters[el]](ci);\n      } else {\n        a = posArr[ai + el];\n        b = posArr[bi + el];\n        c = posArr[ci + el];\n      }\n\n      let min = a;\n      if (b < min) min = b;\n      if (c < min) min = c;\n      let max = a;\n      if (b > max) max = b;\n      if (c > max) max = c; // Increase the bounds size by float32 epsilon to avoid precision errors when\n      // converting to 32 bit float. Scale the epsilon by the size of the numbers being\n      // worked with.\n\n      const halfExtents = (max - min) / 2;\n      const el2 = el * 2;\n      triangleBounds[tri6 + el2 + 0] = min + halfExtents;\n      triangleBounds[tri6 + el2 + 1] = halfExtents + (Math.abs(min) + halfExtents) * FLOAT32_EPSILON;\n      if (min < fullBounds[el]) fullBounds[el] = min;\n      if (max > fullBounds[el + 3]) fullBounds[el + 3] = max;\n    }\n  }\n\n  return triangleBounds;\n}\n\nexport function buildTree(geo, options) {\n  function triggerProgress(trianglesProcessed) {\n    if (onProgress) {\n      onProgress(trianglesProcessed / totalTriangles);\n    }\n  } // either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\n  // recording the offset and count of its triangles and writing them into the reordered geometry index.\n\n\n  function splitNode(node, offset, count) {\n    let centroidBoundingData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let depth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n    if (!reachedMaxDepth && depth >= maxDepth) {\n      reachedMaxDepth = true;\n\n      if (verbose) {\n        console.warn(`MeshBVH: Max depth of ${maxDepth} reached when generating BVH. Consider increasing maxDepth.`);\n        console.warn(geo);\n      }\n    } // early out if we've met our capacity\n\n\n    if (count <= maxLeafTris || depth >= maxDepth) {\n      triggerProgress(offset + count);\n      node.offset = offset;\n      node.count = count;\n      return node;\n    } // Find where to split the volume\n\n\n    const split = getOptimalSplit(node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy);\n\n    if (split.axis === -1) {\n      triggerProgress(offset + count);\n      node.offset = offset;\n      node.count = count;\n      return node;\n    }\n\n    const splitOffset = partition(indexArray, triangleBounds, offset, count, split); // create the two new child nodes\n\n    if (splitOffset === offset || splitOffset === offset + count) {\n      triggerProgress(offset + count);\n      node.offset = offset;\n      node.count = count;\n    } else {\n      node.splitAxis = split.axis; // create the left child and compute its bounding box\n\n      const left = new MeshBVHNode();\n      const lstart = offset;\n      const lcount = splitOffset - offset;\n      node.left = left;\n      left.boundingData = new Float32Array(6);\n      getBounds(triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData);\n      splitNode(left, lstart, lcount, cacheCentroidBoundingData, depth + 1); // repeat for right\n\n      const right = new MeshBVHNode();\n      const rstart = splitOffset;\n      const rcount = count - lcount;\n      node.right = right;\n      right.boundingData = new Float32Array(6);\n      getBounds(triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData);\n      splitNode(right, rstart, rcount, cacheCentroidBoundingData, depth + 1);\n    }\n\n    return node;\n  }\n\n  ensureIndex(geo, options); // Compute the full bounds of the geometry at the same time as triangle bounds because\n  // we'll need it for the root bounds in the case with no groups and it should be fast here.\n  // We can't use the geometrying bounding box if it's available because it may be out of date.\n\n  const fullBounds = new Float32Array(6);\n  const cacheCentroidBoundingData = new Float32Array(6);\n  const triangleBounds = computeTriangleBounds(geo, fullBounds);\n  const indexArray = geo.index.array;\n  const maxDepth = options.maxDepth;\n  const verbose = options.verbose;\n  const maxLeafTris = options.maxLeafTris;\n  const strategy = options.strategy;\n  const onProgress = options.onProgress;\n  const totalTriangles = geo.index.count / 3;\n  let reachedMaxDepth = false;\n  const roots = [];\n  const ranges = getRootIndexRanges(geo);\n\n  if (ranges.length === 1) {\n    const range = ranges[0];\n    const root = new MeshBVHNode();\n    root.boundingData = fullBounds;\n    getCentroidBounds(triangleBounds, range.offset, range.count, cacheCentroidBoundingData);\n    splitNode(root, range.offset, range.count, cacheCentroidBoundingData);\n    roots.push(root);\n  } else {\n    for (let range of ranges) {\n      const root = new MeshBVHNode();\n      root.boundingData = new Float32Array(6);\n      getBounds(triangleBounds, range.offset, range.count, root.boundingData, cacheCentroidBoundingData);\n      splitNode(root, range.offset, range.count, cacheCentroidBoundingData);\n      roots.push(root);\n    }\n  }\n\n  return roots;\n}\nexport function buildPackedTree(geo, options) {\n  // boundingData  \t\t\t\t: 6 float32\n  // right / offset \t\t\t\t: 1 uint32\n  // splitAxis / isLeaf + count \t: 1 uint32 / 2 uint16\n  const roots = buildTree(geo, options);\n  let float32Array;\n  let uint32Array;\n  let uint16Array;\n  const packedRoots = [];\n  const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n\n  for (let i = 0; i < roots.length; i++) {\n    const root = roots[i];\n    let nodeCount = countNodes(root);\n    const buffer = new BufferConstructor(BYTES_PER_NODE * nodeCount);\n    float32Array = new Float32Array(buffer);\n    uint32Array = new Uint32Array(buffer);\n    uint16Array = new Uint16Array(buffer);\n    populateBuffer(0, root);\n    packedRoots.push(buffer);\n  }\n\n  return packedRoots;\n\n  function countNodes(node) {\n    if (node.count) {\n      return 1;\n    } else {\n      return 1 + countNodes(node.left) + countNodes(node.right);\n    }\n  }\n\n  function populateBuffer(byteOffset, node) {\n    const stride4Offset = byteOffset / 4;\n    const stride2Offset = byteOffset / 2;\n    const isLeaf = !!node.count;\n    const boundingData = node.boundingData;\n\n    for (let i = 0; i < 6; i++) {\n      float32Array[stride4Offset + i] = boundingData[i];\n    }\n\n    if (isLeaf) {\n      const offset = node.offset;\n      const count = node.count;\n      uint32Array[stride4Offset + 6] = offset;\n      uint16Array[stride2Offset + 14] = count;\n      uint16Array[stride2Offset + 15] = IS_LEAFNODE_FLAG;\n      return byteOffset + BYTES_PER_NODE;\n    } else {\n      const left = node.left;\n      const right = node.right;\n      const splitAxis = node.splitAxis;\n      let nextUnusedPointer;\n      nextUnusedPointer = populateBuffer(byteOffset + BYTES_PER_NODE, left);\n\n      if (nextUnusedPointer / 4 > Math.pow(2, 32)) {\n        throw new Error('MeshBVH: Cannot store child pointer greater than 32 bits.');\n      }\n\n      uint32Array[stride4Offset + 6] = nextUnusedPointer / 4;\n      nextUnusedPointer = populateBuffer(nextUnusedPointer, right);\n      uint32Array[stride4Offset + 7] = splitAxis;\n      return nextUnusedPointer;\n    }\n  }\n}","map":{"version":3,"names":["BufferAttribute","MeshBVHNode","getLongestEdgeIndex","computeSurfaceArea","copyBounds","unionBounds","expandByTriangleBounds","CENTER","AVERAGE","SAH","TRIANGLE_INTERSECT_COST","TRAVERSAL_COST","BYTES_PER_NODE","FLOAT32_EPSILON","IS_LEAFNODE_FLAG","ensureIndex","geo","options","index","vertexCount","attributes","position","count","BufferConstructor","useSharedArrayBuffer","SharedArrayBuffer","ArrayBuffer","Uint32Array","Uint16Array","setIndex","i","getRootIndexRanges","groups","length","offset","ranges","rangeBoundaries","Set","group","add","start","sortedBoundaries","Array","from","values","sort","a","b","end","push","getBounds","triangleBounds","target","centroidTarget","minx","Infinity","miny","minz","maxx","maxy","maxz","cminx","cminy","cminz","cmaxx","cmaxy","cmaxz","includeCentroid","cx","hx","lx","rx","cy","hy","ly","ry","cz","hz","lz","rz","getCentroidBounds","partition","split","left","right","pos","axisOffset","axis","t0","t1","t2","BIN_COUNT","binsSort","candidate","sahBins","fill","map","bounds","Float32Array","rightCacheBounds","leftCacheBounds","leftBounds","getOptimalSplit","nodeBoundingData","centroidBoundingData","strategy","getAverage","rootSurfaceArea","bestCost","cStart","cEnd","axisLeft","axisRight","axisLength","binWidth","truncatedBins","c","bin","d","splitCount","bi","splice","center","leftCount","rightCount","rightBounds","leftProb","rightProb","cost","triCenter","relativeCenter","binIndex","lastBin","nextBin","binCount","console","warn","avg","computeTriangleBounds","fullBounds","posAttr","array","triCount","normalized","posArr","bufferOffset","stride","isInterleavedBufferAttribute","data","getters","tri","tri3","tri6","ai","ci","el","min","max","halfExtents","el2","Math","abs","buildTree","triggerProgress","trianglesProcessed","onProgress","totalTriangles","splitNode","node","depth","reachedMaxDepth","maxDepth","verbose","maxLeafTris","boundingData","splitOffset","indexArray","splitAxis","lstart","lcount","cacheCentroidBoundingData","rstart","rcount","roots","range","root","buildPackedTree","float32Array","uint32Array","uint16Array","packedRoots","nodeCount","countNodes","buffer","populateBuffer","byteOffset","stride4Offset","stride2Offset","isLeaf","nextUnusedPointer","pow","Error"],"sources":["/home/rodrigorvsn/workspace/study/threejs-journey/07-react-three-fiber/08-mouse-events-with-r3f/node_modules/three-mesh-bvh/src/core/buildFunctions.js"],"sourcesContent":["import { BufferAttribute } from 'three';\nimport { MeshBVHNode } from './MeshBVHNode.js';\nimport { getLongestEdgeIndex, computeSurfaceArea, copyBounds, unionBounds, expandByTriangleBounds } from '../utils/ArrayBoxUtilities.js';\nimport {\n\tCENTER, AVERAGE, SAH, TRIANGLE_INTERSECT_COST, TRAVERSAL_COST,\n\tBYTES_PER_NODE, FLOAT32_EPSILON, IS_LEAFNODE_FLAG,\n} from './Constants.js';\n\nfunction ensureIndex( geo, options ) {\n\n\tif ( ! geo.index ) {\n\n\t\tconst vertexCount = geo.attributes.position.count;\n\t\tconst BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n\t\tlet index;\n\t\tif ( vertexCount > 65535 ) {\n\n\t\t\tindex = new Uint32Array( new BufferConstructor( 4 * vertexCount ) );\n\n\t\t} else {\n\n\t\t\tindex = new Uint16Array( new BufferConstructor( 2 * vertexCount ) );\n\n\t\t}\n\n\t\tgeo.setIndex( new BufferAttribute( index, 1 ) );\n\n\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tindex[ i ] = i;\n\n\t\t}\n\n\t}\n\n}\n\n// Computes the set of { offset, count } ranges which need independent BVH roots. Each\n// region in the geometry index that belongs to a different set of material groups requires\n// a separate BVH root, so that triangles indices belonging to one group never get swapped\n// with triangle indices belongs to another group. For example, if the groups were like this:\n//\n// [-------------------------------------------------------------]\n// |__________________|\n//   g0 = [0, 20]  |______________________||_____________________|\n//                      g1 = [16, 40]           g2 = [41, 60]\n//\n// we would need four BVH roots: [0, 15], [16, 20], [21, 40], [41, 60].\nfunction getRootIndexRanges( geo ) {\n\n\tif ( ! geo.groups || ! geo.groups.length ) {\n\n\t\treturn [ { offset: 0, count: geo.index.count / 3 } ];\n\n\t}\n\n\tconst ranges = [];\n\tconst rangeBoundaries = new Set();\n\tfor ( const group of geo.groups ) {\n\n\t\trangeBoundaries.add( group.start );\n\t\trangeBoundaries.add( group.start + group.count );\n\n\t}\n\n\t// note that if you don't pass in a comparator, it sorts them lexicographically as strings :-(\n\tconst sortedBoundaries = Array.from( rangeBoundaries.values() ).sort( ( a, b ) => a - b );\n\tfor ( let i = 0; i < sortedBoundaries.length - 1; i ++ ) {\n\n\t\tconst start = sortedBoundaries[ i ], end = sortedBoundaries[ i + 1 ];\n\t\tranges.push( { offset: ( start / 3 ), count: ( end - start ) / 3 } );\n\n\t}\n\n\treturn ranges;\n\n}\n\n// computes the union of the bounds of all of the given triangles and puts the resulting box in target. If\n// centroidTarget is provided then a bounding box is computed for the centroids of the triangles, as well.\n// These are computed together to avoid redundant accesses to bounds array.\nfunction getBounds( triangleBounds, offset, count, target, centroidTarget = null ) {\n\n\tlet minx = Infinity;\n\tlet miny = Infinity;\n\tlet minz = Infinity;\n\tlet maxx = - Infinity;\n\tlet maxy = - Infinity;\n\tlet maxz = - Infinity;\n\n\tlet cminx = Infinity;\n\tlet cminy = Infinity;\n\tlet cminz = Infinity;\n\tlet cmaxx = - Infinity;\n\tlet cmaxy = - Infinity;\n\tlet cmaxz = - Infinity;\n\n\tconst includeCentroid = centroidTarget !== null;\n\tfor ( let i = offset * 6, end = ( offset + count ) * 6; i < end; i += 6 ) {\n\n\t\tconst cx = triangleBounds[ i + 0 ];\n\t\tconst hx = triangleBounds[ i + 1 ];\n\t\tconst lx = cx - hx;\n\t\tconst rx = cx + hx;\n\t\tif ( lx < minx ) minx = lx;\n\t\tif ( rx > maxx ) maxx = rx;\n\t\tif ( includeCentroid && cx < cminx ) cminx = cx;\n\t\tif ( includeCentroid && cx > cmaxx ) cmaxx = cx;\n\n\t\tconst cy = triangleBounds[ i + 2 ];\n\t\tconst hy = triangleBounds[ i + 3 ];\n\t\tconst ly = cy - hy;\n\t\tconst ry = cy + hy;\n\t\tif ( ly < miny ) miny = ly;\n\t\tif ( ry > maxy ) maxy = ry;\n\t\tif ( includeCentroid && cy < cminy ) cminy = cy;\n\t\tif ( includeCentroid && cy > cmaxy ) cmaxy = cy;\n\n\t\tconst cz = triangleBounds[ i + 4 ];\n\t\tconst hz = triangleBounds[ i + 5 ];\n\t\tconst lz = cz - hz;\n\t\tconst rz = cz + hz;\n\t\tif ( lz < minz ) minz = lz;\n\t\tif ( rz > maxz ) maxz = rz;\n\t\tif ( includeCentroid && cz < cminz ) cminz = cz;\n\t\tif ( includeCentroid && cz > cmaxz ) cmaxz = cz;\n\n\t}\n\n\ttarget[ 0 ] = minx;\n\ttarget[ 1 ] = miny;\n\ttarget[ 2 ] = minz;\n\n\ttarget[ 3 ] = maxx;\n\ttarget[ 4 ] = maxy;\n\ttarget[ 5 ] = maxz;\n\n\tif ( includeCentroid ) {\n\n\t\tcentroidTarget[ 0 ] = cminx;\n\t\tcentroidTarget[ 1 ] = cminy;\n\t\tcentroidTarget[ 2 ] = cminz;\n\n\t\tcentroidTarget[ 3 ] = cmaxx;\n\t\tcentroidTarget[ 4 ] = cmaxy;\n\t\tcentroidTarget[ 5 ] = cmaxz;\n\n\t}\n\n}\n\n// A stand alone function for retrieving the centroid bounds.\nfunction getCentroidBounds( triangleBounds, offset, count, centroidTarget ) {\n\n\tlet cminx = Infinity;\n\tlet cminy = Infinity;\n\tlet cminz = Infinity;\n\tlet cmaxx = - Infinity;\n\tlet cmaxy = - Infinity;\n\tlet cmaxz = - Infinity;\n\n\tfor ( let i = offset * 6, end = ( offset + count ) * 6; i < end; i += 6 ) {\n\n\t\tconst cx = triangleBounds[ i + 0 ];\n\t\tif ( cx < cminx ) cminx = cx;\n\t\tif ( cx > cmaxx ) cmaxx = cx;\n\n\t\tconst cy = triangleBounds[ i + 2 ];\n\t\tif ( cy < cminy ) cminy = cy;\n\t\tif ( cy > cmaxy ) cmaxy = cy;\n\n\t\tconst cz = triangleBounds[ i + 4 ];\n\t\tif ( cz < cminz ) cminz = cz;\n\t\tif ( cz > cmaxz ) cmaxz = cz;\n\n\t}\n\n\tcentroidTarget[ 0 ] = cminx;\n\tcentroidTarget[ 1 ] = cminy;\n\tcentroidTarget[ 2 ] = cminz;\n\n\tcentroidTarget[ 3 ] = cmaxx;\n\tcentroidTarget[ 4 ] = cmaxy;\n\tcentroidTarget[ 5 ] = cmaxz;\n\n}\n\n\n// reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n// will be on the left and elements on the right side of the split will be on the right. returns the index\n// of the first element on the right side, or offset + count if there are no elements on the right side.\nfunction partition( index, triangleBounds, offset, count, split ) {\n\n\tlet left = offset;\n\tlet right = offset + count - 1;\n\tconst pos = split.pos;\n\tconst axisOffset = split.axis * 2;\n\n\t// hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n\twhile ( true ) {\n\n\t\twhile ( left <= right && triangleBounds[ left * 6 + axisOffset ] < pos ) {\n\n\t\t\tleft ++;\n\n\t\t}\n\n\n\t\t// if a triangle center lies on the partition plane it is considered to be on the right side\n\t\twhile ( left <= right && triangleBounds[ right * 6 + axisOffset ] >= pos ) {\n\n\t\t\tright --;\n\n\t\t}\n\n\t\tif ( left < right ) {\n\n\t\t\t// we need to swap all of the information associated with the triangles at index\n\t\t\t// left and right; that's the verts in the geometry index, the bounds,\n\t\t\t// and perhaps the SAH planes\n\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tlet t0 = index[ left * 3 + i ];\n\t\t\t\tindex[ left * 3 + i ] = index[ right * 3 + i ];\n\t\t\t\tindex[ right * 3 + i ] = t0;\n\n\t\t\t\tlet t1 = triangleBounds[ left * 6 + i * 2 + 0 ];\n\t\t\t\ttriangleBounds[ left * 6 + i * 2 + 0 ] = triangleBounds[ right * 6 + i * 2 + 0 ];\n\t\t\t\ttriangleBounds[ right * 6 + i * 2 + 0 ] = t1;\n\n\t\t\t\tlet t2 = triangleBounds[ left * 6 + i * 2 + 1 ];\n\t\t\t\ttriangleBounds[ left * 6 + i * 2 + 1 ] = triangleBounds[ right * 6 + i * 2 + 1 ];\n\t\t\t\ttriangleBounds[ right * 6 + i * 2 + 1 ] = t2;\n\n\t\t\t}\n\n\t\t\tleft ++;\n\t\t\tright --;\n\n\t\t} else {\n\n\t\t\treturn left;\n\n\t\t}\n\n\t}\n\n}\n\nconst BIN_COUNT = 32;\nconst binsSort = ( a, b ) => a.candidate - b.candidate;\nconst sahBins = new Array( BIN_COUNT ).fill().map( () => {\n\n\treturn {\n\n\t\tcount: 0,\n\t\tbounds: new Float32Array( 6 ),\n\t\trightCacheBounds: new Float32Array( 6 ),\n\t\tleftCacheBounds: new Float32Array( 6 ),\n\t\tcandidate: 0,\n\n\t};\n\n} );\nconst leftBounds = new Float32Array( 6 );\n\nfunction getOptimalSplit( nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy ) {\n\n\tlet axis = - 1;\n\tlet pos = 0;\n\n\t// Center\n\tif ( strategy === CENTER ) {\n\n\t\taxis = getLongestEdgeIndex( centroidBoundingData );\n\t\tif ( axis !== - 1 ) {\n\n\t\t\tpos = ( centroidBoundingData[ axis ] + centroidBoundingData[ axis + 3 ] ) / 2;\n\n\t\t}\n\n\t} else if ( strategy === AVERAGE ) {\n\n\t\taxis = getLongestEdgeIndex( nodeBoundingData );\n\t\tif ( axis !== - 1 ) {\n\n\t\t\tpos = getAverage( triangleBounds, offset, count, axis );\n\n\t\t}\n\n\t} else if ( strategy === SAH ) {\n\n\t\tconst rootSurfaceArea = computeSurfaceArea( nodeBoundingData );\n\t\tlet bestCost = TRIANGLE_INTERSECT_COST * count;\n\n\t\t// iterate over all axes\n\t\tconst cStart = offset * 6;\n\t\tconst cEnd = ( offset + count ) * 6;\n\t\tfor ( let a = 0; a < 3; a ++ ) {\n\n\t\t\tconst axisLeft = centroidBoundingData[ a ];\n\t\t\tconst axisRight = centroidBoundingData[ a + 3 ];\n\t\t\tconst axisLength = axisRight - axisLeft;\n\t\t\tconst binWidth = axisLength / BIN_COUNT;\n\n\t\t\t// If we have fewer triangles than we're planning to split then just check all\n\t\t\t// the triangle positions because it will be faster.\n\t\t\tif ( count < BIN_COUNT / 4 ) {\n\n\t\t\t\t// initialize the bin candidates\n\t\t\t\tconst truncatedBins = [ ...sahBins ];\n\t\t\t\ttruncatedBins.length = count;\n\n\t\t\t\t// set the candidates\n\t\t\t\tlet b = 0;\n\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6, b ++ ) {\n\n\t\t\t\t\tconst bin = truncatedBins[ b ];\n\t\t\t\t\tbin.candidate = triangleBounds[ c + 2 * a ];\n\t\t\t\t\tbin.count = 0;\n\n\t\t\t\t\tconst {\n\t\t\t\t\t\tbounds,\n\t\t\t\t\t\tleftCacheBounds,\n\t\t\t\t\t\trightCacheBounds,\n\t\t\t\t\t} = bin;\n\t\t\t\t\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\t\t\t\t\trightCacheBounds[ d ] = Infinity;\n\t\t\t\t\t\trightCacheBounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t\tleftCacheBounds[ d ] = Infinity;\n\t\t\t\t\t\tleftCacheBounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t\tbounds[ d ] = Infinity;\n\t\t\t\t\t\tbounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t}\n\n\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bounds );\n\n\t\t\t\t}\n\n\t\t\t\ttruncatedBins.sort( binsSort );\n\n\t\t\t\t// remove redundant splits\n\t\t\t\tlet splitCount = count;\n\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\twhile ( bi + 1 < splitCount && truncatedBins[ bi + 1 ].candidate === bin.candidate ) {\n\n\t\t\t\t\t\ttruncatedBins.splice( bi + 1, 1 );\n\t\t\t\t\t\tsplitCount --;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// find the appropriate bin for each triangle and expand the bounds.\n\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6 ) {\n\n\t\t\t\t\tconst center = triangleBounds[ c + 2 * a ];\n\t\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\t\tif ( center >= bin.candidate ) {\n\n\t\t\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.rightCacheBounds );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.leftCacheBounds );\n\t\t\t\t\t\t\tbin.count ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// expand all the bounds\n\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\tconst leftCount = bin.count;\n\t\t\t\t\tconst rightCount = count - bin.count;\n\n\t\t\t\t\t// check the cost of this split\n\t\t\t\t\tconst leftBounds = bin.leftCacheBounds;\n\t\t\t\t\tconst rightBounds = bin.rightCacheBounds;\n\n\t\t\t\t\tlet leftProb = 0;\n\t\t\t\t\tif ( leftCount !== 0 ) {\n\n\t\t\t\t\t\tleftProb = computeSurfaceArea( leftBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet rightProb = 0;\n\t\t\t\t\tif ( rightCount !== 0 ) {\n\n\t\t\t\t\t\trightProb = computeSurfaceArea( rightBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (\n\t\t\t\t\t\tleftProb * leftCount + rightProb * rightCount\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( cost < bestCost ) {\n\n\t\t\t\t\t\taxis = a;\n\t\t\t\t\t\tbestCost = cost;\n\t\t\t\t\t\tpos = bin.candidate;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// reset the bins\n\t\t\t\tfor ( let i = 0; i < BIN_COUNT; i ++ ) {\n\n\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\tbin.count = 0;\n\t\t\t\t\tbin.candidate = axisLeft + binWidth + i * binWidth;\n\n\t\t\t\t\tconst bounds = bin.bounds;\n\t\t\t\t\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\t\t\t\t\tbounds[ d ] = Infinity;\n\t\t\t\t\t\tbounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// iterate over all center positions\n\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6 ) {\n\n\t\t\t\t\tconst triCenter = triangleBounds[ c + 2 * a ];\n\t\t\t\t\tconst relativeCenter = triCenter - axisLeft;\n\n\t\t\t\t\t// in the partition function if the centroid lies on the split plane then it is\n\t\t\t\t\t// considered to be on the right side of the split\n\t\t\t\t\tlet binIndex = ~ ~ ( relativeCenter / binWidth );\n\t\t\t\t\tif ( binIndex >= BIN_COUNT ) binIndex = BIN_COUNT - 1;\n\n\t\t\t\t\tconst bin = sahBins[ binIndex ];\n\t\t\t\t\tbin.count ++;\n\n\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.bounds );\n\n\t\t\t\t}\n\n\t\t\t\t// cache the unioned bounds from right to left so we don't have to regenerate them each time\n\t\t\t\tconst lastBin = sahBins[ BIN_COUNT - 1 ];\n\t\t\t\tcopyBounds( lastBin.bounds, lastBin.rightCacheBounds );\n\t\t\t\tfor ( let i = BIN_COUNT - 2; i >= 0; i -- ) {\n\n\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\tconst nextBin = sahBins[ i + 1 ];\n\t\t\t\t\tunionBounds( bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds );\n\n\t\t\t\t}\n\n\t\t\t\tlet leftCount = 0;\n\t\t\t\tfor ( let i = 0; i < BIN_COUNT - 1; i ++ ) {\n\n\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\tconst binCount = bin.count;\n\t\t\t\t\tconst bounds = bin.bounds;\n\n\t\t\t\t\tconst nextBin = sahBins[ i + 1 ];\n\t\t\t\t\tconst rightBounds = nextBin.rightCacheBounds;\n\n\t\t\t\t\t// dont do anything with the bounds if the new bounds have no triangles\n\t\t\t\t\tif ( binCount !== 0 ) {\n\n\t\t\t\t\t\tif ( leftCount === 0 ) {\n\n\t\t\t\t\t\t\tcopyBounds( bounds, leftBounds );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tunionBounds( bounds, leftBounds, leftBounds );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tleftCount += binCount;\n\n\t\t\t\t\t// check the cost of this split\n\t\t\t\t\tlet leftProb = 0;\n\t\t\t\t\tlet rightProb = 0;\n\n\t\t\t\t\tif ( leftCount !== 0 ) {\n\n\t\t\t\t\t\tleftProb = computeSurfaceArea( leftBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst rightCount = count - leftCount;\n\t\t\t\t\tif ( rightCount !== 0 ) {\n\n\t\t\t\t\t\trightProb = computeSurfaceArea( rightBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (\n\t\t\t\t\t\tleftProb * leftCount + rightProb * rightCount\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( cost < bestCost ) {\n\n\t\t\t\t\t\taxis = a;\n\t\t\t\t\t\tbestCost = cost;\n\t\t\t\t\t\tpos = bin.candidate;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\tconsole.warn( `MeshBVH: Invalid build strategy value ${ strategy } used.` );\n\n\t}\n\n\treturn { axis, pos };\n\n}\n\n// returns the average coordinate on the specified axis of the all the provided triangles\nfunction getAverage( triangleBounds, offset, count, axis ) {\n\n\tlet avg = 0;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tavg += triangleBounds[ i * 6 + axis * 2 ];\n\n\t}\n\n\treturn avg / count;\n\n}\n\n// precomputes the bounding box for each triangle; required for quickly calculating tree splits.\n// result is an array of size tris.length * 6 where triangle i maps to a\n// [x_center, x_delta, y_center, y_delta, z_center, z_delta] tuple starting at index i * 6,\n// representing the center and half-extent in each dimension of triangle i\nfunction computeTriangleBounds( geo, fullBounds ) {\n\n\tconst posAttr = geo.attributes.position;\n\tconst index = geo.index.array;\n\tconst triCount = index.length / 3;\n\tconst triangleBounds = new Float32Array( triCount * 6 );\n\tconst normalized = posAttr.normalized;\n\n\t// used for non-normalized positions\n\tconst posArr = posAttr.array;\n\n\t// support for an interleaved position buffer\n\tconst bufferOffset = posAttr.offset || 0;\n\tlet stride = 3;\n\tif ( posAttr.isInterleavedBufferAttribute ) {\n\n\t\tstride = posAttr.data.stride;\n\n\t}\n\n\t// used for normalized positions\n\tconst getters = [ 'getX', 'getY', 'getZ' ];\n\n\tfor ( let tri = 0; tri < triCount; tri ++ ) {\n\n\t\tconst tri3 = tri * 3;\n\t\tconst tri6 = tri * 6;\n\n\t\tlet ai, bi, ci;\n\n\t\tif ( normalized ) {\n\n\t\t\tai = index[ tri3 + 0 ];\n\t\t\tbi = index[ tri3 + 1 ];\n\t\t\tci = index[ tri3 + 2 ];\n\n\t\t} else {\n\n\t\t\tai = index[ tri3 + 0 ] * stride + bufferOffset;\n\t\t\tbi = index[ tri3 + 1 ] * stride + bufferOffset;\n\t\t\tci = index[ tri3 + 2 ] * stride + bufferOffset;\n\n\t\t}\n\n\t\tfor ( let el = 0; el < 3; el ++ ) {\n\n\t\t\tlet a, b, c;\n\n\t\t\tif ( normalized ) {\n\n\t\t\t\ta = posAttr[ getters[ el ] ]( ai );\n\t\t\t\tb = posAttr[ getters[ el ] ]( bi );\n\t\t\t\tc = posAttr[ getters[ el ] ]( ci );\n\n\t\t\t} else {\n\n\t\t\t\ta = posArr[ ai + el ];\n\t\t\t\tb = posArr[ bi + el ];\n\t\t\t\tc = posArr[ ci + el ];\n\n\t\t\t}\n\n\t\t\tlet min = a;\n\t\t\tif ( b < min ) min = b;\n\t\t\tif ( c < min ) min = c;\n\n\t\t\tlet max = a;\n\t\t\tif ( b > max ) max = b;\n\t\t\tif ( c > max ) max = c;\n\n\t\t\t// Increase the bounds size by float32 epsilon to avoid precision errors when\n\t\t\t// converting to 32 bit float. Scale the epsilon by the size of the numbers being\n\t\t\t// worked with.\n\t\t\tconst halfExtents = ( max - min ) / 2;\n\t\t\tconst el2 = el * 2;\n\t\t\ttriangleBounds[ tri6 + el2 + 0 ] = min + halfExtents;\n\t\t\ttriangleBounds[ tri6 + el2 + 1 ] = halfExtents + ( Math.abs( min ) + halfExtents ) * FLOAT32_EPSILON;\n\n\t\t\tif ( min < fullBounds[ el ] ) fullBounds[ el ] = min;\n\t\t\tif ( max > fullBounds[ el + 3 ] ) fullBounds[ el + 3 ] = max;\n\n\t\t}\n\n\t}\n\n\treturn triangleBounds;\n\n}\n\nexport function buildTree( geo, options ) {\n\n\tfunction triggerProgress( trianglesProcessed ) {\n\n\t\tif ( onProgress ) {\n\n\t\t\tonProgress( trianglesProcessed / totalTriangles );\n\n\t\t}\n\n\t}\n\n\t// either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\n\t// recording the offset and count of its triangles and writing them into the reordered geometry index.\n\tfunction splitNode( node, offset, count, centroidBoundingData = null, depth = 0 ) {\n\n\t\tif ( ! reachedMaxDepth && depth >= maxDepth ) {\n\n\t\t\treachedMaxDepth = true;\n\t\t\tif ( verbose ) {\n\n\t\t\t\tconsole.warn( `MeshBVH: Max depth of ${ maxDepth } reached when generating BVH. Consider increasing maxDepth.` );\n\t\t\t\tconsole.warn( geo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// early out if we've met our capacity\n\t\tif ( count <= maxLeafTris || depth >= maxDepth ) {\n\n\t\t\ttriggerProgress( offset + count );\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\t\t\treturn node;\n\n\t\t}\n\n\t\t// Find where to split the volume\n\t\tconst split = getOptimalSplit( node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy );\n\t\tif ( split.axis === - 1 ) {\n\n\t\t\ttriggerProgress( offset + count );\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\t\t\treturn node;\n\n\t\t}\n\n\t\tconst splitOffset = partition( indexArray, triangleBounds, offset, count, split );\n\n\t\t// create the two new child nodes\n\t\tif ( splitOffset === offset || splitOffset === offset + count ) {\n\n\t\t\ttriggerProgress( offset + count );\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\n\t\t} else {\n\n\t\t\tnode.splitAxis = split.axis;\n\n\t\t\t// create the left child and compute its bounding box\n\t\t\tconst left = new MeshBVHNode();\n\t\t\tconst lstart = offset;\n\t\t\tconst lcount = splitOffset - offset;\n\t\t\tnode.left = left;\n\t\t\tleft.boundingData = new Float32Array( 6 );\n\n\t\t\tgetBounds( triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData );\n\t\t\tsplitNode( left, lstart, lcount, cacheCentroidBoundingData, depth + 1 );\n\n\t\t\t// repeat for right\n\t\t\tconst right = new MeshBVHNode();\n\t\t\tconst rstart = splitOffset;\n\t\t\tconst rcount = count - lcount;\n\t\t\tnode.right = right;\n\t\t\tright.boundingData = new Float32Array( 6 );\n\n\t\t\tgetBounds( triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData );\n\t\t\tsplitNode( right, rstart, rcount, cacheCentroidBoundingData, depth + 1 );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n\tensureIndex( geo, options );\n\n\t// Compute the full bounds of the geometry at the same time as triangle bounds because\n\t// we'll need it for the root bounds in the case with no groups and it should be fast here.\n\t// We can't use the geometrying bounding box if it's available because it may be out of date.\n\tconst fullBounds = new Float32Array( 6 );\n\tconst cacheCentroidBoundingData = new Float32Array( 6 );\n\tconst triangleBounds = computeTriangleBounds( geo, fullBounds );\n\tconst indexArray = geo.index.array;\n\tconst maxDepth = options.maxDepth;\n\tconst verbose = options.verbose;\n\tconst maxLeafTris = options.maxLeafTris;\n\tconst strategy = options.strategy;\n\tconst onProgress = options.onProgress;\n\tconst totalTriangles = geo.index.count / 3;\n\tlet reachedMaxDepth = false;\n\n\tconst roots = [];\n\tconst ranges = getRootIndexRanges( geo );\n\n\tif ( ranges.length === 1 ) {\n\n\t\tconst range = ranges[ 0 ];\n\t\tconst root = new MeshBVHNode();\n\t\troot.boundingData = fullBounds;\n\t\tgetCentroidBounds( triangleBounds, range.offset, range.count, cacheCentroidBoundingData );\n\n\t\tsplitNode( root, range.offset, range.count, cacheCentroidBoundingData );\n\t\troots.push( root );\n\n\t} else {\n\n\t\tfor ( let range of ranges ) {\n\n\t\t\tconst root = new MeshBVHNode();\n\t\t\troot.boundingData = new Float32Array( 6 );\n\t\t\tgetBounds( triangleBounds, range.offset, range.count, root.boundingData, cacheCentroidBoundingData );\n\n\t\t\tsplitNode( root, range.offset, range.count, cacheCentroidBoundingData );\n\t\t\troots.push( root );\n\n\t\t}\n\n\t}\n\n\treturn roots;\n\n}\n\nexport function buildPackedTree( geo, options ) {\n\n\t// boundingData  \t\t\t\t: 6 float32\n\t// right / offset \t\t\t\t: 1 uint32\n\t// splitAxis / isLeaf + count \t: 1 uint32 / 2 uint16\n\tconst roots = buildTree( geo, options );\n\n\tlet float32Array;\n\tlet uint32Array;\n\tlet uint16Array;\n\tconst packedRoots = [];\n\tconst BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n\tfor ( let i = 0; i < roots.length; i ++ ) {\n\n\t\tconst root = roots[ i ];\n\t\tlet nodeCount = countNodes( root );\n\n\t\tconst buffer = new BufferConstructor( BYTES_PER_NODE * nodeCount );\n\t\tfloat32Array = new Float32Array( buffer );\n\t\tuint32Array = new Uint32Array( buffer );\n\t\tuint16Array = new Uint16Array( buffer );\n\t\tpopulateBuffer( 0, root );\n\t\tpackedRoots.push( buffer );\n\n\t}\n\n\treturn packedRoots;\n\n\tfunction countNodes( node ) {\n\n\t\tif ( node.count ) {\n\n\t\t\treturn 1;\n\n\t\t} else {\n\n\t\t\treturn 1 + countNodes( node.left ) + countNodes( node.right );\n\n\t\t}\n\n\t}\n\n\tfunction populateBuffer( byteOffset, node ) {\n\n\t\tconst stride4Offset = byteOffset / 4;\n\t\tconst stride2Offset = byteOffset / 2;\n\t\tconst isLeaf = ! ! node.count;\n\t\tconst boundingData = node.boundingData;\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tfloat32Array[ stride4Offset + i ] = boundingData[ i ];\n\n\t\t}\n\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = node.offset;\n\t\t\tconst count = node.count;\n\t\t\tuint32Array[ stride4Offset + 6 ] = offset;\n\t\t\tuint16Array[ stride2Offset + 14 ] = count;\n\t\t\tuint16Array[ stride2Offset + 15 ] = IS_LEAFNODE_FLAG;\n\t\t\treturn byteOffset + BYTES_PER_NODE;\n\n\t\t} else {\n\n\t\t\tconst left = node.left;\n\t\t\tconst right = node.right;\n\t\t\tconst splitAxis = node.splitAxis;\n\n\t\t\tlet nextUnusedPointer;\n\t\t\tnextUnusedPointer = populateBuffer( byteOffset + BYTES_PER_NODE, left );\n\n\t\t\tif ( ( nextUnusedPointer / 4 ) > Math.pow( 2, 32 ) ) {\n\n\t\t\t\tthrow new Error( 'MeshBVH: Cannot store child pointer greater than 32 bits.' );\n\n\t\t\t}\n\n\t\t\tuint32Array[ stride4Offset + 6 ] = nextUnusedPointer / 4;\n\t\t\tnextUnusedPointer = populateBuffer( nextUnusedPointer, right );\n\n\t\t\tuint32Array[ stride4Offset + 7 ] = splitAxis;\n\t\t\treturn nextUnusedPointer;\n\n\t\t}\n\n\t}\n\n}\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,mBAAT,EAA8BC,kBAA9B,EAAkDC,UAAlD,EAA8DC,WAA9D,EAA2EC,sBAA3E,QAAyG,+BAAzG;AACA,SACCC,MADD,EACSC,OADT,EACkBC,GADlB,EACuBC,uBADvB,EACgDC,cADhD,EAECC,cAFD,EAEiBC,eAFjB,EAEkCC,gBAFlC,QAGO,gBAHP;;AAKA,SAASC,WAAT,CAAsBC,GAAtB,EAA2BC,OAA3B,EAAqC;EAEpC,IAAK,CAAED,GAAG,CAACE,KAAX,EAAmB;IAElB,MAAMC,WAAW,GAAGH,GAAG,CAACI,UAAJ,CAAeC,QAAf,CAAwBC,KAA5C;IACA,MAAMC,iBAAiB,GAAGN,OAAO,CAACO,oBAAR,GAA+BC,iBAA/B,GAAmDC,WAA7E;IACA,IAAIR,KAAJ;;IACA,IAAKC,WAAW,GAAG,KAAnB,EAA2B;MAE1BD,KAAK,GAAG,IAAIS,WAAJ,CAAiB,IAAIJ,iBAAJ,CAAuB,IAAIJ,WAA3B,CAAjB,CAAR;IAEA,CAJD,MAIO;MAEND,KAAK,GAAG,IAAIU,WAAJ,CAAiB,IAAIL,iBAAJ,CAAuB,IAAIJ,WAA3B,CAAjB,CAAR;IAEA;;IAEDH,GAAG,CAACa,QAAJ,CAAc,IAAI7B,eAAJ,CAAqBkB,KAArB,EAA4B,CAA5B,CAAd;;IAEA,KAAM,IAAIY,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGX,WAArB,EAAkCW,CAAC,EAAnC,EAAyC;MAExCZ,KAAK,CAAEY,CAAF,CAAL,GAAaA,CAAb;IAEA;EAED;AAED,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA6Bf,GAA7B,EAAmC;EAElC,IAAK,CAAEA,GAAG,CAACgB,MAAN,IAAgB,CAAEhB,GAAG,CAACgB,MAAJ,CAAWC,MAAlC,EAA2C;IAE1C,OAAO,CAAE;MAAEC,MAAM,EAAE,CAAV;MAAaZ,KAAK,EAAEN,GAAG,CAACE,KAAJ,CAAUI,KAAV,GAAkB;IAAtC,CAAF,CAAP;EAEA;;EAED,MAAMa,MAAM,GAAG,EAAf;EACA,MAAMC,eAAe,GAAG,IAAIC,GAAJ,EAAxB;;EACA,KAAM,MAAMC,KAAZ,IAAqBtB,GAAG,CAACgB,MAAzB,EAAkC;IAEjCI,eAAe,CAACG,GAAhB,CAAqBD,KAAK,CAACE,KAA3B;IACAJ,eAAe,CAACG,GAAhB,CAAqBD,KAAK,CAACE,KAAN,GAAcF,KAAK,CAAChB,KAAzC;EAEA,CAfiC,CAiBlC;;;EACA,MAAMmB,gBAAgB,GAAGC,KAAK,CAACC,IAAN,CAAYP,eAAe,CAACQ,MAAhB,EAAZ,EAAuCC,IAAvC,CAA6C,CAAEC,CAAF,EAAKC,CAAL,KAAYD,CAAC,GAAGC,CAA7D,CAAzB;;EACA,KAAM,IAAIjB,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGW,gBAAgB,CAACR,MAAjB,GAA0B,CAA/C,EAAkDH,CAAC,EAAnD,EAAyD;IAExD,MAAMU,KAAK,GAAGC,gBAAgB,CAAEX,CAAF,CAA9B;IAAA,MAAqCkB,GAAG,GAAGP,gBAAgB,CAAEX,CAAC,GAAG,CAAN,CAA3D;IACAK,MAAM,CAACc,IAAP,CAAa;MAAEf,MAAM,EAAIM,KAAK,GAAG,CAApB;MAAyBlB,KAAK,EAAE,CAAE0B,GAAG,GAAGR,KAAR,IAAkB;IAAlD,CAAb;EAEA;;EAED,OAAOL,MAAP;AAEA,C,CAED;AACA;AACA;;;AACA,SAASe,SAAT,CAAoBC,cAApB,EAAoCjB,MAApC,EAA4CZ,KAA5C,EAAmD8B,MAAnD,EAAmF;EAAA,IAAxBC,cAAwB,uEAAP,IAAO;EAElF,IAAIC,IAAI,GAAGC,QAAX;EACA,IAAIC,IAAI,GAAGD,QAAX;EACA,IAAIE,IAAI,GAAGF,QAAX;EACA,IAAIG,IAAI,GAAG,CAAEH,QAAb;EACA,IAAII,IAAI,GAAG,CAAEJ,QAAb;EACA,IAAIK,IAAI,GAAG,CAAEL,QAAb;EAEA,IAAIM,KAAK,GAAGN,QAAZ;EACA,IAAIO,KAAK,GAAGP,QAAZ;EACA,IAAIQ,KAAK,GAAGR,QAAZ;EACA,IAAIS,KAAK,GAAG,CAAET,QAAd;EACA,IAAIU,KAAK,GAAG,CAAEV,QAAd;EACA,IAAIW,KAAK,GAAG,CAAEX,QAAd;EAEA,MAAMY,eAAe,GAAGd,cAAc,KAAK,IAA3C;;EACA,KAAM,IAAIvB,CAAC,GAAGI,MAAM,GAAG,CAAjB,EAAoBc,GAAG,GAAG,CAAEd,MAAM,GAAGZ,KAAX,IAAqB,CAArD,EAAwDQ,CAAC,GAAGkB,GAA5D,EAAiElB,CAAC,IAAI,CAAtE,EAA0E;IAEzE,MAAMsC,EAAE,GAAGjB,cAAc,CAAErB,CAAC,GAAG,CAAN,CAAzB;IACA,MAAMuC,EAAE,GAAGlB,cAAc,CAAErB,CAAC,GAAG,CAAN,CAAzB;IACA,MAAMwC,EAAE,GAAGF,EAAE,GAAGC,EAAhB;IACA,MAAME,EAAE,GAAGH,EAAE,GAAGC,EAAhB;IACA,IAAKC,EAAE,GAAGhB,IAAV,EAAiBA,IAAI,GAAGgB,EAAP;IACjB,IAAKC,EAAE,GAAGb,IAAV,EAAiBA,IAAI,GAAGa,EAAP;IACjB,IAAKJ,eAAe,IAAIC,EAAE,GAAGP,KAA7B,EAAqCA,KAAK,GAAGO,EAAR;IACrC,IAAKD,eAAe,IAAIC,EAAE,GAAGJ,KAA7B,EAAqCA,KAAK,GAAGI,EAAR;IAErC,MAAMI,EAAE,GAAGrB,cAAc,CAAErB,CAAC,GAAG,CAAN,CAAzB;IACA,MAAM2C,EAAE,GAAGtB,cAAc,CAAErB,CAAC,GAAG,CAAN,CAAzB;IACA,MAAM4C,EAAE,GAAGF,EAAE,GAAGC,EAAhB;IACA,MAAME,EAAE,GAAGH,EAAE,GAAGC,EAAhB;IACA,IAAKC,EAAE,GAAGlB,IAAV,EAAiBA,IAAI,GAAGkB,EAAP;IACjB,IAAKC,EAAE,GAAGhB,IAAV,EAAiBA,IAAI,GAAGgB,EAAP;IACjB,IAAKR,eAAe,IAAIK,EAAE,GAAGV,KAA7B,EAAqCA,KAAK,GAAGU,EAAR;IACrC,IAAKL,eAAe,IAAIK,EAAE,GAAGP,KAA7B,EAAqCA,KAAK,GAAGO,EAAR;IAErC,MAAMI,EAAE,GAAGzB,cAAc,CAAErB,CAAC,GAAG,CAAN,CAAzB;IACA,MAAM+C,EAAE,GAAG1B,cAAc,CAAErB,CAAC,GAAG,CAAN,CAAzB;IACA,MAAMgD,EAAE,GAAGF,EAAE,GAAGC,EAAhB;IACA,MAAME,EAAE,GAAGH,EAAE,GAAGC,EAAhB;IACA,IAAKC,EAAE,GAAGrB,IAAV,EAAiBA,IAAI,GAAGqB,EAAP;IACjB,IAAKC,EAAE,GAAGnB,IAAV,EAAiBA,IAAI,GAAGmB,EAAP;IACjB,IAAKZ,eAAe,IAAIS,EAAE,GAAGb,KAA7B,EAAqCA,KAAK,GAAGa,EAAR;IACrC,IAAKT,eAAe,IAAIS,EAAE,GAAGV,KAA7B,EAAqCA,KAAK,GAAGU,EAAR;EAErC;;EAEDxB,MAAM,CAAE,CAAF,CAAN,GAAcE,IAAd;EACAF,MAAM,CAAE,CAAF,CAAN,GAAcI,IAAd;EACAJ,MAAM,CAAE,CAAF,CAAN,GAAcK,IAAd;EAEAL,MAAM,CAAE,CAAF,CAAN,GAAcM,IAAd;EACAN,MAAM,CAAE,CAAF,CAAN,GAAcO,IAAd;EACAP,MAAM,CAAE,CAAF,CAAN,GAAcQ,IAAd;;EAEA,IAAKO,eAAL,EAAuB;IAEtBd,cAAc,CAAE,CAAF,CAAd,GAAsBQ,KAAtB;IACAR,cAAc,CAAE,CAAF,CAAd,GAAsBS,KAAtB;IACAT,cAAc,CAAE,CAAF,CAAd,GAAsBU,KAAtB;IAEAV,cAAc,CAAE,CAAF,CAAd,GAAsBW,KAAtB;IACAX,cAAc,CAAE,CAAF,CAAd,GAAsBY,KAAtB;IACAZ,cAAc,CAAE,CAAF,CAAd,GAAsBa,KAAtB;EAEA;AAED,C,CAED;;;AACA,SAASc,iBAAT,CAA4B7B,cAA5B,EAA4CjB,MAA5C,EAAoDZ,KAApD,EAA2D+B,cAA3D,EAA4E;EAE3E,IAAIQ,KAAK,GAAGN,QAAZ;EACA,IAAIO,KAAK,GAAGP,QAAZ;EACA,IAAIQ,KAAK,GAAGR,QAAZ;EACA,IAAIS,KAAK,GAAG,CAAET,QAAd;EACA,IAAIU,KAAK,GAAG,CAAEV,QAAd;EACA,IAAIW,KAAK,GAAG,CAAEX,QAAd;;EAEA,KAAM,IAAIzB,CAAC,GAAGI,MAAM,GAAG,CAAjB,EAAoBc,GAAG,GAAG,CAAEd,MAAM,GAAGZ,KAAX,IAAqB,CAArD,EAAwDQ,CAAC,GAAGkB,GAA5D,EAAiElB,CAAC,IAAI,CAAtE,EAA0E;IAEzE,MAAMsC,EAAE,GAAGjB,cAAc,CAAErB,CAAC,GAAG,CAAN,CAAzB;IACA,IAAKsC,EAAE,GAAGP,KAAV,EAAkBA,KAAK,GAAGO,EAAR;IAClB,IAAKA,EAAE,GAAGJ,KAAV,EAAkBA,KAAK,GAAGI,EAAR;IAElB,MAAMI,EAAE,GAAGrB,cAAc,CAAErB,CAAC,GAAG,CAAN,CAAzB;IACA,IAAK0C,EAAE,GAAGV,KAAV,EAAkBA,KAAK,GAAGU,EAAR;IAClB,IAAKA,EAAE,GAAGP,KAAV,EAAkBA,KAAK,GAAGO,EAAR;IAElB,MAAMI,EAAE,GAAGzB,cAAc,CAAErB,CAAC,GAAG,CAAN,CAAzB;IACA,IAAK8C,EAAE,GAAGb,KAAV,EAAkBA,KAAK,GAAGa,EAAR;IAClB,IAAKA,EAAE,GAAGV,KAAV,EAAkBA,KAAK,GAAGU,EAAR;EAElB;;EAEDvB,cAAc,CAAE,CAAF,CAAd,GAAsBQ,KAAtB;EACAR,cAAc,CAAE,CAAF,CAAd,GAAsBS,KAAtB;EACAT,cAAc,CAAE,CAAF,CAAd,GAAsBU,KAAtB;EAEAV,cAAc,CAAE,CAAF,CAAd,GAAsBW,KAAtB;EACAX,cAAc,CAAE,CAAF,CAAd,GAAsBY,KAAtB;EACAZ,cAAc,CAAE,CAAF,CAAd,GAAsBa,KAAtB;AAEA,C,CAGD;AACA;AACA;;;AACA,SAASe,SAAT,CAAoB/D,KAApB,EAA2BiC,cAA3B,EAA2CjB,MAA3C,EAAmDZ,KAAnD,EAA0D4D,KAA1D,EAAkE;EAEjE,IAAIC,IAAI,GAAGjD,MAAX;EACA,IAAIkD,KAAK,GAAGlD,MAAM,GAAGZ,KAAT,GAAiB,CAA7B;EACA,MAAM+D,GAAG,GAAGH,KAAK,CAACG,GAAlB;EACA,MAAMC,UAAU,GAAGJ,KAAK,CAACK,IAAN,GAAa,CAAhC,CALiE,CAOjE;;EACA,OAAQ,IAAR,EAAe;IAEd,OAAQJ,IAAI,IAAIC,KAAR,IAAiBjC,cAAc,CAAEgC,IAAI,GAAG,CAAP,GAAWG,UAAb,CAAd,GAA0CD,GAAnE,EAAyE;MAExEF,IAAI;IAEJ,CANa,CASd;;;IACA,OAAQA,IAAI,IAAIC,KAAR,IAAiBjC,cAAc,CAAEiC,KAAK,GAAG,CAAR,GAAYE,UAAd,CAAd,IAA4CD,GAArE,EAA2E;MAE1ED,KAAK;IAEL;;IAED,IAAKD,IAAI,GAAGC,KAAZ,EAAoB;MAEnB;MACA;MACA;MAEA,KAAM,IAAItD,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA+B;QAE9B,IAAI0D,EAAE,GAAGtE,KAAK,CAAEiE,IAAI,GAAG,CAAP,GAAWrD,CAAb,CAAd;QACAZ,KAAK,CAAEiE,IAAI,GAAG,CAAP,GAAWrD,CAAb,CAAL,GAAwBZ,KAAK,CAAEkE,KAAK,GAAG,CAAR,GAAYtD,CAAd,CAA7B;QACAZ,KAAK,CAAEkE,KAAK,GAAG,CAAR,GAAYtD,CAAd,CAAL,GAAyB0D,EAAzB;QAEA,IAAIC,EAAE,GAAGtC,cAAc,CAAEgC,IAAI,GAAG,CAAP,GAAWrD,CAAC,GAAG,CAAf,GAAmB,CAArB,CAAvB;QACAqB,cAAc,CAAEgC,IAAI,GAAG,CAAP,GAAWrD,CAAC,GAAG,CAAf,GAAmB,CAArB,CAAd,GAAyCqB,cAAc,CAAEiC,KAAK,GAAG,CAAR,GAAYtD,CAAC,GAAG,CAAhB,GAAoB,CAAtB,CAAvD;QACAqB,cAAc,CAAEiC,KAAK,GAAG,CAAR,GAAYtD,CAAC,GAAG,CAAhB,GAAoB,CAAtB,CAAd,GAA0C2D,EAA1C;QAEA,IAAIC,EAAE,GAAGvC,cAAc,CAAEgC,IAAI,GAAG,CAAP,GAAWrD,CAAC,GAAG,CAAf,GAAmB,CAArB,CAAvB;QACAqB,cAAc,CAAEgC,IAAI,GAAG,CAAP,GAAWrD,CAAC,GAAG,CAAf,GAAmB,CAArB,CAAd,GAAyCqB,cAAc,CAAEiC,KAAK,GAAG,CAAR,GAAYtD,CAAC,GAAG,CAAhB,GAAoB,CAAtB,CAAvD;QACAqB,cAAc,CAAEiC,KAAK,GAAG,CAAR,GAAYtD,CAAC,GAAG,CAAhB,GAAoB,CAAtB,CAAd,GAA0C4D,EAA1C;MAEA;;MAEDP,IAAI;MACJC,KAAK;IAEL,CAzBD,MAyBO;MAEN,OAAOD,IAAP;IAEA;EAED;AAED;;AAED,MAAMQ,SAAS,GAAG,EAAlB;;AACA,MAAMC,QAAQ,GAAG,CAAE9C,CAAF,EAAKC,CAAL,KAAYD,CAAC,CAAC+C,SAAF,GAAc9C,CAAC,CAAC8C,SAA7C;;AACA,MAAMC,OAAO,GAAG,IAAIpD,KAAJ,CAAWiD,SAAX,EAAuBI,IAAvB,GAA8BC,GAA9B,CAAmC,MAAM;EAExD,OAAO;IAEN1E,KAAK,EAAE,CAFD;IAGN2E,MAAM,EAAE,IAAIC,YAAJ,CAAkB,CAAlB,CAHF;IAINC,gBAAgB,EAAE,IAAID,YAAJ,CAAkB,CAAlB,CAJZ;IAKNE,eAAe,EAAE,IAAIF,YAAJ,CAAkB,CAAlB,CALX;IAMNL,SAAS,EAAE;EANL,CAAP;AAUA,CAZe,CAAhB;AAaA,MAAMQ,UAAU,GAAG,IAAIH,YAAJ,CAAkB,CAAlB,CAAnB;;AAEA,SAASI,eAAT,CAA0BC,gBAA1B,EAA4CC,oBAA5C,EAAkErD,cAAlE,EAAkFjB,MAAlF,EAA0FZ,KAA1F,EAAiGmF,QAAjG,EAA4G;EAE3G,IAAIlB,IAAI,GAAG,CAAE,CAAb;EACA,IAAIF,GAAG,GAAG,CAAV,CAH2G,CAK3G;;EACA,IAAKoB,QAAQ,KAAKlG,MAAlB,EAA2B;IAE1BgF,IAAI,GAAGrF,mBAAmB,CAAEsG,oBAAF,CAA1B;;IACA,IAAKjB,IAAI,KAAK,CAAE,CAAhB,EAAoB;MAEnBF,GAAG,GAAG,CAAEmB,oBAAoB,CAAEjB,IAAF,CAApB,GAA+BiB,oBAAoB,CAAEjB,IAAI,GAAG,CAAT,CAArD,IAAsE,CAA5E;IAEA;EAED,CATD,MASO,IAAKkB,QAAQ,KAAKjG,OAAlB,EAA4B;IAElC+E,IAAI,GAAGrF,mBAAmB,CAAEqG,gBAAF,CAA1B;;IACA,IAAKhB,IAAI,KAAK,CAAE,CAAhB,EAAoB;MAEnBF,GAAG,GAAGqB,UAAU,CAAEvD,cAAF,EAAkBjB,MAAlB,EAA0BZ,KAA1B,EAAiCiE,IAAjC,CAAhB;IAEA;EAED,CATM,MASA,IAAKkB,QAAQ,KAAKhG,GAAlB,EAAwB;IAE9B,MAAMkG,eAAe,GAAGxG,kBAAkB,CAAEoG,gBAAF,CAA1C;IACA,IAAIK,QAAQ,GAAGlG,uBAAuB,GAAGY,KAAzC,CAH8B,CAK9B;;IACA,MAAMuF,MAAM,GAAG3E,MAAM,GAAG,CAAxB;IACA,MAAM4E,IAAI,GAAG,CAAE5E,MAAM,GAAGZ,KAAX,IAAqB,CAAlC;;IACA,KAAM,IAAIwB,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA+B;MAE9B,MAAMiE,QAAQ,GAAGP,oBAAoB,CAAE1D,CAAF,CAArC;MACA,MAAMkE,SAAS,GAAGR,oBAAoB,CAAE1D,CAAC,GAAG,CAAN,CAAtC;MACA,MAAMmE,UAAU,GAAGD,SAAS,GAAGD,QAA/B;MACA,MAAMG,QAAQ,GAAGD,UAAU,GAAGtB,SAA9B,CAL8B,CAO9B;MACA;;MACA,IAAKrE,KAAK,GAAGqE,SAAS,GAAG,CAAzB,EAA6B;QAE5B;QACA,MAAMwB,aAAa,GAAG,CAAE,GAAGrB,OAAL,CAAtB;QACAqB,aAAa,CAAClF,MAAd,GAAuBX,KAAvB,CAJ4B,CAM5B;;QACA,IAAIyB,CAAC,GAAG,CAAR;;QACA,KAAM,IAAIqE,CAAC,GAAGP,MAAd,EAAsBO,CAAC,GAAGN,IAA1B,EAAgCM,CAAC,IAAI,CAAL,EAAQrE,CAAC,EAAzC,EAA+C;UAE9C,MAAMsE,GAAG,GAAGF,aAAa,CAAEpE,CAAF,CAAzB;UACAsE,GAAG,CAACxB,SAAJ,GAAgB1C,cAAc,CAAEiE,CAAC,GAAG,IAAItE,CAAV,CAA9B;UACAuE,GAAG,CAAC/F,KAAJ,GAAY,CAAZ;UAEA,MAAM;YACL2E,MADK;YAELG,eAFK;YAGLD;UAHK,IAIFkB,GAJJ;;UAKA,KAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA+B;YAE9BnB,gBAAgB,CAAEmB,CAAF,CAAhB,GAAwB/D,QAAxB;YACA4C,gBAAgB,CAAEmB,CAAC,GAAG,CAAN,CAAhB,GAA4B,CAAE/D,QAA9B;YAEA6C,eAAe,CAAEkB,CAAF,CAAf,GAAuB/D,QAAvB;YACA6C,eAAe,CAAEkB,CAAC,GAAG,CAAN,CAAf,GAA2B,CAAE/D,QAA7B;YAEA0C,MAAM,CAAEqB,CAAF,CAAN,GAAc/D,QAAd;YACA0C,MAAM,CAAEqB,CAAC,GAAG,CAAN,CAAN,GAAkB,CAAE/D,QAApB;UAEA;;UAEDjD,sBAAsB,CAAE8G,CAAF,EAAKjE,cAAL,EAAqB8C,MAArB,CAAtB;QAEA;;QAEDkB,aAAa,CAACtE,IAAd,CAAoB+C,QAApB,EApC4B,CAsC5B;;QACA,IAAI2B,UAAU,GAAGjG,KAAjB;;QACA,KAAM,IAAIkG,EAAE,GAAG,CAAf,EAAkBA,EAAE,GAAGD,UAAvB,EAAmCC,EAAE,EAArC,EAA2C;UAE1C,MAAMH,GAAG,GAAGF,aAAa,CAAEK,EAAF,CAAzB;;UACA,OAAQA,EAAE,GAAG,CAAL,GAASD,UAAT,IAAuBJ,aAAa,CAAEK,EAAE,GAAG,CAAP,CAAb,CAAwB3B,SAAxB,KAAsCwB,GAAG,CAACxB,SAAzE,EAAqF;YAEpFsB,aAAa,CAACM,MAAd,CAAsBD,EAAE,GAAG,CAA3B,EAA8B,CAA9B;YACAD,UAAU;UAEV;QAED,CAlD2B,CAoD5B;;;QACA,KAAM,IAAIH,CAAC,GAAGP,MAAd,EAAsBO,CAAC,GAAGN,IAA1B,EAAgCM,CAAC,IAAI,CAArC,EAAyC;UAExC,MAAMM,MAAM,GAAGvE,cAAc,CAAEiE,CAAC,GAAG,IAAItE,CAAV,CAA7B;;UACA,KAAM,IAAI0E,EAAE,GAAG,CAAf,EAAkBA,EAAE,GAAGD,UAAvB,EAAmCC,EAAE,EAArC,EAA2C;YAE1C,MAAMH,GAAG,GAAGF,aAAa,CAAEK,EAAF,CAAzB;;YACA,IAAKE,MAAM,IAAIL,GAAG,CAACxB,SAAnB,EAA+B;cAE9BvF,sBAAsB,CAAE8G,CAAF,EAAKjE,cAAL,EAAqBkE,GAAG,CAAClB,gBAAzB,CAAtB;YAEA,CAJD,MAIO;cAEN7F,sBAAsB,CAAE8G,CAAF,EAAKjE,cAAL,EAAqBkE,GAAG,CAACjB,eAAzB,CAAtB;cACAiB,GAAG,CAAC/F,KAAJ;YAEA;UAED;QAED,CAxE2B,CA0E5B;;;QACA,KAAM,IAAIkG,EAAE,GAAG,CAAf,EAAkBA,EAAE,GAAGD,UAAvB,EAAmCC,EAAE,EAArC,EAA2C;UAE1C,MAAMH,GAAG,GAAGF,aAAa,CAAEK,EAAF,CAAzB;UACA,MAAMG,SAAS,GAAGN,GAAG,CAAC/F,KAAtB;UACA,MAAMsG,UAAU,GAAGtG,KAAK,GAAG+F,GAAG,CAAC/F,KAA/B,CAJ0C,CAM1C;;UACA,MAAM+E,UAAU,GAAGgB,GAAG,CAACjB,eAAvB;UACA,MAAMyB,WAAW,GAAGR,GAAG,CAAClB,gBAAxB;UAEA,IAAI2B,QAAQ,GAAG,CAAf;;UACA,IAAKH,SAAS,KAAK,CAAnB,EAAuB;YAEtBG,QAAQ,GAAG3H,kBAAkB,CAAEkG,UAAF,CAAlB,GAAmCM,eAA9C;UAEA;;UAED,IAAIoB,SAAS,GAAG,CAAhB;;UACA,IAAKH,UAAU,KAAK,CAApB,EAAwB;YAEvBG,SAAS,GAAG5H,kBAAkB,CAAE0H,WAAF,CAAlB,GAAoClB,eAAhD;UAEA;;UAED,MAAMqB,IAAI,GAAGrH,cAAc,GAAGD,uBAAuB,IACpDoH,QAAQ,GAAGH,SAAX,GAAuBI,SAAS,GAAGH,UADiB,CAArD;;UAIA,IAAKI,IAAI,GAAGpB,QAAZ,EAAuB;YAEtBrB,IAAI,GAAGzC,CAAP;YACA8D,QAAQ,GAAGoB,IAAX;YACA3C,GAAG,GAAGgC,GAAG,CAACxB,SAAV;UAEA;QAED;MAED,CAjHD,MAiHO;QAEN;QACA,KAAM,IAAI/D,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG6D,SAArB,EAAgC7D,CAAC,EAAjC,EAAuC;UAEtC,MAAMuF,GAAG,GAAGvB,OAAO,CAAEhE,CAAF,CAAnB;UACAuF,GAAG,CAAC/F,KAAJ,GAAY,CAAZ;UACA+F,GAAG,CAACxB,SAAJ,GAAgBkB,QAAQ,GAAGG,QAAX,GAAsBpF,CAAC,GAAGoF,QAA1C;UAEA,MAAMjB,MAAM,GAAGoB,GAAG,CAACpB,MAAnB;;UACA,KAAM,IAAIqB,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA+B;YAE9BrB,MAAM,CAAEqB,CAAF,CAAN,GAAc/D,QAAd;YACA0C,MAAM,CAAEqB,CAAC,GAAG,CAAN,CAAN,GAAkB,CAAE/D,QAApB;UAEA;QAED,CAjBK,CAmBN;;;QACA,KAAM,IAAI6D,CAAC,GAAGP,MAAd,EAAsBO,CAAC,GAAGN,IAA1B,EAAgCM,CAAC,IAAI,CAArC,EAAyC;UAExC,MAAMa,SAAS,GAAG9E,cAAc,CAAEiE,CAAC,GAAG,IAAItE,CAAV,CAAhC;UACA,MAAMoF,cAAc,GAAGD,SAAS,GAAGlB,QAAnC,CAHwC,CAKxC;UACA;;UACA,IAAIoB,QAAQ,GAAG,CAAE,EAAID,cAAc,GAAGhB,QAArB,CAAjB;UACA,IAAKiB,QAAQ,IAAIxC,SAAjB,EAA6BwC,QAAQ,GAAGxC,SAAS,GAAG,CAAvB;UAE7B,MAAM0B,GAAG,GAAGvB,OAAO,CAAEqC,QAAF,CAAnB;UACAd,GAAG,CAAC/F,KAAJ;UAEAhB,sBAAsB,CAAE8G,CAAF,EAAKjE,cAAL,EAAqBkE,GAAG,CAACpB,MAAzB,CAAtB;QAEA,CAnCK,CAqCN;;;QACA,MAAMmC,OAAO,GAAGtC,OAAO,CAAEH,SAAS,GAAG,CAAd,CAAvB;QACAvF,UAAU,CAAEgI,OAAO,CAACnC,MAAV,EAAkBmC,OAAO,CAACjC,gBAA1B,CAAV;;QACA,KAAM,IAAIrE,CAAC,GAAG6D,SAAS,GAAG,CAA1B,EAA6B7D,CAAC,IAAI,CAAlC,EAAqCA,CAAC,EAAtC,EAA4C;UAE3C,MAAMuF,GAAG,GAAGvB,OAAO,CAAEhE,CAAF,CAAnB;UACA,MAAMuG,OAAO,GAAGvC,OAAO,CAAEhE,CAAC,GAAG,CAAN,CAAvB;UACAzB,WAAW,CAAEgH,GAAG,CAACpB,MAAN,EAAcoC,OAAO,CAAClC,gBAAtB,EAAwCkB,GAAG,CAAClB,gBAA5C,CAAX;QAEA;;QAED,IAAIwB,SAAS,GAAG,CAAhB;;QACA,KAAM,IAAI7F,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG6D,SAAS,GAAG,CAAjC,EAAoC7D,CAAC,EAArC,EAA2C;UAE1C,MAAMuF,GAAG,GAAGvB,OAAO,CAAEhE,CAAF,CAAnB;UACA,MAAMwG,QAAQ,GAAGjB,GAAG,CAAC/F,KAArB;UACA,MAAM2E,MAAM,GAAGoB,GAAG,CAACpB,MAAnB;UAEA,MAAMoC,OAAO,GAAGvC,OAAO,CAAEhE,CAAC,GAAG,CAAN,CAAvB;UACA,MAAM+F,WAAW,GAAGQ,OAAO,CAAClC,gBAA5B,CAP0C,CAS1C;;UACA,IAAKmC,QAAQ,KAAK,CAAlB,EAAsB;YAErB,IAAKX,SAAS,KAAK,CAAnB,EAAuB;cAEtBvH,UAAU,CAAE6F,MAAF,EAAUI,UAAV,CAAV;YAEA,CAJD,MAIO;cAENhG,WAAW,CAAE4F,MAAF,EAAUI,UAAV,EAAsBA,UAAtB,CAAX;YAEA;UAED;;UAEDsB,SAAS,IAAIW,QAAb,CAxB0C,CA0B1C;;UACA,IAAIR,QAAQ,GAAG,CAAf;UACA,IAAIC,SAAS,GAAG,CAAhB;;UAEA,IAAKJ,SAAS,KAAK,CAAnB,EAAuB;YAEtBG,QAAQ,GAAG3H,kBAAkB,CAAEkG,UAAF,CAAlB,GAAmCM,eAA9C;UAEA;;UAED,MAAMiB,UAAU,GAAGtG,KAAK,GAAGqG,SAA3B;;UACA,IAAKC,UAAU,KAAK,CAApB,EAAwB;YAEvBG,SAAS,GAAG5H,kBAAkB,CAAE0H,WAAF,CAAlB,GAAoClB,eAAhD;UAEA;;UAED,MAAMqB,IAAI,GAAGrH,cAAc,GAAGD,uBAAuB,IACpDoH,QAAQ,GAAGH,SAAX,GAAuBI,SAAS,GAAGH,UADiB,CAArD;;UAIA,IAAKI,IAAI,GAAGpB,QAAZ,EAAuB;YAEtBrB,IAAI,GAAGzC,CAAP;YACA8D,QAAQ,GAAGoB,IAAX;YACA3C,GAAG,GAAGgC,GAAG,CAACxB,SAAV;UAEA;QAED;MAED;IAED;EAED,CAhPM,MAgPA;IAEN0C,OAAO,CAACC,IAAR,CAAe,yCAAyC/B,QAAU,QAAlE;EAEA;;EAED,OAAO;IAAElB,IAAF;IAAQF;EAAR,CAAP;AAEA,C,CAED;;;AACA,SAASqB,UAAT,CAAqBvD,cAArB,EAAqCjB,MAArC,EAA6CZ,KAA7C,EAAoDiE,IAApD,EAA2D;EAE1D,IAAIkD,GAAG,GAAG,CAAV;;EACA,KAAM,IAAI3G,CAAC,GAAGI,MAAR,EAAgBc,GAAG,GAAGd,MAAM,GAAGZ,KAArC,EAA4CQ,CAAC,GAAGkB,GAAhD,EAAqDlB,CAAC,EAAtD,EAA4D;IAE3D2G,GAAG,IAAItF,cAAc,CAAErB,CAAC,GAAG,CAAJ,GAAQyD,IAAI,GAAG,CAAjB,CAArB;EAEA;;EAED,OAAOkD,GAAG,GAAGnH,KAAb;AAEA,C,CAED;AACA;AACA;AACA;;;AACA,SAASoH,qBAAT,CAAgC1H,GAAhC,EAAqC2H,UAArC,EAAkD;EAEjD,MAAMC,OAAO,GAAG5H,GAAG,CAACI,UAAJ,CAAeC,QAA/B;EACA,MAAMH,KAAK,GAAGF,GAAG,CAACE,KAAJ,CAAU2H,KAAxB;EACA,MAAMC,QAAQ,GAAG5H,KAAK,CAACe,MAAN,GAAe,CAAhC;EACA,MAAMkB,cAAc,GAAG,IAAI+C,YAAJ,CAAkB4C,QAAQ,GAAG,CAA7B,CAAvB;EACA,MAAMC,UAAU,GAAGH,OAAO,CAACG,UAA3B,CANiD,CAQjD;;EACA,MAAMC,MAAM,GAAGJ,OAAO,CAACC,KAAvB,CATiD,CAWjD;;EACA,MAAMI,YAAY,GAAGL,OAAO,CAAC1G,MAAR,IAAkB,CAAvC;EACA,IAAIgH,MAAM,GAAG,CAAb;;EACA,IAAKN,OAAO,CAACO,4BAAb,EAA4C;IAE3CD,MAAM,GAAGN,OAAO,CAACQ,IAAR,CAAaF,MAAtB;EAEA,CAlBgD,CAoBjD;;;EACA,MAAMG,OAAO,GAAG,CAAE,MAAF,EAAU,MAAV,EAAkB,MAAlB,CAAhB;;EAEA,KAAM,IAAIC,GAAG,GAAG,CAAhB,EAAmBA,GAAG,GAAGR,QAAzB,EAAmCQ,GAAG,EAAtC,EAA4C;IAE3C,MAAMC,IAAI,GAAGD,GAAG,GAAG,CAAnB;IACA,MAAME,IAAI,GAAGF,GAAG,GAAG,CAAnB;IAEA,IAAIG,EAAJ,EAAQjC,EAAR,EAAYkC,EAAZ;;IAEA,IAAKX,UAAL,EAAkB;MAEjBU,EAAE,GAAGvI,KAAK,CAAEqI,IAAI,GAAG,CAAT,CAAV;MACA/B,EAAE,GAAGtG,KAAK,CAAEqI,IAAI,GAAG,CAAT,CAAV;MACAG,EAAE,GAAGxI,KAAK,CAAEqI,IAAI,GAAG,CAAT,CAAV;IAEA,CAND,MAMO;MAENE,EAAE,GAAGvI,KAAK,CAAEqI,IAAI,GAAG,CAAT,CAAL,GAAoBL,MAApB,GAA6BD,YAAlC;MACAzB,EAAE,GAAGtG,KAAK,CAAEqI,IAAI,GAAG,CAAT,CAAL,GAAoBL,MAApB,GAA6BD,YAAlC;MACAS,EAAE,GAAGxI,KAAK,CAAEqI,IAAI,GAAG,CAAT,CAAL,GAAoBL,MAApB,GAA6BD,YAAlC;IAEA;;IAED,KAAM,IAAIU,EAAE,GAAG,CAAf,EAAkBA,EAAE,GAAG,CAAvB,EAA0BA,EAAE,EAA5B,EAAkC;MAEjC,IAAI7G,CAAJ,EAAOC,CAAP,EAAUqE,CAAV;;MAEA,IAAK2B,UAAL,EAAkB;QAEjBjG,CAAC,GAAG8F,OAAO,CAAES,OAAO,CAAEM,EAAF,CAAT,CAAP,CAA0BF,EAA1B,CAAJ;QACA1G,CAAC,GAAG6F,OAAO,CAAES,OAAO,CAAEM,EAAF,CAAT,CAAP,CAA0BnC,EAA1B,CAAJ;QACAJ,CAAC,GAAGwB,OAAO,CAAES,OAAO,CAAEM,EAAF,CAAT,CAAP,CAA0BD,EAA1B,CAAJ;MAEA,CAND,MAMO;QAEN5G,CAAC,GAAGkG,MAAM,CAAES,EAAE,GAAGE,EAAP,CAAV;QACA5G,CAAC,GAAGiG,MAAM,CAAExB,EAAE,GAAGmC,EAAP,CAAV;QACAvC,CAAC,GAAG4B,MAAM,CAAEU,EAAE,GAAGC,EAAP,CAAV;MAEA;;MAED,IAAIC,GAAG,GAAG9G,CAAV;MACA,IAAKC,CAAC,GAAG6G,GAAT,EAAeA,GAAG,GAAG7G,CAAN;MACf,IAAKqE,CAAC,GAAGwC,GAAT,EAAeA,GAAG,GAAGxC,CAAN;MAEf,IAAIyC,GAAG,GAAG/G,CAAV;MACA,IAAKC,CAAC,GAAG8G,GAAT,EAAeA,GAAG,GAAG9G,CAAN;MACf,IAAKqE,CAAC,GAAGyC,GAAT,EAAeA,GAAG,GAAGzC,CAAN,CAxBkB,CA0BjC;MACA;MACA;;MACA,MAAM0C,WAAW,GAAG,CAAED,GAAG,GAAGD,GAAR,IAAgB,CAApC;MACA,MAAMG,GAAG,GAAGJ,EAAE,GAAG,CAAjB;MACAxG,cAAc,CAAEqG,IAAI,GAAGO,GAAP,GAAa,CAAf,CAAd,GAAmCH,GAAG,GAAGE,WAAzC;MACA3G,cAAc,CAAEqG,IAAI,GAAGO,GAAP,GAAa,CAAf,CAAd,GAAmCD,WAAW,GAAG,CAAEE,IAAI,CAACC,GAAL,CAAUL,GAAV,IAAkBE,WAApB,IAAoCjJ,eAArF;MAEA,IAAK+I,GAAG,GAAGjB,UAAU,CAAEgB,EAAF,CAArB,EAA8BhB,UAAU,CAAEgB,EAAF,CAAV,GAAmBC,GAAnB;MAC9B,IAAKC,GAAG,GAAGlB,UAAU,CAAEgB,EAAE,GAAG,CAAP,CAArB,EAAkChB,UAAU,CAAEgB,EAAE,GAAG,CAAP,CAAV,GAAuBE,GAAvB;IAElC;EAED;;EAED,OAAO1G,cAAP;AAEA;;AAED,OAAO,SAAS+G,SAAT,CAAoBlJ,GAApB,EAAyBC,OAAzB,EAAmC;EAEzC,SAASkJ,eAAT,CAA0BC,kBAA1B,EAA+C;IAE9C,IAAKC,UAAL,EAAkB;MAEjBA,UAAU,CAAED,kBAAkB,GAAGE,cAAvB,CAAV;IAEA;EAED,CAVwC,CAYzC;EACA;;;EACA,SAASC,SAAT,CAAoBC,IAApB,EAA0BtI,MAA1B,EAAkCZ,KAAlC,EAAkF;IAAA,IAAzCkF,oBAAyC,uEAAlB,IAAkB;IAAA,IAAZiE,KAAY,uEAAJ,CAAI;;IAEjF,IAAK,CAAEC,eAAF,IAAqBD,KAAK,IAAIE,QAAnC,EAA8C;MAE7CD,eAAe,GAAG,IAAlB;;MACA,IAAKE,OAAL,EAAe;QAEdrC,OAAO,CAACC,IAAR,CAAe,yBAAyBmC,QAAU,6DAAlD;QACApC,OAAO,CAACC,IAAR,CAAcxH,GAAd;MAEA;IAED,CAZgF,CAcjF;;;IACA,IAAKM,KAAK,IAAIuJ,WAAT,IAAwBJ,KAAK,IAAIE,QAAtC,EAAiD;MAEhDR,eAAe,CAAEjI,MAAM,GAAGZ,KAAX,CAAf;MACAkJ,IAAI,CAACtI,MAAL,GAAcA,MAAd;MACAsI,IAAI,CAAClJ,KAAL,GAAaA,KAAb;MACA,OAAOkJ,IAAP;IAEA,CAtBgF,CAwBjF;;;IACA,MAAMtF,KAAK,GAAGoB,eAAe,CAAEkE,IAAI,CAACM,YAAP,EAAqBtE,oBAArB,EAA2CrD,cAA3C,EAA2DjB,MAA3D,EAAmEZ,KAAnE,EAA0EmF,QAA1E,CAA7B;;IACA,IAAKvB,KAAK,CAACK,IAAN,KAAe,CAAE,CAAtB,EAA0B;MAEzB4E,eAAe,CAAEjI,MAAM,GAAGZ,KAAX,CAAf;MACAkJ,IAAI,CAACtI,MAAL,GAAcA,MAAd;MACAsI,IAAI,CAAClJ,KAAL,GAAaA,KAAb;MACA,OAAOkJ,IAAP;IAEA;;IAED,MAAMO,WAAW,GAAG9F,SAAS,CAAE+F,UAAF,EAAc7H,cAAd,EAA8BjB,MAA9B,EAAsCZ,KAAtC,EAA6C4D,KAA7C,CAA7B,CAnCiF,CAqCjF;;IACA,IAAK6F,WAAW,KAAK7I,MAAhB,IAA0B6I,WAAW,KAAK7I,MAAM,GAAGZ,KAAxD,EAAgE;MAE/D6I,eAAe,CAAEjI,MAAM,GAAGZ,KAAX,CAAf;MACAkJ,IAAI,CAACtI,MAAL,GAAcA,MAAd;MACAsI,IAAI,CAAClJ,KAAL,GAAaA,KAAb;IAEA,CAND,MAMO;MAENkJ,IAAI,CAACS,SAAL,GAAiB/F,KAAK,CAACK,IAAvB,CAFM,CAIN;;MACA,MAAMJ,IAAI,GAAG,IAAIlF,WAAJ,EAAb;MACA,MAAMiL,MAAM,GAAGhJ,MAAf;MACA,MAAMiJ,MAAM,GAAGJ,WAAW,GAAG7I,MAA7B;MACAsI,IAAI,CAACrF,IAAL,GAAYA,IAAZ;MACAA,IAAI,CAAC2F,YAAL,GAAoB,IAAI5E,YAAJ,CAAkB,CAAlB,CAApB;MAEAhD,SAAS,CAAEC,cAAF,EAAkB+H,MAAlB,EAA0BC,MAA1B,EAAkChG,IAAI,CAAC2F,YAAvC,EAAqDM,yBAArD,CAAT;MACAb,SAAS,CAAEpF,IAAF,EAAQ+F,MAAR,EAAgBC,MAAhB,EAAwBC,yBAAxB,EAAmDX,KAAK,GAAG,CAA3D,CAAT,CAZM,CAcN;;MACA,MAAMrF,KAAK,GAAG,IAAInF,WAAJ,EAAd;MACA,MAAMoL,MAAM,GAAGN,WAAf;MACA,MAAMO,MAAM,GAAGhK,KAAK,GAAG6J,MAAvB;MACAX,IAAI,CAACpF,KAAL,GAAaA,KAAb;MACAA,KAAK,CAAC0F,YAAN,GAAqB,IAAI5E,YAAJ,CAAkB,CAAlB,CAArB;MAEAhD,SAAS,CAAEC,cAAF,EAAkBkI,MAAlB,EAA0BC,MAA1B,EAAkClG,KAAK,CAAC0F,YAAxC,EAAsDM,yBAAtD,CAAT;MACAb,SAAS,CAAEnF,KAAF,EAASiG,MAAT,EAAiBC,MAAjB,EAAyBF,yBAAzB,EAAoDX,KAAK,GAAG,CAA5D,CAAT;IAEA;;IAED,OAAOD,IAAP;EAEA;;EAEDzJ,WAAW,CAAEC,GAAF,EAAOC,OAAP,CAAX,CAxFyC,CA0FzC;EACA;EACA;;EACA,MAAM0H,UAAU,GAAG,IAAIzC,YAAJ,CAAkB,CAAlB,CAAnB;EACA,MAAMkF,yBAAyB,GAAG,IAAIlF,YAAJ,CAAkB,CAAlB,CAAlC;EACA,MAAM/C,cAAc,GAAGuF,qBAAqB,CAAE1H,GAAF,EAAO2H,UAAP,CAA5C;EACA,MAAMqC,UAAU,GAAGhK,GAAG,CAACE,KAAJ,CAAU2H,KAA7B;EACA,MAAM8B,QAAQ,GAAG1J,OAAO,CAAC0J,QAAzB;EACA,MAAMC,OAAO,GAAG3J,OAAO,CAAC2J,OAAxB;EACA,MAAMC,WAAW,GAAG5J,OAAO,CAAC4J,WAA5B;EACA,MAAMpE,QAAQ,GAAGxF,OAAO,CAACwF,QAAzB;EACA,MAAM4D,UAAU,GAAGpJ,OAAO,CAACoJ,UAA3B;EACA,MAAMC,cAAc,GAAGtJ,GAAG,CAACE,KAAJ,CAAUI,KAAV,GAAkB,CAAzC;EACA,IAAIoJ,eAAe,GAAG,KAAtB;EAEA,MAAMa,KAAK,GAAG,EAAd;EACA,MAAMpJ,MAAM,GAAGJ,kBAAkB,CAAEf,GAAF,CAAjC;;EAEA,IAAKmB,MAAM,CAACF,MAAP,KAAkB,CAAvB,EAA2B;IAE1B,MAAMuJ,KAAK,GAAGrJ,MAAM,CAAE,CAAF,CAApB;IACA,MAAMsJ,IAAI,GAAG,IAAIxL,WAAJ,EAAb;IACAwL,IAAI,CAACX,YAAL,GAAoBnC,UAApB;IACA3D,iBAAiB,CAAE7B,cAAF,EAAkBqI,KAAK,CAACtJ,MAAxB,EAAgCsJ,KAAK,CAAClK,KAAtC,EAA6C8J,yBAA7C,CAAjB;IAEAb,SAAS,CAAEkB,IAAF,EAAQD,KAAK,CAACtJ,MAAd,EAAsBsJ,KAAK,CAAClK,KAA5B,EAAmC8J,yBAAnC,CAAT;IACAG,KAAK,CAACtI,IAAN,CAAYwI,IAAZ;EAEA,CAVD,MAUO;IAEN,KAAM,IAAID,KAAV,IAAmBrJ,MAAnB,EAA4B;MAE3B,MAAMsJ,IAAI,GAAG,IAAIxL,WAAJ,EAAb;MACAwL,IAAI,CAACX,YAAL,GAAoB,IAAI5E,YAAJ,CAAkB,CAAlB,CAApB;MACAhD,SAAS,CAAEC,cAAF,EAAkBqI,KAAK,CAACtJ,MAAxB,EAAgCsJ,KAAK,CAAClK,KAAtC,EAA6CmK,IAAI,CAACX,YAAlD,EAAgEM,yBAAhE,CAAT;MAEAb,SAAS,CAAEkB,IAAF,EAAQD,KAAK,CAACtJ,MAAd,EAAsBsJ,KAAK,CAAClK,KAA5B,EAAmC8J,yBAAnC,CAAT;MACAG,KAAK,CAACtI,IAAN,CAAYwI,IAAZ;IAEA;EAED;;EAED,OAAOF,KAAP;AAEA;AAED,OAAO,SAASG,eAAT,CAA0B1K,GAA1B,EAA+BC,OAA/B,EAAyC;EAE/C;EACA;EACA;EACA,MAAMsK,KAAK,GAAGrB,SAAS,CAAElJ,GAAF,EAAOC,OAAP,CAAvB;EAEA,IAAI0K,YAAJ;EACA,IAAIC,WAAJ;EACA,IAAIC,WAAJ;EACA,MAAMC,WAAW,GAAG,EAApB;EACA,MAAMvK,iBAAiB,GAAGN,OAAO,CAACO,oBAAR,GAA+BC,iBAA/B,GAAmDC,WAA7E;;EACA,KAAM,IAAII,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGyJ,KAAK,CAACtJ,MAA3B,EAAmCH,CAAC,EAApC,EAA0C;IAEzC,MAAM2J,IAAI,GAAGF,KAAK,CAAEzJ,CAAF,CAAlB;IACA,IAAIiK,SAAS,GAAGC,UAAU,CAAEP,IAAF,CAA1B;IAEA,MAAMQ,MAAM,GAAG,IAAI1K,iBAAJ,CAAuBX,cAAc,GAAGmL,SAAxC,CAAf;IACAJ,YAAY,GAAG,IAAIzF,YAAJ,CAAkB+F,MAAlB,CAAf;IACAL,WAAW,GAAG,IAAIjK,WAAJ,CAAiBsK,MAAjB,CAAd;IACAJ,WAAW,GAAG,IAAIjK,WAAJ,CAAiBqK,MAAjB,CAAd;IACAC,cAAc,CAAE,CAAF,EAAKT,IAAL,CAAd;IACAK,WAAW,CAAC7I,IAAZ,CAAkBgJ,MAAlB;EAEA;;EAED,OAAOH,WAAP;;EAEA,SAASE,UAAT,CAAqBxB,IAArB,EAA4B;IAE3B,IAAKA,IAAI,CAAClJ,KAAV,EAAkB;MAEjB,OAAO,CAAP;IAEA,CAJD,MAIO;MAEN,OAAO,IAAI0K,UAAU,CAAExB,IAAI,CAACrF,IAAP,CAAd,GAA8B6G,UAAU,CAAExB,IAAI,CAACpF,KAAP,CAA/C;IAEA;EAED;;EAED,SAAS8G,cAAT,CAAyBC,UAAzB,EAAqC3B,IAArC,EAA4C;IAE3C,MAAM4B,aAAa,GAAGD,UAAU,GAAG,CAAnC;IACA,MAAME,aAAa,GAAGF,UAAU,GAAG,CAAnC;IACA,MAAMG,MAAM,GAAG,CAAE,CAAE9B,IAAI,CAAClJ,KAAxB;IACA,MAAMwJ,YAAY,GAAGN,IAAI,CAACM,YAA1B;;IACA,KAAM,IAAIhJ,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA+B;MAE9B6J,YAAY,CAAES,aAAa,GAAGtK,CAAlB,CAAZ,GAAoCgJ,YAAY,CAAEhJ,CAAF,CAAhD;IAEA;;IAED,IAAKwK,MAAL,EAAc;MAEb,MAAMpK,MAAM,GAAGsI,IAAI,CAACtI,MAApB;MACA,MAAMZ,KAAK,GAAGkJ,IAAI,CAAClJ,KAAnB;MACAsK,WAAW,CAAEQ,aAAa,GAAG,CAAlB,CAAX,GAAmClK,MAAnC;MACA2J,WAAW,CAAEQ,aAAa,GAAG,EAAlB,CAAX,GAAoC/K,KAApC;MACAuK,WAAW,CAAEQ,aAAa,GAAG,EAAlB,CAAX,GAAoCvL,gBAApC;MACA,OAAOqL,UAAU,GAAGvL,cAApB;IAEA,CATD,MASO;MAEN,MAAMuE,IAAI,GAAGqF,IAAI,CAACrF,IAAlB;MACA,MAAMC,KAAK,GAAGoF,IAAI,CAACpF,KAAnB;MACA,MAAM6F,SAAS,GAAGT,IAAI,CAACS,SAAvB;MAEA,IAAIsB,iBAAJ;MACAA,iBAAiB,GAAGL,cAAc,CAAEC,UAAU,GAAGvL,cAAf,EAA+BuE,IAA/B,CAAlC;;MAEA,IAAOoH,iBAAiB,GAAG,CAAtB,GAA4BvC,IAAI,CAACwC,GAAL,CAAU,CAAV,EAAa,EAAb,CAAjC,EAAqD;QAEpD,MAAM,IAAIC,KAAJ,CAAW,2DAAX,CAAN;MAEA;;MAEDb,WAAW,CAAEQ,aAAa,GAAG,CAAlB,CAAX,GAAmCG,iBAAiB,GAAG,CAAvD;MACAA,iBAAiB,GAAGL,cAAc,CAAEK,iBAAF,EAAqBnH,KAArB,CAAlC;MAEAwG,WAAW,CAAEQ,aAAa,GAAG,CAAlB,CAAX,GAAmCnB,SAAnC;MACA,OAAOsB,iBAAP;IAEA;EAED;AAED"},"metadata":{},"sourceType":"module"}