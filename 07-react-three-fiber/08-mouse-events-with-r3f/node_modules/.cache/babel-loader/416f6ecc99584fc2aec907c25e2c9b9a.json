{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport * as THREE from \"three\";\n\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\n  let i;\n  src = src.subarray || src.slice ? src : src.buffer;\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\n  src = srcOffset ? src.subarray ? src.subarray(srcOffset, length && srcOffset + length) : src.slice(srcOffset, length && srcOffset + length) : src;\n\n  if (dst.set) {\n    dst.set(src, dstOffset);\n  } else {\n    for (i = 0; i < src.length; i++) dst[i + dstOffset] = src[i];\n  }\n\n  return dst;\n}\n\nfunction convertPoints(points) {\n  if (points instanceof Float32Array) return points;\n  if (points instanceof THREE.BufferGeometry) return points.getAttribute(\"position\").array;\n  return points.map(p => {\n    const isArray = Array.isArray(p);\n    return p instanceof THREE.Vector3 ? [p.x, p.y, p.z] : p instanceof THREE.Vector2 ? [p.x, p.y, 0] : isArray && p.length === 3 ? [p[0], p[1], p[2]] : isArray && p.length === 2 ? [p[0], p[1], 0] : p;\n  }).flat();\n}\n\nclass MeshLineGeometry extends THREE.BufferGeometry {\n  constructor() {\n    super();\n\n    __publicField(this, \"type\", \"MeshLine\");\n\n    __publicField(this, \"isMeshLine\", true);\n\n    __publicField(this, \"positions\", []);\n\n    __publicField(this, \"previous\", []);\n\n    __publicField(this, \"next\", []);\n\n    __publicField(this, \"side\", []);\n\n    __publicField(this, \"width\", []);\n\n    __publicField(this, \"indices_array\", []);\n\n    __publicField(this, \"uvs\", []);\n\n    __publicField(this, \"counters\", []);\n\n    __publicField(this, \"widthCallback\", null);\n\n    __publicField(this, \"_attributes\");\n\n    __publicField(this, \"_points\", []);\n\n    __publicField(this, \"points\");\n\n    __publicField(this, \"matrixWorld\", new THREE.Matrix4());\n\n    Object.defineProperties(this, {\n      points: {\n        enumerable: true,\n\n        get() {\n          return this._points;\n        },\n\n        set(value) {\n          this.setPoints(value, this.widthCallback);\n        }\n\n      }\n    });\n  }\n\n  setMatrixWorld(matrixWorld) {\n    this.matrixWorld = matrixWorld;\n  }\n\n  setPoints(points, wcb) {\n    points = convertPoints(points);\n    this._points = points;\n    this.widthCallback = wcb != null ? wcb : null;\n    this.positions = [];\n    this.counters = [];\n\n    if (points.length && points[0] instanceof THREE.Vector3) {\n      for (let j = 0; j < points.length; j++) {\n        const p = points[j];\n        const c = j / (points.length - 1);\n        this.positions.push(p.x, p.y, p.z);\n        this.positions.push(p.x, p.y, p.z);\n        this.counters.push(c);\n        this.counters.push(c);\n      }\n    } else {\n      for (let j = 0; j < points.length; j += 3) {\n        const c = j / (points.length - 1);\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\n        this.counters.push(c);\n        this.counters.push(c);\n      }\n    }\n\n    this.process();\n  }\n\n  compareV3(a, b) {\n    const aa = a * 6;\n    const ab = b * 6;\n    return this.positions[aa] === this.positions[ab] && this.positions[aa + 1] === this.positions[ab + 1] && this.positions[aa + 2] === this.positions[ab + 2];\n  }\n\n  copyV3(a) {\n    const aa = a * 6;\n    return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\n  }\n\n  process() {\n    const l = this.positions.length / 6;\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.width = [];\n    this.indices_array = [];\n    this.uvs = [];\n    let w;\n    let v;\n\n    if (this.compareV3(0, l - 1)) {\n      v = this.copyV3(l - 2);\n    } else {\n      v = this.copyV3(0);\n    }\n\n    this.previous.push(v[0], v[1], v[2]);\n    this.previous.push(v[0], v[1], v[2]);\n\n    for (let j = 0; j < l; j++) {\n      this.side.push(1);\n      this.side.push(-1);\n      if (this.widthCallback) w = this.widthCallback(j / (l - 1));else w = 1;\n      this.width.push(w);\n      this.width.push(w);\n      this.uvs.push(j / (l - 1), 0);\n      this.uvs.push(j / (l - 1), 1);\n\n      if (j < l - 1) {\n        v = this.copyV3(j);\n        this.previous.push(v[0], v[1], v[2]);\n        this.previous.push(v[0], v[1], v[2]);\n        const n = j * 2;\n        this.indices_array.push(n, n + 1, n + 2);\n        this.indices_array.push(n + 2, n + 1, n + 3);\n      }\n\n      if (j > 0) {\n        v = this.copyV3(j);\n        this.next.push(v[0], v[1], v[2]);\n        this.next.push(v[0], v[1], v[2]);\n      }\n    }\n\n    if (this.compareV3(l - 1, 0)) {\n      v = this.copyV3(1);\n    } else {\n      v = this.copyV3(l - 1);\n    }\n\n    this.next.push(v[0], v[1], v[2]);\n    this.next.push(v[0], v[1], v[2]);\n\n    if (!this._attributes || this._attributes.position.count !== this.positions.length) {\n      this._attributes = {\n        position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\n        next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\n        side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\n        width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\n        uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\n        index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\n        counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\n      };\n    } else {\n      this._attributes.position.copyArray(new Float32Array(this.positions));\n\n      this._attributes.position.needsUpdate = true;\n\n      this._attributes.previous.copyArray(new Float32Array(this.previous));\n\n      this._attributes.previous.needsUpdate = true;\n\n      this._attributes.next.copyArray(new Float32Array(this.next));\n\n      this._attributes.next.needsUpdate = true;\n\n      this._attributes.side.copyArray(new Float32Array(this.side));\n\n      this._attributes.side.needsUpdate = true;\n\n      this._attributes.width.copyArray(new Float32Array(this.width));\n\n      this._attributes.width.needsUpdate = true;\n\n      this._attributes.uv.copyArray(new Float32Array(this.uvs));\n\n      this._attributes.uv.needsUpdate = true;\n\n      this._attributes.index.copyArray(new Uint16Array(this.indices_array));\n\n      this._attributes.index.needsUpdate = true;\n    }\n\n    this.setAttribute(\"position\", this._attributes.position);\n    this.setAttribute(\"previous\", this._attributes.previous);\n    this.setAttribute(\"next\", this._attributes.next);\n    this.setAttribute(\"side\", this._attributes.side);\n    this.setAttribute(\"width\", this._attributes.width);\n    this.setAttribute(\"uv\", this._attributes.uv);\n    this.setAttribute(\"counters\", this._attributes.counters);\n    this.setAttribute(\"position\", this._attributes.position);\n    this.setAttribute(\"previous\", this._attributes.previous);\n    this.setAttribute(\"next\", this._attributes.next);\n    this.setAttribute(\"side\", this._attributes.side);\n    this.setAttribute(\"width\", this._attributes.width);\n    this.setAttribute(\"uv\", this._attributes.uv);\n    this.setAttribute(\"counters\", this._attributes.counters);\n    this.setIndex(this._attributes.index);\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  }\n\n  advance(_ref) {\n    let {\n      x,\n      y,\n      z\n    } = _ref;\n    const positions = this._attributes.position.array;\n    const previous = this._attributes.previous.array;\n    const next = this._attributes.next.array;\n    const l = positions.length;\n    memcpy(positions, 0, previous, 0, l);\n    memcpy(positions, 6, positions, 0, l - 6);\n    positions[l - 6] = x;\n    positions[l - 5] = y;\n    positions[l - 4] = z;\n    positions[l - 3] = x;\n    positions[l - 2] = y;\n    positions[l - 1] = z;\n    memcpy(positions, 6, next, 0, l - 6);\n    next[l - 6] = x;\n    next[l - 5] = y;\n    next[l - 4] = z;\n    next[l - 3] = x;\n    next[l - 2] = y;\n    next[l - 1] = z;\n    this._attributes.position.needsUpdate = true;\n    this._attributes.previous.needsUpdate = true;\n    this._attributes.next.needsUpdate = true;\n  }\n\n}\n\nconst vertexShader = `\n  #include <common>\n  #include <logdepthbuf_pars_vertex>\n  #include <fog_pars_vertex>\n\n  attribute vec3 previous;\n  attribute vec3 next;\n  attribute float side;\n  attribute float width;\n  attribute float counters;\n  \n  uniform vec2 resolution;\n  uniform float lineWidth;\n  uniform vec3 color;\n  uniform float opacity;\n  uniform float sizeAttenuation;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  \n  vec2 fix(vec4 i, float aspect) {\n    vec2 res = i.xy / i.w;\n    res.x *= aspect;\n  \tvCounters = counters;\n    return res;\n  }\n  \n  void main() {\n    float aspect = resolution.x / resolution.y;\n    vColor = vec4(color, opacity);\n    vUV = uv;\n  \n    mat4 m = projectionMatrix * modelViewMatrix;\n    vec4 finalPosition = m * vec4(position, 1.0);\n    vec4 prevPos = m * vec4(previous, 1.0);\n    vec4 nextPos = m * vec4(next, 1.0);\n  \n    vec2 currentP = fix(finalPosition, aspect);\n    vec2 prevP = fix(prevPos, aspect);\n    vec2 nextP = fix(nextPos, aspect);\n  \n    float w = lineWidth * width;\n  \n    vec2 dir;\n    if (nextP == currentP) dir = normalize(currentP - prevP);\n    else if (prevP == currentP) dir = normalize(nextP - currentP);\n    else {\n      vec2 dir1 = normalize(currentP - prevP);\n      vec2 dir2 = normalize(nextP - currentP);\n      dir = normalize(dir1 + dir2);\n  \n      vec2 perp = vec2(-dir1.y, dir1.x);\n      vec2 miter = vec2(-dir.y, dir.x);\n      //w = clamp(w / dot(miter, perp), 0., 4. * lineWidth * width);\n    }\n  \n    //vec2 normal = (cross(vec3(dir, 0.), vec3(0., 0., 1.))).xy;\n    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);\n    normal.xy *= .5 * w;\n    //normal *= projectionMatrix;\n    if (sizeAttenuation == 0.) {\n      normal.xy *= finalPosition.w;\n      normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy;\n    }\n  \n    finalPosition.xy += normal.xy * side;\n    gl_Position = finalPosition;\n    #include <logdepthbuf_vertex>\n    #include <fog_vertex>\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    #include <fog_vertex>\n  }\n`;\nconst fragmentShader = `\n  #include <fog_pars_fragment>\n  #include <logdepthbuf_pars_fragment>\n  \n  uniform sampler2D map;\n  uniform sampler2D alphaMap;\n  uniform float useMap;\n  uniform float useAlphaMap;\n  uniform float useDash;\n  uniform float dashArray;\n  uniform float dashOffset;\n  uniform float dashRatio;\n  uniform float visibility;\n  uniform float alphaTest;\n  uniform vec2 repeat;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  \n  void main() {\n    #include <logdepthbuf_fragment>\n    vec4 c = vColor;\n    if (useMap == 1.) c *= texture2D(map, vUV * repeat);\n    if (useAlphaMap == 1.) c.a *= texture2D(alphaMap, vUV * repeat).a;\n    if (c.a < alphaTest) discard;\n    if (useDash == 1.) {\n      c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\n    }\n    gl_FragColor = c;\n    gl_FragColor.a *= step(vCounters, visibility);\n    #include <fog_fragment>\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n  }\n`;\n\nclass MeshLineMaterial extends THREE.ShaderMaterial {\n  constructor(parameters) {\n    super({\n      uniforms: { ...THREE.UniformsLib.fog,\n        lineWidth: {\n          value: 1\n        },\n        map: {\n          value: null\n        },\n        useMap: {\n          value: 0\n        },\n        alphaMap: {\n          value: null\n        },\n        useAlphaMap: {\n          value: 0\n        },\n        color: {\n          value: new THREE.Color(16777215)\n        },\n        opacity: {\n          value: 1\n        },\n        resolution: {\n          value: new THREE.Vector2(1, 1)\n        },\n        sizeAttenuation: {\n          value: 1\n        },\n        dashArray: {\n          value: 0\n        },\n        dashOffset: {\n          value: 0\n        },\n        dashRatio: {\n          value: 0.5\n        },\n        useDash: {\n          value: 0\n        },\n        visibility: {\n          value: 1\n        },\n        alphaTest: {\n          value: 0\n        },\n        repeat: {\n          value: new THREE.Vector2(1, 1)\n        }\n      },\n      vertexShader,\n      fragmentShader\n    });\n\n    __publicField(this, \"lineWidth\");\n\n    __publicField(this, \"map\");\n\n    __publicField(this, \"useMap\");\n\n    __publicField(this, \"alphaMap\");\n\n    __publicField(this, \"useAlphaMap\");\n\n    __publicField(this, \"color\");\n\n    __publicField(this, \"resolution\");\n\n    __publicField(this, \"sizeAttenuation\");\n\n    __publicField(this, \"dashArray\");\n\n    __publicField(this, \"dashOffset\");\n\n    __publicField(this, \"dashRatio\");\n\n    __publicField(this, \"useDash\");\n\n    __publicField(this, \"visibility\");\n\n    __publicField(this, \"repeat\");\n\n    this.type = \"MeshLineMaterial\";\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n\n        get() {\n          return this.uniforms.lineWidth.value;\n        },\n\n        set(value) {\n          this.uniforms.lineWidth.value = value;\n        }\n\n      },\n      map: {\n        enumerable: true,\n\n        get() {\n          return this.uniforms.map.value;\n        },\n\n        set(value) {\n          this.uniforms.map.value = value;\n        }\n\n      },\n      useMap: {\n        enumerable: true,\n\n        get() {\n          return this.uniforms.useMap.value;\n        },\n\n        set(value) {\n          this.uniforms.useMap.value = value;\n        }\n\n      },\n      alphaMap: {\n        enumerable: true,\n\n        get() {\n          return this.uniforms.alphaMap.value;\n        },\n\n        set(value) {\n          this.uniforms.alphaMap.value = value;\n        }\n\n      },\n      useAlphaMap: {\n        enumerable: true,\n\n        get() {\n          return this.uniforms.useAlphaMap.value;\n        },\n\n        set(value) {\n          this.uniforms.useAlphaMap.value = value;\n        }\n\n      },\n      color: {\n        enumerable: true,\n\n        get() {\n          return this.uniforms.color.value;\n        },\n\n        set(value) {\n          this.uniforms.color.value = value;\n        }\n\n      },\n      opacity: {\n        enumerable: true,\n\n        get() {\n          return this.uniforms.opacity.value;\n        },\n\n        set(value) {\n          this.uniforms.opacity.value = value;\n        }\n\n      },\n      resolution: {\n        enumerable: true,\n\n        get() {\n          return this.uniforms.resolution.value;\n        },\n\n        set(value) {\n          this.uniforms.resolution.value.copy(value);\n        }\n\n      },\n      sizeAttenuation: {\n        enumerable: true,\n\n        get() {\n          return this.uniforms.sizeAttenuation.value;\n        },\n\n        set(value) {\n          this.uniforms.sizeAttenuation.value = value;\n        }\n\n      },\n      dashArray: {\n        enumerable: true,\n\n        get() {\n          return this.uniforms.dashArray.value;\n        },\n\n        set(value) {\n          this.uniforms.dashArray.value = value;\n          this.useDash = value !== 0 ? 1 : 0;\n        }\n\n      },\n      dashOffset: {\n        enumerable: true,\n\n        get() {\n          return this.uniforms.dashOffset.value;\n        },\n\n        set(value) {\n          this.uniforms.dashOffset.value = value;\n        }\n\n      },\n      dashRatio: {\n        enumerable: true,\n\n        get() {\n          return this.uniforms.dashRatio.value;\n        },\n\n        set(value) {\n          this.uniforms.dashRatio.value = value;\n        }\n\n      },\n      useDash: {\n        enumerable: true,\n\n        get() {\n          return this.uniforms.useDash.value;\n        },\n\n        set(value) {\n          this.uniforms.useDash.value = value;\n        }\n\n      },\n      visibility: {\n        enumerable: true,\n\n        get() {\n          return this.uniforms.visibility.value;\n        },\n\n        set(value) {\n          this.uniforms.visibility.value = value;\n        }\n\n      },\n      alphaTest: {\n        enumerable: true,\n\n        get() {\n          return this.uniforms.alphaTest.value;\n        },\n\n        set(value) {\n          this.uniforms.alphaTest.value = value;\n        }\n\n      },\n      repeat: {\n        enumerable: true,\n\n        get() {\n          return this.uniforms.repeat.value;\n        },\n\n        set(value) {\n          this.uniforms.repeat.value.copy(value);\n        }\n\n      }\n    });\n    this.setValues(parameters);\n  }\n\n  copy(source) {\n    super.copy(source);\n    this.lineWidth = source.lineWidth;\n    this.map = source.map;\n    this.useMap = source.useMap;\n    this.alphaMap = source.alphaMap;\n    this.useAlphaMap = source.useAlphaMap;\n    this.color.copy(source.color);\n    this.opacity = source.opacity;\n    this.resolution.copy(source.resolution);\n    this.sizeAttenuation = source.sizeAttenuation;\n    this.dashArray = source.dashArray;\n    this.dashOffset = source.dashOffset;\n    this.dashRatio = source.dashRatio;\n    this.useDash = source.useDash;\n    this.visibility = source.visibility;\n    this.alphaTest = source.alphaTest;\n    this.repeat.copy(source.repeat);\n    return this;\n  }\n\n}\n\nfunction raycast(raycaster, intersects) {\n  const inverseMatrix = new THREE.Matrix4();\n  const ray = new THREE.Ray();\n  const sphere = new THREE.Sphere();\n  const interRay = new THREE.Vector3();\n  const geometry = this.geometry;\n  sphere.copy(geometry.boundingSphere);\n  sphere.applyMatrix4(this.matrixWorld);\n  if (!raycaster.ray.intersectSphere(sphere, interRay)) return;\n  inverseMatrix.copy(this.matrixWorld).invert();\n  ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n  const vStart = new THREE.Vector3();\n  const vEnd = new THREE.Vector3();\n  const interSegment = new THREE.Vector3();\n  const step = this instanceof THREE.LineSegments ? 2 : 1;\n  const index = geometry.index;\n  const attributes = geometry.attributes;\n\n  if (index !== null) {\n    const indices = index.array;\n    const positions = attributes.position.array;\n    const widths = attributes.width.array;\n\n    for (let i = 0, l = indices.length - 1; i < l; i += step) {\n      const a = indices[i];\n      const b = indices[i + 1];\n      vStart.fromArray(positions, a * 3);\n      vEnd.fromArray(positions, b * 3);\n      const width = widths[Math.floor(i / 3)] != void 0 ? widths[Math.floor(i / 3)] : 1;\n      const precision = raycaster.params.Line.threshold + this.material.lineWidth * width / 2;\n      const precisionSq = precision * precision;\n      const distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n      if (distSq > precisionSq) continue;\n      interRay.applyMatrix4(this.matrixWorld);\n      const distance = raycaster.ray.origin.distanceTo(interRay);\n      if (distance < raycaster.near || distance > raycaster.far) continue;\n      intersects.push({\n        distance,\n        point: interSegment.clone().applyMatrix4(this.matrixWorld),\n        index: i,\n        face: null,\n        faceIndex: void 0,\n        object: this\n      });\n      i = l;\n    }\n  }\n}\n\nexport { MeshLineGeometry, MeshLineMaterial, raycast };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","THREE","memcpy","src","srcOffset","dst","dstOffset","length","i","subarray","slice","buffer","set","convertPoints","points","Float32Array","BufferGeometry","getAttribute","array","map","p","isArray","Array","Vector3","x","y","z","Vector2","flat","MeshLineGeometry","constructor","Matrix4","defineProperties","get","_points","setPoints","widthCallback","setMatrixWorld","matrixWorld","wcb","positions","counters","j","c","push","process","compareV3","a","b","aa","ab","copyV3","l","previous","next","side","width","indices_array","uvs","w","v","n","_attributes","position","count","BufferAttribute","uv","index","Uint16Array","copyArray","needsUpdate","setAttribute","setIndex","computeBoundingSphere","computeBoundingBox","advance","vertexShader","fragmentShader","MeshLineMaterial","ShaderMaterial","parameters","uniforms","UniformsLib","fog","lineWidth","useMap","alphaMap","useAlphaMap","color","Color","opacity","resolution","sizeAttenuation","dashArray","dashOffset","dashRatio","useDash","visibility","alphaTest","repeat","type","copy","setValues","source","raycast","raycaster","intersects","inverseMatrix","ray","Ray","sphere","Sphere","interRay","geometry","boundingSphere","applyMatrix4","intersectSphere","invert","vStart","vEnd","interSegment","step","LineSegments","attributes","indices","widths","fromArray","Math","floor","precision","params","Line","threshold","material","precisionSq","distSq","distanceSqToSegment","distance","origin","distanceTo","near","far","point","clone","face","faceIndex","object"],"sources":["/home/rodrigorvsn/workspace/study/threejs-journey/07-react-three-fiber/08-mouse-events-with-r3f/node_modules/meshline/dist/index.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport * as THREE from \"three\";\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\n  let i;\n  src = src.subarray || src.slice ? src : src.buffer;\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\n  src = srcOffset ? src.subarray ? src.subarray(srcOffset, length && srcOffset + length) : src.slice(srcOffset, length && srcOffset + length) : src;\n  if (dst.set) {\n    dst.set(src, dstOffset);\n  } else {\n    for (i = 0; i < src.length; i++)\n      dst[i + dstOffset] = src[i];\n  }\n  return dst;\n}\nfunction convertPoints(points) {\n  if (points instanceof Float32Array)\n    return points;\n  if (points instanceof THREE.BufferGeometry)\n    return points.getAttribute(\"position\").array;\n  return points.map((p) => {\n    const isArray = Array.isArray(p);\n    return p instanceof THREE.Vector3 ? [p.x, p.y, p.z] : p instanceof THREE.Vector2 ? [p.x, p.y, 0] : isArray && p.length === 3 ? [p[0], p[1], p[2]] : isArray && p.length === 2 ? [p[0], p[1], 0] : p;\n  }).flat();\n}\nclass MeshLineGeometry extends THREE.BufferGeometry {\n  constructor() {\n    super();\n    __publicField(this, \"type\", \"MeshLine\");\n    __publicField(this, \"isMeshLine\", true);\n    __publicField(this, \"positions\", []);\n    __publicField(this, \"previous\", []);\n    __publicField(this, \"next\", []);\n    __publicField(this, \"side\", []);\n    __publicField(this, \"width\", []);\n    __publicField(this, \"indices_array\", []);\n    __publicField(this, \"uvs\", []);\n    __publicField(this, \"counters\", []);\n    __publicField(this, \"widthCallback\", null);\n    __publicField(this, \"_attributes\");\n    __publicField(this, \"_points\", []);\n    __publicField(this, \"points\");\n    __publicField(this, \"matrixWorld\", new THREE.Matrix4());\n    Object.defineProperties(this, {\n      points: {\n        enumerable: true,\n        get() {\n          return this._points;\n        },\n        set(value) {\n          this.setPoints(value, this.widthCallback);\n        }\n      }\n    });\n  }\n  setMatrixWorld(matrixWorld) {\n    this.matrixWorld = matrixWorld;\n  }\n  setPoints(points, wcb) {\n    points = convertPoints(points);\n    this._points = points;\n    this.widthCallback = wcb != null ? wcb : null;\n    this.positions = [];\n    this.counters = [];\n    if (points.length && points[0] instanceof THREE.Vector3) {\n      for (let j = 0; j < points.length; j++) {\n        const p = points[j];\n        const c = j / (points.length - 1);\n        this.positions.push(p.x, p.y, p.z);\n        this.positions.push(p.x, p.y, p.z);\n        this.counters.push(c);\n        this.counters.push(c);\n      }\n    } else {\n      for (let j = 0; j < points.length; j += 3) {\n        const c = j / (points.length - 1);\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\n        this.counters.push(c);\n        this.counters.push(c);\n      }\n    }\n    this.process();\n  }\n  compareV3(a, b) {\n    const aa = a * 6;\n    const ab = b * 6;\n    return this.positions[aa] === this.positions[ab] && this.positions[aa + 1] === this.positions[ab + 1] && this.positions[aa + 2] === this.positions[ab + 2];\n  }\n  copyV3(a) {\n    const aa = a * 6;\n    return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\n  }\n  process() {\n    const l = this.positions.length / 6;\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.width = [];\n    this.indices_array = [];\n    this.uvs = [];\n    let w;\n    let v;\n    if (this.compareV3(0, l - 1)) {\n      v = this.copyV3(l - 2);\n    } else {\n      v = this.copyV3(0);\n    }\n    this.previous.push(v[0], v[1], v[2]);\n    this.previous.push(v[0], v[1], v[2]);\n    for (let j = 0; j < l; j++) {\n      this.side.push(1);\n      this.side.push(-1);\n      if (this.widthCallback)\n        w = this.widthCallback(j / (l - 1));\n      else\n        w = 1;\n      this.width.push(w);\n      this.width.push(w);\n      this.uvs.push(j / (l - 1), 0);\n      this.uvs.push(j / (l - 1), 1);\n      if (j < l - 1) {\n        v = this.copyV3(j);\n        this.previous.push(v[0], v[1], v[2]);\n        this.previous.push(v[0], v[1], v[2]);\n        const n = j * 2;\n        this.indices_array.push(n, n + 1, n + 2);\n        this.indices_array.push(n + 2, n + 1, n + 3);\n      }\n      if (j > 0) {\n        v = this.copyV3(j);\n        this.next.push(v[0], v[1], v[2]);\n        this.next.push(v[0], v[1], v[2]);\n      }\n    }\n    if (this.compareV3(l - 1, 0)) {\n      v = this.copyV3(1);\n    } else {\n      v = this.copyV3(l - 1);\n    }\n    this.next.push(v[0], v[1], v[2]);\n    this.next.push(v[0], v[1], v[2]);\n    if (!this._attributes || this._attributes.position.count !== this.positions.length) {\n      this._attributes = {\n        position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\n        next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\n        side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\n        width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\n        uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\n        index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\n        counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\n      };\n    } else {\n      this._attributes.position.copyArray(new Float32Array(this.positions));\n      this._attributes.position.needsUpdate = true;\n      this._attributes.previous.copyArray(new Float32Array(this.previous));\n      this._attributes.previous.needsUpdate = true;\n      this._attributes.next.copyArray(new Float32Array(this.next));\n      this._attributes.next.needsUpdate = true;\n      this._attributes.side.copyArray(new Float32Array(this.side));\n      this._attributes.side.needsUpdate = true;\n      this._attributes.width.copyArray(new Float32Array(this.width));\n      this._attributes.width.needsUpdate = true;\n      this._attributes.uv.copyArray(new Float32Array(this.uvs));\n      this._attributes.uv.needsUpdate = true;\n      this._attributes.index.copyArray(new Uint16Array(this.indices_array));\n      this._attributes.index.needsUpdate = true;\n    }\n    this.setAttribute(\"position\", this._attributes.position);\n    this.setAttribute(\"previous\", this._attributes.previous);\n    this.setAttribute(\"next\", this._attributes.next);\n    this.setAttribute(\"side\", this._attributes.side);\n    this.setAttribute(\"width\", this._attributes.width);\n    this.setAttribute(\"uv\", this._attributes.uv);\n    this.setAttribute(\"counters\", this._attributes.counters);\n    this.setAttribute(\"position\", this._attributes.position);\n    this.setAttribute(\"previous\", this._attributes.previous);\n    this.setAttribute(\"next\", this._attributes.next);\n    this.setAttribute(\"side\", this._attributes.side);\n    this.setAttribute(\"width\", this._attributes.width);\n    this.setAttribute(\"uv\", this._attributes.uv);\n    this.setAttribute(\"counters\", this._attributes.counters);\n    this.setIndex(this._attributes.index);\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  }\n  advance({ x, y, z }) {\n    const positions = this._attributes.position.array;\n    const previous = this._attributes.previous.array;\n    const next = this._attributes.next.array;\n    const l = positions.length;\n    memcpy(positions, 0, previous, 0, l);\n    memcpy(positions, 6, positions, 0, l - 6);\n    positions[l - 6] = x;\n    positions[l - 5] = y;\n    positions[l - 4] = z;\n    positions[l - 3] = x;\n    positions[l - 2] = y;\n    positions[l - 1] = z;\n    memcpy(positions, 6, next, 0, l - 6);\n    next[l - 6] = x;\n    next[l - 5] = y;\n    next[l - 4] = z;\n    next[l - 3] = x;\n    next[l - 2] = y;\n    next[l - 1] = z;\n    this._attributes.position.needsUpdate = true;\n    this._attributes.previous.needsUpdate = true;\n    this._attributes.next.needsUpdate = true;\n  }\n}\nconst vertexShader = `\n  #include <common>\n  #include <logdepthbuf_pars_vertex>\n  #include <fog_pars_vertex>\n\n  attribute vec3 previous;\n  attribute vec3 next;\n  attribute float side;\n  attribute float width;\n  attribute float counters;\n  \n  uniform vec2 resolution;\n  uniform float lineWidth;\n  uniform vec3 color;\n  uniform float opacity;\n  uniform float sizeAttenuation;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  \n  vec2 fix(vec4 i, float aspect) {\n    vec2 res = i.xy / i.w;\n    res.x *= aspect;\n  \tvCounters = counters;\n    return res;\n  }\n  \n  void main() {\n    float aspect = resolution.x / resolution.y;\n    vColor = vec4(color, opacity);\n    vUV = uv;\n  \n    mat4 m = projectionMatrix * modelViewMatrix;\n    vec4 finalPosition = m * vec4(position, 1.0);\n    vec4 prevPos = m * vec4(previous, 1.0);\n    vec4 nextPos = m * vec4(next, 1.0);\n  \n    vec2 currentP = fix(finalPosition, aspect);\n    vec2 prevP = fix(prevPos, aspect);\n    vec2 nextP = fix(nextPos, aspect);\n  \n    float w = lineWidth * width;\n  \n    vec2 dir;\n    if (nextP == currentP) dir = normalize(currentP - prevP);\n    else if (prevP == currentP) dir = normalize(nextP - currentP);\n    else {\n      vec2 dir1 = normalize(currentP - prevP);\n      vec2 dir2 = normalize(nextP - currentP);\n      dir = normalize(dir1 + dir2);\n  \n      vec2 perp = vec2(-dir1.y, dir1.x);\n      vec2 miter = vec2(-dir.y, dir.x);\n      //w = clamp(w / dot(miter, perp), 0., 4. * lineWidth * width);\n    }\n  \n    //vec2 normal = (cross(vec3(dir, 0.), vec3(0., 0., 1.))).xy;\n    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);\n    normal.xy *= .5 * w;\n    //normal *= projectionMatrix;\n    if (sizeAttenuation == 0.) {\n      normal.xy *= finalPosition.w;\n      normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy;\n    }\n  \n    finalPosition.xy += normal.xy * side;\n    gl_Position = finalPosition;\n    #include <logdepthbuf_vertex>\n    #include <fog_vertex>\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    #include <fog_vertex>\n  }\n`;\nconst fragmentShader = `\n  #include <fog_pars_fragment>\n  #include <logdepthbuf_pars_fragment>\n  \n  uniform sampler2D map;\n  uniform sampler2D alphaMap;\n  uniform float useMap;\n  uniform float useAlphaMap;\n  uniform float useDash;\n  uniform float dashArray;\n  uniform float dashOffset;\n  uniform float dashRatio;\n  uniform float visibility;\n  uniform float alphaTest;\n  uniform vec2 repeat;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  \n  void main() {\n    #include <logdepthbuf_fragment>\n    vec4 c = vColor;\n    if (useMap == 1.) c *= texture2D(map, vUV * repeat);\n    if (useAlphaMap == 1.) c.a *= texture2D(alphaMap, vUV * repeat).a;\n    if (c.a < alphaTest) discard;\n    if (useDash == 1.) {\n      c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\n    }\n    gl_FragColor = c;\n    gl_FragColor.a *= step(vCounters, visibility);\n    #include <fog_fragment>\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n  }\n`;\nclass MeshLineMaterial extends THREE.ShaderMaterial {\n  constructor(parameters) {\n    super({\n      uniforms: {\n        ...THREE.UniformsLib.fog,\n        lineWidth: { value: 1 },\n        map: { value: null },\n        useMap: { value: 0 },\n        alphaMap: { value: null },\n        useAlphaMap: { value: 0 },\n        color: { value: new THREE.Color(16777215) },\n        opacity: { value: 1 },\n        resolution: { value: new THREE.Vector2(1, 1) },\n        sizeAttenuation: { value: 1 },\n        dashArray: { value: 0 },\n        dashOffset: { value: 0 },\n        dashRatio: { value: 0.5 },\n        useDash: { value: 0 },\n        visibility: { value: 1 },\n        alphaTest: { value: 0 },\n        repeat: { value: new THREE.Vector2(1, 1) }\n      },\n      vertexShader,\n      fragmentShader\n    });\n    __publicField(this, \"lineWidth\");\n    __publicField(this, \"map\");\n    __publicField(this, \"useMap\");\n    __publicField(this, \"alphaMap\");\n    __publicField(this, \"useAlphaMap\");\n    __publicField(this, \"color\");\n    __publicField(this, \"resolution\");\n    __publicField(this, \"sizeAttenuation\");\n    __publicField(this, \"dashArray\");\n    __publicField(this, \"dashOffset\");\n    __publicField(this, \"dashRatio\");\n    __publicField(this, \"useDash\");\n    __publicField(this, \"visibility\");\n    __publicField(this, \"repeat\");\n    this.type = \"MeshLineMaterial\";\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get() {\n          return this.uniforms.lineWidth.value;\n        },\n        set(value) {\n          this.uniforms.lineWidth.value = value;\n        }\n      },\n      map: {\n        enumerable: true,\n        get() {\n          return this.uniforms.map.value;\n        },\n        set(value) {\n          this.uniforms.map.value = value;\n        }\n      },\n      useMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useMap.value;\n        },\n        set(value) {\n          this.uniforms.useMap.value = value;\n        }\n      },\n      alphaMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.alphaMap.value;\n        },\n        set(value) {\n          this.uniforms.alphaMap.value = value;\n        }\n      },\n      useAlphaMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useAlphaMap.value;\n        },\n        set(value) {\n          this.uniforms.useAlphaMap.value = value;\n        }\n      },\n      color: {\n        enumerable: true,\n        get() {\n          return this.uniforms.color.value;\n        },\n        set(value) {\n          this.uniforms.color.value = value;\n        }\n      },\n      opacity: {\n        enumerable: true,\n        get() {\n          return this.uniforms.opacity.value;\n        },\n        set(value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      resolution: {\n        enumerable: true,\n        get() {\n          return this.uniforms.resolution.value;\n        },\n        set(value) {\n          this.uniforms.resolution.value.copy(value);\n        }\n      },\n      sizeAttenuation: {\n        enumerable: true,\n        get() {\n          return this.uniforms.sizeAttenuation.value;\n        },\n        set(value) {\n          this.uniforms.sizeAttenuation.value = value;\n        }\n      },\n      dashArray: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashArray.value;\n        },\n        set(value) {\n          this.uniforms.dashArray.value = value;\n          this.useDash = value !== 0 ? 1 : 0;\n        }\n      },\n      dashOffset: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashOffset.value;\n        },\n        set(value) {\n          this.uniforms.dashOffset.value = value;\n        }\n      },\n      dashRatio: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashRatio.value;\n        },\n        set(value) {\n          this.uniforms.dashRatio.value = value;\n        }\n      },\n      useDash: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useDash.value;\n        },\n        set(value) {\n          this.uniforms.useDash.value = value;\n        }\n      },\n      visibility: {\n        enumerable: true,\n        get() {\n          return this.uniforms.visibility.value;\n        },\n        set(value) {\n          this.uniforms.visibility.value = value;\n        }\n      },\n      alphaTest: {\n        enumerable: true,\n        get() {\n          return this.uniforms.alphaTest.value;\n        },\n        set(value) {\n          this.uniforms.alphaTest.value = value;\n        }\n      },\n      repeat: {\n        enumerable: true,\n        get() {\n          return this.uniforms.repeat.value;\n        },\n        set(value) {\n          this.uniforms.repeat.value.copy(value);\n        }\n      }\n    });\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.lineWidth = source.lineWidth;\n    this.map = source.map;\n    this.useMap = source.useMap;\n    this.alphaMap = source.alphaMap;\n    this.useAlphaMap = source.useAlphaMap;\n    this.color.copy(source.color);\n    this.opacity = source.opacity;\n    this.resolution.copy(source.resolution);\n    this.sizeAttenuation = source.sizeAttenuation;\n    this.dashArray = source.dashArray;\n    this.dashOffset = source.dashOffset;\n    this.dashRatio = source.dashRatio;\n    this.useDash = source.useDash;\n    this.visibility = source.visibility;\n    this.alphaTest = source.alphaTest;\n    this.repeat.copy(source.repeat);\n    return this;\n  }\n}\nfunction raycast(raycaster, intersects) {\n  const inverseMatrix = new THREE.Matrix4();\n  const ray = new THREE.Ray();\n  const sphere = new THREE.Sphere();\n  const interRay = new THREE.Vector3();\n  const geometry = this.geometry;\n  sphere.copy(geometry.boundingSphere);\n  sphere.applyMatrix4(this.matrixWorld);\n  if (!raycaster.ray.intersectSphere(sphere, interRay))\n    return;\n  inverseMatrix.copy(this.matrixWorld).invert();\n  ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n  const vStart = new THREE.Vector3();\n  const vEnd = new THREE.Vector3();\n  const interSegment = new THREE.Vector3();\n  const step = this instanceof THREE.LineSegments ? 2 : 1;\n  const index = geometry.index;\n  const attributes = geometry.attributes;\n  if (index !== null) {\n    const indices = index.array;\n    const positions = attributes.position.array;\n    const widths = attributes.width.array;\n    for (let i = 0, l = indices.length - 1; i < l; i += step) {\n      const a = indices[i];\n      const b = indices[i + 1];\n      vStart.fromArray(positions, a * 3);\n      vEnd.fromArray(positions, b * 3);\n      const width = widths[Math.floor(i / 3)] != void 0 ? widths[Math.floor(i / 3)] : 1;\n      const precision = raycaster.params.Line.threshold + this.material.lineWidth * width / 2;\n      const precisionSq = precision * precision;\n      const distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n      if (distSq > precisionSq)\n        continue;\n      interRay.applyMatrix4(this.matrixWorld);\n      const distance = raycaster.ray.origin.distanceTo(interRay);\n      if (distance < raycaster.near || distance > raycaster.far)\n        continue;\n      intersects.push({\n        distance,\n        point: interSegment.clone().applyMatrix4(this.matrixWorld),\n        index: i,\n        face: null,\n        faceIndex: void 0,\n        object: this\n      });\n      i = l;\n    }\n  }\n}\nexport {\n  MeshLineGeometry,\n  MeshLineMaterial,\n  raycast\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}