{"ast":null,"code":"/**\n * @author Deepkolos / https://github.com/deepkolos\n */\nclass WorkerPool {\n  constructor() {\n    let pool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n    this.pool = pool;\n    this.queue = [];\n    this.workers = [];\n    this.workersResolve = [];\n    this.workerStatus = 0;\n  }\n\n  _initWorker(workerId) {\n    if (!this.workers[workerId]) {\n      const worker = this.workerCreator();\n      worker.addEventListener('message', this._onMessage.bind(this, workerId));\n      this.workers[workerId] = worker;\n    }\n  }\n\n  _getIdleWorker() {\n    for (let i = 0; i < this.pool; i++) if (!(this.workerStatus & 1 << i)) return i;\n\n    return -1;\n  }\n\n  _onMessage(workerId, msg) {\n    const resolve = this.workersResolve[workerId];\n    resolve && resolve(msg);\n\n    if (this.queue.length) {\n      const {\n        resolve,\n        msg,\n        transfer\n      } = this.queue.shift();\n      this.workersResolve[workerId] = resolve;\n      this.workers[workerId].postMessage(msg, transfer);\n    } else {\n      this.workerStatus ^= 1 << workerId;\n    }\n  }\n\n  setWorkerCreator(workerCreator) {\n    this.workerCreator = workerCreator;\n  }\n\n  setWorkerLimit(pool) {\n    this.pool = pool;\n  }\n\n  postMessage(msg, transfer) {\n    return new Promise(resolve => {\n      const workerId = this._getIdleWorker();\n\n      if (workerId !== -1) {\n        this._initWorker(workerId);\n\n        this.workerStatus |= 1 << workerId;\n        this.workersResolve[workerId] = resolve;\n        this.workers[workerId].postMessage(msg, transfer);\n      } else {\n        this.queue.push({\n          resolve,\n          msg,\n          transfer\n        });\n      }\n    });\n  }\n\n  dispose() {\n    this.workers.forEach(worker => worker.terminate());\n    this.workersResolve.length = 0;\n    this.workers.length = 0;\n    this.queue.length = 0;\n    this.workerStatus = 0;\n  }\n\n}\n\nexport { WorkerPool };","map":{"version":3,"names":["WorkerPool","constructor","pool","queue","workers","workersResolve","workerStatus","_initWorker","workerId","worker","workerCreator","addEventListener","_onMessage","bind","_getIdleWorker","i","msg","resolve","length","transfer","shift","postMessage","setWorkerCreator","setWorkerLimit","Promise","push","dispose","forEach","terminate"],"sources":["/home/rodrigorvsn/workspace/study/threejs-journey/07-react-three-fiber/08-mouse-events-with-r3f/node_modules/three-stdlib/utils/WorkerPool.js"],"sourcesContent":["/**\n * @author Deepkolos / https://github.com/deepkolos\n */\nclass WorkerPool {\n  constructor(pool = 4) {\n    this.pool = pool;\n    this.queue = [];\n    this.workers = [];\n    this.workersResolve = [];\n    this.workerStatus = 0;\n  }\n\n  _initWorker(workerId) {\n    if (!this.workers[workerId]) {\n      const worker = this.workerCreator();\n      worker.addEventListener('message', this._onMessage.bind(this, workerId));\n      this.workers[workerId] = worker;\n    }\n  }\n\n  _getIdleWorker() {\n    for (let i = 0; i < this.pool; i++) if (!(this.workerStatus & 1 << i)) return i;\n\n    return -1;\n  }\n\n  _onMessage(workerId, msg) {\n    const resolve = this.workersResolve[workerId];\n    resolve && resolve(msg);\n\n    if (this.queue.length) {\n      const {\n        resolve,\n        msg,\n        transfer\n      } = this.queue.shift();\n      this.workersResolve[workerId] = resolve;\n      this.workers[workerId].postMessage(msg, transfer);\n    } else {\n      this.workerStatus ^= 1 << workerId;\n    }\n  }\n\n  setWorkerCreator(workerCreator) {\n    this.workerCreator = workerCreator;\n  }\n\n  setWorkerLimit(pool) {\n    this.pool = pool;\n  }\n\n  postMessage(msg, transfer) {\n    return new Promise(resolve => {\n      const workerId = this._getIdleWorker();\n\n      if (workerId !== -1) {\n        this._initWorker(workerId);\n\n        this.workerStatus |= 1 << workerId;\n        this.workersResolve[workerId] = resolve;\n        this.workers[workerId].postMessage(msg, transfer);\n      } else {\n        this.queue.push({\n          resolve,\n          msg,\n          transfer\n        });\n      }\n    });\n  }\n\n  dispose() {\n    this.workers.forEach(worker => worker.terminate());\n    this.workersResolve.length = 0;\n    this.workers.length = 0;\n    this.queue.length = 0;\n    this.workerStatus = 0;\n  }\n\n}\n\nexport { WorkerPool };\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,UAAN,CAAiB;EACfC,WAAW,GAAW;IAAA,IAAVC,IAAU,uEAAH,CAAG;IACpB,KAAKA,IAAL,GAAYA,IAAZ;IACA,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKC,OAAL,GAAe,EAAf;IACA,KAAKC,cAAL,GAAsB,EAAtB;IACA,KAAKC,YAAL,GAAoB,CAApB;EACD;;EAEDC,WAAW,CAACC,QAAD,EAAW;IACpB,IAAI,CAAC,KAAKJ,OAAL,CAAaI,QAAb,CAAL,EAA6B;MAC3B,MAAMC,MAAM,GAAG,KAAKC,aAAL,EAAf;MACAD,MAAM,CAACE,gBAAP,CAAwB,SAAxB,EAAmC,KAAKC,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,EAA2BL,QAA3B,CAAnC;MACA,KAAKJ,OAAL,CAAaI,QAAb,IAAyBC,MAAzB;IACD;EACF;;EAEDK,cAAc,GAAG;IACf,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKb,IAAzB,EAA+Ba,CAAC,EAAhC,EAAoC,IAAI,EAAE,KAAKT,YAAL,GAAoB,KAAKS,CAA3B,CAAJ,EAAmC,OAAOA,CAAP;;IAEvE,OAAO,CAAC,CAAR;EACD;;EAEDH,UAAU,CAACJ,QAAD,EAAWQ,GAAX,EAAgB;IACxB,MAAMC,OAAO,GAAG,KAAKZ,cAAL,CAAoBG,QAApB,CAAhB;IACAS,OAAO,IAAIA,OAAO,CAACD,GAAD,CAAlB;;IAEA,IAAI,KAAKb,KAAL,CAAWe,MAAf,EAAuB;MACrB,MAAM;QACJD,OADI;QAEJD,GAFI;QAGJG;MAHI,IAIF,KAAKhB,KAAL,CAAWiB,KAAX,EAJJ;MAKA,KAAKf,cAAL,CAAoBG,QAApB,IAAgCS,OAAhC;MACA,KAAKb,OAAL,CAAaI,QAAb,EAAuBa,WAAvB,CAAmCL,GAAnC,EAAwCG,QAAxC;IACD,CARD,MAQO;MACL,KAAKb,YAAL,IAAqB,KAAKE,QAA1B;IACD;EACF;;EAEDc,gBAAgB,CAACZ,aAAD,EAAgB;IAC9B,KAAKA,aAAL,GAAqBA,aAArB;EACD;;EAEDa,cAAc,CAACrB,IAAD,EAAO;IACnB,KAAKA,IAAL,GAAYA,IAAZ;EACD;;EAEDmB,WAAW,CAACL,GAAD,EAAMG,QAAN,EAAgB;IACzB,OAAO,IAAIK,OAAJ,CAAYP,OAAO,IAAI;MAC5B,MAAMT,QAAQ,GAAG,KAAKM,cAAL,EAAjB;;MAEA,IAAIN,QAAQ,KAAK,CAAC,CAAlB,EAAqB;QACnB,KAAKD,WAAL,CAAiBC,QAAjB;;QAEA,KAAKF,YAAL,IAAqB,KAAKE,QAA1B;QACA,KAAKH,cAAL,CAAoBG,QAApB,IAAgCS,OAAhC;QACA,KAAKb,OAAL,CAAaI,QAAb,EAAuBa,WAAvB,CAAmCL,GAAnC,EAAwCG,QAAxC;MACD,CAND,MAMO;QACL,KAAKhB,KAAL,CAAWsB,IAAX,CAAgB;UACdR,OADc;UAEdD,GAFc;UAGdG;QAHc,CAAhB;MAKD;IACF,CAhBM,CAAP;EAiBD;;EAEDO,OAAO,GAAG;IACR,KAAKtB,OAAL,CAAauB,OAAb,CAAqBlB,MAAM,IAAIA,MAAM,CAACmB,SAAP,EAA/B;IACA,KAAKvB,cAAL,CAAoBa,MAApB,GAA6B,CAA7B;IACA,KAAKd,OAAL,CAAac,MAAb,GAAsB,CAAtB;IACA,KAAKf,KAAL,CAAWe,MAAX,GAAoB,CAApB;IACA,KAAKZ,YAAL,GAAoB,CAApB;EACD;;AA1Ec;;AA8EjB,SAASN,UAAT"},"metadata":{},"sourceType":"module"}