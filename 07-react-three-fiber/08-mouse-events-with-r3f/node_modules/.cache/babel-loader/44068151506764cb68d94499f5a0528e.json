{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CatmullRomCurve3, Color } from 'three';\nimport { Line } from './Line.js';\nconst CatmullRomLine = /*#__PURE__*/React.forwardRef(function CatmullRomLine(_ref, ref) {\n  let {\n    points,\n    closed = false,\n    curveType = 'centripetal',\n    tension = 0.5,\n    segments = 20,\n    vertexColors,\n    ...rest\n  } = _ref;\n  const curve = React.useMemo(() => {\n    const mappedPoints = points.map(pt => pt instanceof Vector3 ? pt : new Vector3(...pt));\n    return new CatmullRomCurve3(mappedPoints, closed, curveType, tension);\n  }, [points, closed, curveType, tension]);\n  const segmentedPoints = React.useMemo(() => curve.getPoints(segments), [curve, segments]);\n  const interpolatedVertexColors = React.useMemo(() => {\n    if (!vertexColors || vertexColors.length < 2) return undefined;\n    if (vertexColors.length === segments + 1) return vertexColors;\n    const mappedColors = vertexColors.map(color => color instanceof Color ? color : new Color(...color));\n    if (closed) mappedColors.push(mappedColors[0].clone());\n    const iColors = [mappedColors[0]];\n    const divisions = segments / (mappedColors.length - 1);\n\n    for (let i = 1; i < segments; i++) {\n      const alpha = i % divisions / divisions;\n      const colorIndex = Math.floor(i / divisions);\n      iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha));\n    }\n\n    iColors.push(mappedColors[mappedColors.length - 1]);\n    return iColors;\n  }, [vertexColors, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: segmentedPoints,\n    vertexColors: interpolatedVertexColors\n  }, rest));\n});\nexport { CatmullRomLine };","map":{"version":3,"names":["_extends","React","Vector3","CatmullRomCurve3","Color","Line","CatmullRomLine","forwardRef","ref","points","closed","curveType","tension","segments","vertexColors","rest","curve","useMemo","mappedPoints","map","pt","segmentedPoints","getPoints","interpolatedVertexColors","length","undefined","mappedColors","color","push","clone","iColors","divisions","i","alpha","colorIndex","Math","floor","lerp","createElement"],"sources":["/home/rodrigorvsn/workspace/study/threejs-journey/07-react-three-fiber/08-mouse-events-with-r3f/node_modules/@react-three/drei/core/CatmullRomLine.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CatmullRomCurve3, Color } from 'three';\nimport { Line } from './Line.js';\n\nconst CatmullRomLine = /*#__PURE__*/React.forwardRef(function CatmullRomLine({\n  points,\n  closed = false,\n  curveType = 'centripetal',\n  tension = 0.5,\n  segments = 20,\n  vertexColors,\n  ...rest\n}, ref) {\n  const curve = React.useMemo(() => {\n    const mappedPoints = points.map(pt => pt instanceof Vector3 ? pt : new Vector3(...pt));\n    return new CatmullRomCurve3(mappedPoints, closed, curveType, tension);\n  }, [points, closed, curveType, tension]);\n  const segmentedPoints = React.useMemo(() => curve.getPoints(segments), [curve, segments]);\n  const interpolatedVertexColors = React.useMemo(() => {\n    if (!vertexColors || vertexColors.length < 2) return undefined;\n    if (vertexColors.length === segments + 1) return vertexColors;\n    const mappedColors = vertexColors.map(color => color instanceof Color ? color : new Color(...color));\n    if (closed) mappedColors.push(mappedColors[0].clone());\n    const iColors = [mappedColors[0]];\n    const divisions = segments / (mappedColors.length - 1);\n\n    for (let i = 1; i < segments; i++) {\n      const alpha = i % divisions / divisions;\n      const colorIndex = Math.floor(i / divisions);\n      iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha));\n    }\n\n    iColors.push(mappedColors[mappedColors.length - 1]);\n    return iColors;\n  }, [vertexColors, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: segmentedPoints,\n    vertexColors: interpolatedVertexColors\n  }, rest));\n});\n\nexport { CatmullRomLine };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}