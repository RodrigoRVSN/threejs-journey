{"ast":null,"code":"import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, createPortal, useFrame } from '@react-three/fiber';\n\nconst isOrthographicCamera = def => def && def.isOrthographicCamera;\n\nconst col = new THREE.Color();\n/**\n * In `@react-three/fiber` after `v8.0.0` but prior to `v8.1.0`, `state.size` contained only dimension\n * information. After `v8.1.0`, position information (`top`, `left`) was added\n *\n * @todo remove this when drei supports v9 and up\n */\n\nfunction isNonLegacyCanvasSize(size) {\n  return 'top' in size;\n}\n\nfunction computeContainerPosition(canvasSize, trackRect) {\n  const {\n    right,\n    top,\n    left: trackLeft,\n    bottom: trackBottom,\n    width,\n    height\n  } = trackRect;\n  const isOffscreen = trackRect.bottom < 0 || top > canvasSize.height || right < 0 || trackRect.left > canvasSize.width;\n\n  if (isNonLegacyCanvasSize(canvasSize)) {\n    const canvasBottom = canvasSize.top + canvasSize.height;\n    const bottom = canvasBottom - trackBottom;\n    const left = trackLeft - canvasSize.left;\n    return {\n      position: {\n        width,\n        height,\n        left,\n        top,\n        bottom,\n        right\n      },\n      isOffscreen\n    };\n  } // Fall back on old behavior if r3f < 8.1.0\n\n\n  const bottom = canvasSize.height - trackBottom;\n  return {\n    position: {\n      width,\n      height,\n      top,\n      left: trackLeft,\n      bottom,\n      right\n    },\n    isOffscreen\n  };\n}\n\nfunction Container(_ref) {\n  let {\n    canvasSize,\n    scene,\n    index,\n    children,\n    frames,\n    rect,\n    track\n  } = _ref;\n  const get = useThree(state => state.get);\n  const camera = useThree(state => state.camera);\n  const virtualScene = useThree(state => state.scene);\n  const setEvents = useThree(state => state.setEvents);\n  let frameCount = 0;\n  useFrame(state => {\n    if (frames === Infinity || frameCount <= frames) {\n      var _track$current;\n\n      rect.current = (_track$current = track.current) == null ? void 0 : _track$current.getBoundingClientRect();\n      frameCount++;\n    }\n\n    if (rect.current) {\n      const {\n        position: {\n          left,\n          bottom,\n          width,\n          height\n        },\n        isOffscreen\n      } = computeContainerPosition(canvasSize, rect.current);\n      const aspect = width / height;\n\n      if (isOrthographicCamera(camera)) {\n        if (camera.left !== width / -2 || camera.right !== width / 2 || camera.top !== height / 2 || camera.bottom !== height / -2) {\n          Object.assign(camera, {\n            left: width / -2,\n            right: width / 2,\n            top: height / 2,\n            bottom: height / -2\n          });\n          camera.updateProjectionMatrix();\n        }\n      } else if (camera.aspect !== aspect) {\n        camera.aspect = aspect;\n        camera.updateProjectionMatrix();\n      }\n\n      state.gl.setViewport(left, bottom, width, height);\n      state.gl.setScissor(left, bottom, width, height);\n      state.gl.setScissorTest(true);\n\n      if (isOffscreen) {\n        state.gl.getClearColor(col);\n        state.gl.setClearColor(col, state.gl.getClearAlpha());\n        state.gl.clear(true, true);\n        return;\n      } // When children are present render the portalled scene, otherwise the default scene\n\n\n      state.gl.render(children ? virtualScene : scene, camera);\n    }\n  }, index);\n  React.useEffect(() => {\n    // Connect the event layer to the tracking element\n    const old = get().events.connected;\n    setEvents({\n      connected: track.current\n    });\n    return () => setEvents({\n      connected: old\n    });\n  }, []);\n  React.useEffect(() => {\n    if (isNonLegacyCanvasSize(canvasSize)) {\n      return;\n    }\n\n    console.warn('Detected @react-three/fiber canvas size does not include position information. <View /> may not work as expected. ' + 'Upgrade to @react-three/fiber ^8.1.0 for support.\\n See https://github.com/pmndrs/drei/issues/944');\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n}\n\nconst View = _ref2 => {\n  let {\n    track,\n    index = 1,\n    frames = Infinity,\n    children\n  } = _ref2;\n  const rect = React.useRef(null);\n  const {\n    size,\n    scene\n  } = useThree();\n  const [virtualScene] = React.useState(() => new THREE.Scene());\n  const compute = React.useCallback((event, state) => {\n    if (track.current && event.target === track.current) {\n      const {\n        width,\n        height,\n        left,\n        top\n      } = rect.current;\n      const x = event.clientX - left;\n      const y = event.clientY - top;\n      state.pointer.set(x / width * 2 - 1, -(y / height) * 2 + 1);\n      state.raycaster.setFromCamera(state.pointer, state.camera);\n    }\n  }, [rect]);\n  const [ready, toggle] = React.useReducer(() => true, false);\n  React.useEffect(() => {\n    var _track$current2; // We need the tracking elements bounds beforehand in order to inject it into the portal\n\n\n    rect.current = (_track$current2 = track.current) == null ? void 0 : _track$current2.getBoundingClientRect(); // And now we can proceed\n\n    toggle();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, ready && createPortal( /*#__PURE__*/React.createElement(Container, {\n    canvasSize: size,\n    frames: frames,\n    scene: scene,\n    track: track,\n    rect: rect,\n    index: index\n  }, children), virtualScene, {\n    events: {\n      compute,\n      priority: index\n    },\n    size: {\n      width: rect.current.width,\n      height: rect.current.height\n    }\n  }));\n};\n\nexport { View };","map":{"version":3,"names":["React","THREE","useThree","createPortal","useFrame","isOrthographicCamera","def","col","Color","isNonLegacyCanvasSize","size","computeContainerPosition","canvasSize","trackRect","right","top","left","trackLeft","bottom","trackBottom","width","height","isOffscreen","canvasBottom","position","Container","scene","index","children","frames","rect","track","get","state","camera","virtualScene","setEvents","frameCount","Infinity","_track$current","current","getBoundingClientRect","aspect","Object","assign","updateProjectionMatrix","gl","setViewport","setScissor","setScissorTest","getClearColor","setClearColor","getClearAlpha","clear","render","useEffect","old","events","connected","console","warn","createElement","Fragment","View","useRef","useState","Scene","compute","useCallback","event","target","x","clientX","y","clientY","pointer","set","raycaster","setFromCamera","ready","toggle","useReducer","_track$current2","priority"],"sources":["/home/rodrigorvsn/workspace/study/threejs-journey/07-react-three-fiber/08-mouse-events-with-r3f/node_modules/@react-three/drei/web/View.js"],"sourcesContent":["import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, createPortal, useFrame } from '@react-three/fiber';\n\nconst isOrthographicCamera = def => def && def.isOrthographicCamera;\n\nconst col = new THREE.Color();\n/**\n * In `@react-three/fiber` after `v8.0.0` but prior to `v8.1.0`, `state.size` contained only dimension\n * information. After `v8.1.0`, position information (`top`, `left`) was added\n *\n * @todo remove this when drei supports v9 and up\n */\n\nfunction isNonLegacyCanvasSize(size) {\n  return 'top' in size;\n}\n\nfunction computeContainerPosition(canvasSize, trackRect) {\n  const {\n    right,\n    top,\n    left: trackLeft,\n    bottom: trackBottom,\n    width,\n    height\n  } = trackRect;\n  const isOffscreen = trackRect.bottom < 0 || top > canvasSize.height || right < 0 || trackRect.left > canvasSize.width;\n\n  if (isNonLegacyCanvasSize(canvasSize)) {\n    const canvasBottom = canvasSize.top + canvasSize.height;\n    const bottom = canvasBottom - trackBottom;\n    const left = trackLeft - canvasSize.left;\n    return {\n      position: {\n        width,\n        height,\n        left,\n        top,\n        bottom,\n        right\n      },\n      isOffscreen\n    };\n  } // Fall back on old behavior if r3f < 8.1.0\n\n\n  const bottom = canvasSize.height - trackBottom;\n  return {\n    position: {\n      width,\n      height,\n      top,\n      left: trackLeft,\n      bottom,\n      right\n    },\n    isOffscreen\n  };\n}\n\nfunction Container({\n  canvasSize,\n  scene,\n  index,\n  children,\n  frames,\n  rect,\n  track\n}) {\n  const get = useThree(state => state.get);\n  const camera = useThree(state => state.camera);\n  const virtualScene = useThree(state => state.scene);\n  const setEvents = useThree(state => state.setEvents);\n  let frameCount = 0;\n  useFrame(state => {\n    if (frames === Infinity || frameCount <= frames) {\n      var _track$current;\n\n      rect.current = (_track$current = track.current) == null ? void 0 : _track$current.getBoundingClientRect();\n      frameCount++;\n    }\n\n    if (rect.current) {\n      const {\n        position: {\n          left,\n          bottom,\n          width,\n          height\n        },\n        isOffscreen\n      } = computeContainerPosition(canvasSize, rect.current);\n      const aspect = width / height;\n\n      if (isOrthographicCamera(camera)) {\n        if (camera.left !== width / -2 || camera.right !== width / 2 || camera.top !== height / 2 || camera.bottom !== height / -2) {\n          Object.assign(camera, {\n            left: width / -2,\n            right: width / 2,\n            top: height / 2,\n            bottom: height / -2\n          });\n          camera.updateProjectionMatrix();\n        }\n      } else if (camera.aspect !== aspect) {\n        camera.aspect = aspect;\n        camera.updateProjectionMatrix();\n      }\n\n      state.gl.setViewport(left, bottom, width, height);\n      state.gl.setScissor(left, bottom, width, height);\n      state.gl.setScissorTest(true);\n\n      if (isOffscreen) {\n        state.gl.getClearColor(col);\n        state.gl.setClearColor(col, state.gl.getClearAlpha());\n        state.gl.clear(true, true);\n        return;\n      } // When children are present render the portalled scene, otherwise the default scene\n\n\n      state.gl.render(children ? virtualScene : scene, camera);\n    }\n  }, index);\n  React.useEffect(() => {\n    // Connect the event layer to the tracking element\n    const old = get().events.connected;\n    setEvents({\n      connected: track.current\n    });\n    return () => setEvents({\n      connected: old\n    });\n  }, []);\n  React.useEffect(() => {\n    if (isNonLegacyCanvasSize(canvasSize)) {\n      return;\n    }\n\n    console.warn('Detected @react-three/fiber canvas size does not include position information. <View /> may not work as expected. ' + 'Upgrade to @react-three/fiber ^8.1.0 for support.\\n See https://github.com/pmndrs/drei/issues/944');\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n}\n\nconst View = ({\n  track,\n  index = 1,\n  frames = Infinity,\n  children\n}) => {\n  const rect = React.useRef(null);\n  const {\n    size,\n    scene\n  } = useThree();\n  const [virtualScene] = React.useState(() => new THREE.Scene());\n  const compute = React.useCallback((event, state) => {\n    if (track.current && event.target === track.current) {\n      const {\n        width,\n        height,\n        left,\n        top\n      } = rect.current;\n      const x = event.clientX - left;\n      const y = event.clientY - top;\n      state.pointer.set(x / width * 2 - 1, -(y / height) * 2 + 1);\n      state.raycaster.setFromCamera(state.pointer, state.camera);\n    }\n  }, [rect]);\n  const [ready, toggle] = React.useReducer(() => true, false);\n  React.useEffect(() => {\n    var _track$current2;\n\n    // We need the tracking elements bounds beforehand in order to inject it into the portal\n    rect.current = (_track$current2 = track.current) == null ? void 0 : _track$current2.getBoundingClientRect(); // And now we can proceed\n\n    toggle();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, ready && createPortal( /*#__PURE__*/React.createElement(Container, {\n    canvasSize: size,\n    frames: frames,\n    scene: scene,\n    track: track,\n    rect: rect,\n    index: index\n  }, children), virtualScene, {\n    events: {\n      compute,\n      priority: index\n    },\n    size: {\n      width: rect.current.width,\n      height: rect.current.height\n    }\n  }));\n};\n\nexport { View };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}