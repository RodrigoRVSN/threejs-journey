{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { UniformsUtils, Vector2, ShaderMaterial } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n/**\n * Simple underwater shader\n * \n \n parameters:\n tex: texture\n time: this should increase with time passing\n factor: to what degree will the shader distort the screen \n\n explaination:\n the shader is quite simple\n it chooses a center and start from there make pixels around it to \"swell\" then \"shrink\" then \"swell\"...\n this is of course nothing really similar to underwater scene\n but you can combine several this shaders together to create the effect you need...\n And yes, this shader could be used for something other than underwater effect, for example, magnifier effect :)\n\n * @author vergil Wang\n */\n\nclass WaterPass extends Pass {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"material\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"factor\", void 0);\n\n    _defineProperty(this, \"time\", void 0);\n\n    _defineProperty(this, \"uniforms\", void 0);\n\n    this.uniforms = UniformsUtils.clone({\n      tex: {\n        value: null\n      },\n      time: {\n        value: 0.0\n      },\n      factor: {\n        value: 0.0\n      },\n      resolution: {\n        value: new Vector2(64, 64)\n      }\n    });\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: `\n      varying vec2 vUv;\n      void main(){  \n        vUv = uv; \n        vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n        gl_Position = projectionMatrix * modelViewPosition;\n      }`,\n      fragmentShader: `\n      uniform float time;\n      uniform float factor;\n      uniform vec2 resolution;\n      uniform sampler2D tex;\n      varying vec2 vUv;\n      void main() {  \n        vec2 uv1 = vUv;\n        vec2 uv = gl_FragCoord.xy/resolution.xy;\n        float frequency = 6.0 * factor;\n        float amplitude = 0.015 * factor;\n        float x = uv1.y * frequency + time * .7; \n        float y = uv1.x * frequency + time * .3;\n        uv1.x += cos(x+y) * amplitude * cos(y);\n        uv1.y += sin(x-y) * amplitude * cos(y);\n        vec4 rgba = texture2D(tex, uv1);\n        gl_FragColor = rgba;\n      }`\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n    this.factor = 0;\n    this.time = 0;\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms['tex'].value = readBuffer.texture;\n    this.uniforms['time'].value = this.time;\n    this.uniforms['factor'].value = this.factor;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n\n}\n\nexport { WaterPass };","map":{"version":3,"names":["_defineProperty","UniformsUtils","Vector2","ShaderMaterial","Pass","FullScreenQuad","WaterPass","constructor","uniforms","clone","tex","value","time","factor","resolution","material","vertexShader","fragmentShader","fsQuad","render","renderer","writeBuffer","readBuffer","texture","renderToScreen","setRenderTarget","clear"],"sources":["/home/rodrigorvsn/workspace/study/threejs-journey/07-react-three-fiber/08-mouse-events-with-r3f/node_modules/three-stdlib/postprocessing/WaterPass.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { UniformsUtils, Vector2, ShaderMaterial } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\n/**\n * Simple underwater shader\n * \n \n parameters:\n tex: texture\n time: this should increase with time passing\n factor: to what degree will the shader distort the screen \n\n explaination:\n the shader is quite simple\n it chooses a center and start from there make pixels around it to \"swell\" then \"shrink\" then \"swell\"...\n this is of course nothing really similar to underwater scene\n but you can combine several this shaders together to create the effect you need...\n And yes, this shader could be used for something other than underwater effect, for example, magnifier effect :)\n\n * @author vergil Wang\n */\n\nclass WaterPass extends Pass {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"material\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"factor\", void 0);\n\n    _defineProperty(this, \"time\", void 0);\n\n    _defineProperty(this, \"uniforms\", void 0);\n\n    this.uniforms = UniformsUtils.clone({\n      tex: {\n        value: null\n      },\n      time: {\n        value: 0.0\n      },\n      factor: {\n        value: 0.0\n      },\n      resolution: {\n        value: new Vector2(64, 64)\n      }\n    });\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: `\n      varying vec2 vUv;\n      void main(){  \n        vUv = uv; \n        vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n        gl_Position = projectionMatrix * modelViewPosition;\n      }`,\n      fragmentShader: `\n      uniform float time;\n      uniform float factor;\n      uniform vec2 resolution;\n      uniform sampler2D tex;\n      varying vec2 vUv;\n      void main() {  \n        vec2 uv1 = vUv;\n        vec2 uv = gl_FragCoord.xy/resolution.xy;\n        float frequency = 6.0 * factor;\n        float amplitude = 0.015 * factor;\n        float x = uv1.y * frequency + time * .7; \n        float y = uv1.x * frequency + time * .3;\n        uv1.x += cos(x+y) * amplitude * cos(y);\n        uv1.y += sin(x-y) * amplitude * cos(y);\n        vec4 rgba = texture2D(tex, uv1);\n        gl_FragColor = rgba;\n      }`\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n    this.factor = 0;\n    this.time = 0;\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms['tex'].value = readBuffer.texture;\n    this.uniforms['time'].value = this.time;\n    this.uniforms['factor'].value = this.factor;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n\n}\n\nexport { WaterPass };\n"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,SAASC,aAAT,EAAwBC,OAAxB,EAAiCC,cAAjC,QAAuD,OAAvD;AACA,SAASC,IAAT,EAAeC,cAAf,QAAqC,WAArC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAN,SAAwBF,IAAxB,CAA6B;EAC3BG,WAAW,GAAG;IACZ;;IAEAP,eAAe,CAAC,IAAD,EAAO,UAAP,EAAmB,KAAK,CAAxB,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,QAAP,EAAiB,KAAK,CAAtB,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,QAAP,EAAiB,KAAK,CAAtB,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,MAAP,EAAe,KAAK,CAApB,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,UAAP,EAAmB,KAAK,CAAxB,CAAf;;IAEA,KAAKQ,QAAL,GAAgBP,aAAa,CAACQ,KAAd,CAAoB;MAClCC,GAAG,EAAE;QACHC,KAAK,EAAE;MADJ,CAD6B;MAIlCC,IAAI,EAAE;QACJD,KAAK,EAAE;MADH,CAJ4B;MAOlCE,MAAM,EAAE;QACNF,KAAK,EAAE;MADD,CAP0B;MAUlCG,UAAU,EAAE;QACVH,KAAK,EAAE,IAAIT,OAAJ,CAAY,EAAZ,EAAgB,EAAhB;MADG;IAVsB,CAApB,CAAhB;IAcA,KAAKa,QAAL,GAAgB,IAAIZ,cAAJ,CAAmB;MACjCK,QAAQ,EAAE,KAAKA,QADkB;MAEjCQ,YAAY,EAAG;AACrB;AACA;AACA;AACA;AACA;AACA,QARuC;MASjCC,cAAc,EAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IA1BuC,CAAnB,CAAhB;IA4BA,KAAKC,MAAL,GAAc,IAAIb,cAAJ,CAAmB,KAAKU,QAAxB,CAAd;IACA,KAAKF,MAAL,GAAc,CAAd;IACA,KAAKD,IAAL,GAAY,CAAZ;EACD;;EAEDO,MAAM,CAACC,QAAD,EAAWC,WAAX,EAAwBC,UAAxB,EAAoC;IACxC,KAAKd,QAAL,CAAc,KAAd,EAAqBG,KAArB,GAA6BW,UAAU,CAACC,OAAxC;IACA,KAAKf,QAAL,CAAc,MAAd,EAAsBG,KAAtB,GAA8B,KAAKC,IAAnC;IACA,KAAKJ,QAAL,CAAc,QAAd,EAAwBG,KAAxB,GAAgC,KAAKE,MAArC;;IAEA,IAAI,KAAKW,cAAT,EAAyB;MACvBJ,QAAQ,CAACK,eAAT,CAAyB,IAAzB;MACA,KAAKP,MAAL,CAAYC,MAAZ,CAAmBC,QAAnB;IACD,CAHD,MAGO;MACLA,QAAQ,CAACK,eAAT,CAAyBJ,WAAzB;MACA,IAAI,KAAKK,KAAT,EAAgBN,QAAQ,CAACM,KAAT;MAChB,KAAKR,MAAL,CAAYC,MAAZ,CAAmBC,QAAnB;IACD;EACF;;AA1E0B;;AA8E7B,SAASd,SAAT"},"metadata":{},"sourceType":"module"}