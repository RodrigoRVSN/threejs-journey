{"ast":null,"code":"import { BufferGeometry, Vector3, Float32BufferAttribute } from 'three';\n/**\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n */\n\nclass ParametricGeometry extends BufferGeometry {\n  constructor() {\n    let func = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (u, v, target) => target.set(u, v, Math.cos(u) * Math.sin(v));\n    let slices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n    let stacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n    super();\n    this.type = 'ParametricGeometry';\n    this.parameters = {\n      func: func,\n      slices: slices,\n      stacks: stacks\n    }; // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const EPS = 0.00001;\n    const normal = new Vector3();\n    const p0 = new Vector3(),\n          p1 = new Vector3();\n    const pu = new Vector3(),\n          pv = new Vector3(); // generate vertices, normals and uvs\n\n    const sliceCount = slices + 1;\n\n    for (let i = 0; i <= stacks; i++) {\n      const v = i / stacks;\n\n      for (let j = 0; j <= slices; j++) {\n        const u = j / slices; // vertex\n\n        func(u, v, p0);\n        vertices.push(p0.x, p0.y, p0.z); // normal\n        // approximate tangent vectors via finite differences\n\n        if (u - EPS >= 0) {\n          func(u - EPS, v, p1);\n          pu.subVectors(p0, p1);\n        } else {\n          func(u + EPS, v, p1);\n          pu.subVectors(p1, p0);\n        }\n\n        if (v - EPS >= 0) {\n          func(u, v - EPS, p1);\n          pv.subVectors(p0, p1);\n        } else {\n          func(u, v + EPS, p1);\n          pv.subVectors(p1, p0);\n        } // cross product of tangent vectors returns surface normal\n\n\n        normal.crossVectors(pu, pv).normalize();\n        normals.push(normal.x, normal.y, normal.z); // uv\n\n        uvs.push(u, v);\n      }\n    } // generate indices\n\n\n    for (let i = 0; i < stacks; i++) {\n      for (let j = 0; j < slices; j++) {\n        const a = i * sliceCount + j;\n        const b = i * sliceCount + j + 1;\n        const c = (i + 1) * sliceCount + j + 1;\n        const d = (i + 1) * sliceCount + j; // faces one and two\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    } // build geometry\n\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n\n}\n\nexport { ParametricGeometry };","map":{"version":3,"names":["BufferGeometry","Vector3","Float32BufferAttribute","ParametricGeometry","constructor","func","u","v","target","set","Math","cos","sin","slices","stacks","type","parameters","indices","vertices","normals","uvs","EPS","normal","p0","p1","pu","pv","sliceCount","i","j","push","x","y","z","subVectors","crossVectors","normalize","a","b","c","d","setIndex","setAttribute"],"sources":["/home/rodrigorvsn/workspace/study/threejs-journey/07-react-three-fiber/08-mouse-events-with-r3f/node_modules/three-stdlib/geometries/ParametricGeometry.js"],"sourcesContent":["import { BufferGeometry, Vector3, Float32BufferAttribute } from 'three';\n\n/**\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n */\n\nclass ParametricGeometry extends BufferGeometry {\n  constructor(func = (u, v, target) => target.set(u, v, Math.cos(u) * Math.sin(v)), slices = 8, stacks = 8) {\n    super();\n    this.type = 'ParametricGeometry';\n    this.parameters = {\n      func: func,\n      slices: slices,\n      stacks: stacks\n    }; // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const EPS = 0.00001;\n    const normal = new Vector3();\n    const p0 = new Vector3(),\n          p1 = new Vector3();\n    const pu = new Vector3(),\n          pv = new Vector3(); // generate vertices, normals and uvs\n\n    const sliceCount = slices + 1;\n\n    for (let i = 0; i <= stacks; i++) {\n      const v = i / stacks;\n\n      for (let j = 0; j <= slices; j++) {\n        const u = j / slices; // vertex\n\n        func(u, v, p0);\n        vertices.push(p0.x, p0.y, p0.z); // normal\n        // approximate tangent vectors via finite differences\n\n        if (u - EPS >= 0) {\n          func(u - EPS, v, p1);\n          pu.subVectors(p0, p1);\n        } else {\n          func(u + EPS, v, p1);\n          pu.subVectors(p1, p0);\n        }\n\n        if (v - EPS >= 0) {\n          func(u, v - EPS, p1);\n          pv.subVectors(p0, p1);\n        } else {\n          func(u, v + EPS, p1);\n          pv.subVectors(p1, p0);\n        } // cross product of tangent vectors returns surface normal\n\n\n        normal.crossVectors(pu, pv).normalize();\n        normals.push(normal.x, normal.y, normal.z); // uv\n\n        uvs.push(u, v);\n      }\n    } // generate indices\n\n\n    for (let i = 0; i < stacks; i++) {\n      for (let j = 0; j < slices; j++) {\n        const a = i * sliceCount + j;\n        const b = i * sliceCount + j + 1;\n        const c = (i + 1) * sliceCount + j + 1;\n        const d = (i + 1) * sliceCount + j; // faces one and two\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    } // build geometry\n\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n\n}\n\nexport { ParametricGeometry };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}