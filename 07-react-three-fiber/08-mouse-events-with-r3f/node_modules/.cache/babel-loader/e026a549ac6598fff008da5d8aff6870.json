{"ast":null,"code":"import { Vector3, Curve } from 'three';\nimport { ParametricGeometry } from './ParametricGeometry.js';\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nconst ParametricGeometries = {\n  klein: function (v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, z;\n\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n\n    const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function (width, height) {\n    return function (u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function (u, t, target) {\n    // flat mobius strip\n    // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    const a = 2;\n    const x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    const y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    const z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function (u, t, target) {\n    // volumetric mobius strip\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25,\n          a = 0.125,\n          b = 0.65;\n    let x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    const z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    const y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = class TubeGeometry extends ParametricGeometry {\n  constructor(path) {\n    let segments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n    let radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let segmentsRadius = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    let closed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    const numpoints = segments + 1;\n    const frames = path.computeFrenetFrames(segments, closed),\n          tangents = frames.tangents,\n          normals = frames.normals,\n          binormals = frames.binormals;\n    const position = new Vector3();\n\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      const i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      const normal = normals[i];\n      const binormal = binormals[i];\n      const cx = -radius * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n\n      const cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n\n    super(ParametricTube, segments, segmentsRadius); // proxy internals\n\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n    this.path = path;\n    this.segments = segments;\n    this.radius = radius;\n    this.segmentsRadius = segmentsRadius;\n    this.closed = closed;\n  }\n\n};\n/*********************************************\n *\n * Parametric Replacement for TorusKnotGeometry\n *\n *********************************************/\n\nParametricGeometries.TorusKnotGeometry = class TorusKnotGeometry extends ParametricGeometries.TubeGeometry {\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n    let tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 40;\n    let segmentsT = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 64;\n    let segmentsR = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    let p = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n    let q = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;\n\n    class TorusKnotCurve extends Curve {\n      getPoint(t) {\n        let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n        const point = optionalTarget;\n        t *= Math.PI * 2;\n        const r = 0.5;\n        const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n        const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n        const z = r * Math.sin(q * t);\n        return point.set(x, y, z).multiplyScalar(radius);\n      }\n\n    }\n\n    const segments = segmentsT;\n    const radiusSegments = segmentsR;\n    const extrudePath = new TorusKnotCurve();\n    super(extrudePath, segments, tube, radiusSegments, true, false);\n    this.radius = radius;\n    this.tube = tube;\n    this.segmentsT = segmentsT;\n    this.segmentsR = segmentsR;\n    this.p = p;\n    this.q = q;\n  }\n\n};\n/*********************************************\n *\n * Parametric Replacement for SphereGeometry\n *\n *********************************************/\n\nParametricGeometries.SphereGeometry = class SphereGeometry extends ParametricGeometry {\n  constructor(size, u, v) {\n    function sphere(u, v, target) {\n      u *= Math.PI;\n      v *= 2 * Math.PI;\n      const x = size * Math.sin(u) * Math.cos(v);\n      const y = size * Math.sin(u) * Math.sin(v);\n      const z = size * Math.cos(u);\n      target.set(x, y, z);\n    }\n\n    super(sphere, u, v);\n  }\n\n};\n/*********************************************\n *\n * Parametric Replacement for PlaneGeometry\n *\n *********************************************/\n\nParametricGeometries.PlaneGeometry = class PlaneGeometry extends ParametricGeometry {\n  constructor(width, depth, segmentsWidth, segmentsDepth) {\n    function plane(u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * depth;\n      target.set(x, y, z);\n    }\n\n    super(plane, segmentsWidth, segmentsDepth);\n  }\n\n};\nexport { ParametricGeometries };","map":{"version":3,"names":["Vector3","Curve","ParametricGeometry","ParametricGeometries","klein","v","u","target","Math","PI","x","z","cos","sin","y","set","plane","width","height","mobius","t","a","mobius3d","phi","major","b","TubeGeometry","constructor","path","segments","radius","segmentsRadius","closed","numpoints","frames","computeFrenetFrames","tangents","normals","binormals","position","ParametricTube","i","floor","getPointAt","normal","binormal","cx","cy","copy","TorusKnotGeometry","tube","segmentsT","segmentsR","p","q","TorusKnotCurve","getPoint","optionalTarget","point","r","multiplyScalar","radiusSegments","extrudePath","SphereGeometry","size","sphere","PlaneGeometry","depth","segmentsWidth","segmentsDepth"],"sources":["/home/rodrigorvsn/workspace/study/threejs-journey/07-react-three-fiber/08-mouse-events-with-r3f/node_modules/three-stdlib/geometries/ParametricGeometries.js"],"sourcesContent":["import { Vector3, Curve } from 'three';\nimport { ParametricGeometry } from './ParametricGeometry.js';\n\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nconst ParametricGeometries = {\n  klein: function (v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, z;\n\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n\n    const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function (width, height) {\n    return function (u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function (u, t, target) {\n    // flat mobius strip\n    // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    const a = 2;\n    const x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    const y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    const z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function (u, t, target) {\n    // volumetric mobius strip\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25,\n          a = 0.125,\n          b = 0.65;\n    let x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    const z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    const y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = class TubeGeometry extends ParametricGeometry {\n  constructor(path, segments = 64, radius = 1, segmentsRadius = 8, closed = false) {\n    const numpoints = segments + 1;\n    const frames = path.computeFrenetFrames(segments, closed),\n          tangents = frames.tangents,\n          normals = frames.normals,\n          binormals = frames.binormals;\n    const position = new Vector3();\n\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      const i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      const normal = normals[i];\n      const binormal = binormals[i];\n      const cx = -radius * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n\n      const cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n\n    super(ParametricTube, segments, segmentsRadius); // proxy internals\n\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n    this.path = path;\n    this.segments = segments;\n    this.radius = radius;\n    this.segmentsRadius = segmentsRadius;\n    this.closed = closed;\n  }\n\n};\n/*********************************************\n *\n * Parametric Replacement for TorusKnotGeometry\n *\n *********************************************/\n\nParametricGeometries.TorusKnotGeometry = class TorusKnotGeometry extends ParametricGeometries.TubeGeometry {\n  constructor(radius = 200, tube = 40, segmentsT = 64, segmentsR = 8, p = 2, q = 3) {\n    class TorusKnotCurve extends Curve {\n      getPoint(t, optionalTarget = new Vector3()) {\n        const point = optionalTarget;\n        t *= Math.PI * 2;\n        const r = 0.5;\n        const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n        const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n        const z = r * Math.sin(q * t);\n        return point.set(x, y, z).multiplyScalar(radius);\n      }\n\n    }\n\n    const segments = segmentsT;\n    const radiusSegments = segmentsR;\n    const extrudePath = new TorusKnotCurve();\n    super(extrudePath, segments, tube, radiusSegments, true, false);\n    this.radius = radius;\n    this.tube = tube;\n    this.segmentsT = segmentsT;\n    this.segmentsR = segmentsR;\n    this.p = p;\n    this.q = q;\n  }\n\n};\n/*********************************************\n *\n * Parametric Replacement for SphereGeometry\n *\n *********************************************/\n\nParametricGeometries.SphereGeometry = class SphereGeometry extends ParametricGeometry {\n  constructor(size, u, v) {\n    function sphere(u, v, target) {\n      u *= Math.PI;\n      v *= 2 * Math.PI;\n      const x = size * Math.sin(u) * Math.cos(v);\n      const y = size * Math.sin(u) * Math.sin(v);\n      const z = size * Math.cos(u);\n      target.set(x, y, z);\n    }\n\n    super(sphere, u, v);\n  }\n\n};\n/*********************************************\n *\n * Parametric Replacement for PlaneGeometry\n *\n *********************************************/\n\nParametricGeometries.PlaneGeometry = class PlaneGeometry extends ParametricGeometry {\n  constructor(width, depth, segmentsWidth, segmentsDepth) {\n    function plane(u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * depth;\n      target.set(x, y, z);\n    }\n\n    super(plane, segmentsWidth, segmentsDepth);\n  }\n\n};\n\nexport { ParametricGeometries };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}