{"ast":null,"code":"import { Box3, Vector3, InstancedBufferGeometry, Float32BufferAttribute, InstancedInterleavedBuffer, InterleavedBufferAttribute, WireframeGeometry, Sphere } from 'three';\n\nconst _box = new Box3();\n\nconst _vector = new Vector3();\n\nclass LineSegmentsGeometry extends InstancedBufferGeometry {\n  constructor() {\n    super();\n    this.isLineSegmentsGeometry = true;\n    this.type = 'LineSegmentsGeometry';\n    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    const index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    this.setIndex(index);\n    this.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n\n  applyMatrix4(matrix) {\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n\n    if (start !== undefined) {\n      start.applyMatrix4(matrix);\n      end.applyMatrix4(matrix);\n      start.needsUpdate = true;\n    }\n\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n\n    return this;\n  }\n\n  setPositions(array) {\n    let lineSegments;\n\n    if (array instanceof Float32Array) {\n      lineSegments = array;\n    } else if (Array.isArray(array)) {\n      lineSegments = new Float32Array(array);\n    }\n\n    const instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1); // xyz, xyz\n\n    this.setAttribute('instanceStart', new InterleavedBufferAttribute(instanceBuffer, 3, 0)); // xyz\n\n    this.setAttribute('instanceEnd', new InterleavedBufferAttribute(instanceBuffer, 3, 3)); // xyz\n    //\n\n    this.computeBoundingBox();\n    this.computeBoundingSphere();\n    return this;\n  }\n\n  setColors(array) {\n    let colors;\n\n    if (array instanceof Float32Array) {\n      colors = array;\n    } else if (Array.isArray(array)) {\n      colors = new Float32Array(array);\n    }\n\n    const instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1); // rgb, rgb\n\n    this.setAttribute('instanceColorStart', new InterleavedBufferAttribute(instanceColorBuffer, 3, 0)); // rgb\n\n    this.setAttribute('instanceColorEnd', new InterleavedBufferAttribute(instanceColorBuffer, 3, 3)); // rgb\n\n    return this;\n  }\n\n  fromWireframeGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n\n  fromEdgesGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n\n  fromMesh(mesh) {\n    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry)); // set colors, maybe\n\n    return this;\n  }\n\n  fromLineSegments(lineSegments) {\n    const geometry = lineSegments.geometry;\n    this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n    // set colors, maybe\n\n    return this;\n  }\n\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n\n    if (start !== undefined && end !== undefined) {\n      this.boundingBox.setFromBufferAttribute(start);\n\n      _box.setFromBufferAttribute(end);\n\n      this.boundingBox.union(_box);\n    }\n  }\n\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n\n    if (this.boundingBox === null) {\n      this.computeBoundingBox();\n    }\n\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n\n    if (start !== undefined && end !== undefined) {\n      const center = this.boundingSphere.center;\n      this.boundingBox.getCenter(center);\n      let maxRadiusSq = 0;\n\n      for (let i = 0, il = start.count; i < il; i++) {\n        _vector.fromBufferAttribute(start, i);\n\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n\n        _vector.fromBufferAttribute(end, i);\n\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n      }\n\n      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n      if (isNaN(this.boundingSphere.radius)) {\n        console.error('THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.', this);\n      }\n    }\n  }\n\n  toJSON() {// todo\n  }\n\n  applyMatrix(matrix) {\n    console.warn('THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().');\n    return this.applyMatrix4(matrix);\n  }\n\n}\n\nexport { LineSegmentsGeometry };","map":{"version":3,"names":["Box3","Vector3","InstancedBufferGeometry","Float32BufferAttribute","InstancedInterleavedBuffer","InterleavedBufferAttribute","WireframeGeometry","Sphere","_box","_vector","LineSegmentsGeometry","constructor","isLineSegmentsGeometry","type","positions","uvs","index","setIndex","setAttribute","applyMatrix4","matrix","start","attributes","instanceStart","end","instanceEnd","undefined","needsUpdate","boundingBox","computeBoundingBox","boundingSphere","computeBoundingSphere","setPositions","array","lineSegments","Float32Array","Array","isArray","instanceBuffer","setColors","colors","instanceColorBuffer","fromWireframeGeometry","geometry","position","fromEdgesGeometry","fromMesh","mesh","fromLineSegments","setFromBufferAttribute","union","center","getCenter","maxRadiusSq","i","il","count","fromBufferAttribute","Math","max","distanceToSquared","radius","sqrt","isNaN","console","error","toJSON","applyMatrix","warn"],"sources":["/home/rodrigorvsn/workspace/study/threejs-journey/07-react-three-fiber/08-mouse-events-with-r3f/node_modules/three-stdlib/lines/LineSegmentsGeometry.js"],"sourcesContent":["import { Box3, Vector3, InstancedBufferGeometry, Float32BufferAttribute, InstancedInterleavedBuffer, InterleavedBufferAttribute, WireframeGeometry, Sphere } from 'three';\n\nconst _box = new Box3();\n\nconst _vector = new Vector3();\n\nclass LineSegmentsGeometry extends InstancedBufferGeometry {\n  constructor() {\n    super();\n    this.isLineSegmentsGeometry = true;\n    this.type = 'LineSegmentsGeometry';\n    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    const index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    this.setIndex(index);\n    this.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n\n  applyMatrix4(matrix) {\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n\n    if (start !== undefined) {\n      start.applyMatrix4(matrix);\n      end.applyMatrix4(matrix);\n      start.needsUpdate = true;\n    }\n\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n\n    return this;\n  }\n\n  setPositions(array) {\n    let lineSegments;\n\n    if (array instanceof Float32Array) {\n      lineSegments = array;\n    } else if (Array.isArray(array)) {\n      lineSegments = new Float32Array(array);\n    }\n\n    const instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1); // xyz, xyz\n\n    this.setAttribute('instanceStart', new InterleavedBufferAttribute(instanceBuffer, 3, 0)); // xyz\n\n    this.setAttribute('instanceEnd', new InterleavedBufferAttribute(instanceBuffer, 3, 3)); // xyz\n    //\n\n    this.computeBoundingBox();\n    this.computeBoundingSphere();\n    return this;\n  }\n\n  setColors(array) {\n    let colors;\n\n    if (array instanceof Float32Array) {\n      colors = array;\n    } else if (Array.isArray(array)) {\n      colors = new Float32Array(array);\n    }\n\n    const instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1); // rgb, rgb\n\n    this.setAttribute('instanceColorStart', new InterleavedBufferAttribute(instanceColorBuffer, 3, 0)); // rgb\n\n    this.setAttribute('instanceColorEnd', new InterleavedBufferAttribute(instanceColorBuffer, 3, 3)); // rgb\n\n    return this;\n  }\n\n  fromWireframeGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n\n  fromEdgesGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n\n  fromMesh(mesh) {\n    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry)); // set colors, maybe\n\n    return this;\n  }\n\n  fromLineSegments(lineSegments) {\n    const geometry = lineSegments.geometry;\n    this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n    // set colors, maybe\n\n    return this;\n  }\n\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n\n    if (start !== undefined && end !== undefined) {\n      this.boundingBox.setFromBufferAttribute(start);\n\n      _box.setFromBufferAttribute(end);\n\n      this.boundingBox.union(_box);\n    }\n  }\n\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n\n    if (this.boundingBox === null) {\n      this.computeBoundingBox();\n    }\n\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n\n    if (start !== undefined && end !== undefined) {\n      const center = this.boundingSphere.center;\n      this.boundingBox.getCenter(center);\n      let maxRadiusSq = 0;\n\n      for (let i = 0, il = start.count; i < il; i++) {\n        _vector.fromBufferAttribute(start, i);\n\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n\n        _vector.fromBufferAttribute(end, i);\n\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n      }\n\n      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n      if (isNaN(this.boundingSphere.radius)) {\n        console.error('THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.', this);\n      }\n    }\n  }\n\n  toJSON() {// todo\n  }\n\n  applyMatrix(matrix) {\n    console.warn('THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().');\n    return this.applyMatrix4(matrix);\n  }\n\n}\n\nexport { LineSegmentsGeometry };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}